<haxe>
	<class path="Array" params="T" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Array.hx" extern="1">
		<iterator public="1" get="inline" set="null" line="56">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" get="inline" set="null" line="52">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a copy of the Array. The values are not
		copied, only the Array structure.</haxe_doc>
		</copy>
		<remove public="1" get="inline" set="null" line="48">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.</haxe_doc>
		</remove>
		<insert public="1" get="inline" set="null" line="44">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the element [x] at the start of the array.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the Array content.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Removes [len] elements starting from [pos] an returns them.</haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element and returns it.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Reverse the order of elements of the Array.</haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Adds the element [x] at the end of the array.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of the array and returns it.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of an array with [sep] for separating each element.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending [a] to [this].</haxe_doc>
		</concat>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The length of the Array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Arrays" params="" file="src/Arrays.hx">
		<addIf public="1" params="T" set="method" line="14" static="1">
			<f a="arr:?condition:value">
				<c path="Array"><c path="addIf.T"/></c>
				<e path="Bool"/>
				<t path="Null"><c path="addIf.T"/></t>
				<c path="Array"><c path="addIf.T"/></c>
			</f>
			<haxe_doc>* push the value into the array and return the array itself only if the condition
	 * evaluates to true.</haxe_doc>
		</addIf>
		<add public="1" params="T" get="inline" set="null" line="28" static="1">
			<f a="arr:value">
				<c path="Array"><c path="add.T"/></c>
				<c path="add.T"/>
				<c path="Array"><c path="add.T"/></c>
			</f>
			<haxe_doc>* push the value into the array and return the array itself</haxe_doc>
		</add>
		<delete public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="arr:value">
				<c path="Array"><c path="delete.T"/></c>
				<c path="delete.T"/>
				<c path="Array"><c path="delete.T"/></c>
			</f>
			<haxe_doc>* removes the value from the array and return the array itself</haxe_doc>
		</delete>
		<removef public="1" params="T" set="method" line="43" static="1"><f a="arr:f">
	<c path="Array"><c path="removef.T"/></c>
	<f a="">
		<c path="removef.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></removef>
		<deletef public="1" params="T" get="inline" set="null" line="58" static="1"><f a="arr:f">
	<c path="Array"><c path="deletef.T"/></c>
	<f a="">
		<c path="deletef.T"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="deletef.T"/></c>
</f></deletef>
		<filter public="1" params="T" set="method" line="67" static="1">
			<f a="arr:f">
				<c path="Array"><c path="filter.T"/></c>
				<f a="">
					<c path="filter.T"/>
					<e path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<haxe_doc>* creates a new array filtered by the 'f' function</haxe_doc>
		</filter>
		<min public="1" params="T" set="method" line="76" static="1"><f a="arr:?f">
	<c path="Array"><c path="min.T"/></c>
	<f a="">
		<c path="min.T"/>
		<c path="Float"/>
	</f>
	<t path="Null"><c path="min.T"/></t>
</f></min>
		<floatMin public="1" params="T" set="method" line="92" static="1"><f a="arr:f">
	<c path="Array"><c path="floatMin.T"/></c>
	<f a="">
		<c path="floatMin.T"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></floatMin>
		<bounds public="1" params="T" set="method" line="101" static="1"><f a="arr:?f">
	<c path="Array"><c path="bounds.T"/></c>
	<f a="">
		<c path="bounds.T"/>
		<c path="Float"/>
	</f>
	<c path="Array"><t path="Null"><c path="bounds.T"/></t></c>
</f></bounds>
		<boundsFloat public="1" params="T" set="method" line="123" static="1"><f a="arr:f">
	<c path="Array"><c path="boundsFloat.T"/></c>
	<f a="">
		<c path="boundsFloat.T"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Float"/></c>
</f></boundsFloat>
		<max public="1" params="T" set="method" line="136" static="1"><f a="arr:?f">
	<c path="Array"><c path="max.T"/></c>
	<f a="">
		<c path="max.T"/>
		<c path="Float"/>
	</f>
	<t path="Null"><c path="max.T"/></t>
</f></max>
		<floatMax public="1" params="T" set="method" line="153" static="1"><f a="arr:f">
	<c path="Array"><c path="floatMax.T"/></c>
	<f a="">
		<c path="floatMax.T"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></floatMax>
		<flatten public="1" params="T" set="method" line="162" static="1"><f a="arr">
	<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
	<c path="Array"><c path="flatten.T"/></c>
</f></flatten>
		<map public="1" params="TIn:TOut" get="inline" set="null" line="170" static="1"><f a="arr:f">
	<c path="Array"><c path="map.TIn"/></c>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<reduce public="1" params="TIn:TOut" get="inline" set="null" line="179" static="1"><f a="arr:f:initialValue">
	<c path="Array"><c path="reduce.TIn"/></c>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<order public="1" params="T" get="inline" set="null" line="188" static="1"><f a="arr:?f">
	<c path="Array"><c path="order.T"/></c>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<orderMultiple public="1" params="T" set="method" line="194" static="1"><f a="arr:?f:rest">
	<c path="Array"><c path="orderMultiple.T"/></c>
	<f a=":">
		<c path="orderMultiple.T"/>
		<c path="orderMultiple.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="Array"><d/></c></c>
	<e path="Void"/>
</f></orderMultiple>
		<split public="1" params="T" set="method" line="223" static="1"><f a="arr:?f">
	<c path="Array"><c path="split.T"/></c>
	<f a=":">
		<c path="split.T"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="Array"><c path="split.T"/></c></c>
</f></split>
		<exists public="1" params="T" set="method" line="242" static="1"><f a="arr:?value:?f">
	<c path="Array"><c path="exists.T"/></c>
	<c path="exists.T"/>
	<f a="">
		<c path="exists.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></exists>
		<format public="1" set="method" line="257" static="1"><f a="v:?param:?params:?culture">
	<c path="Array"><d/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="285" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Array"><d/></c>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="317" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Float"/></c>
</f></interpolate>
		<interpolatef public="1" set="method" line="322" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="Float"/></c>
	</f>
</f></interpolatef>
		<interpolateStrings public="1" set="method" line="347" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="String"/></c>
</f></interpolateStrings>
		<interpolateStringsf public="1" set="method" line="352" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="String"/></c>
	</f>
</f></interpolateStringsf>
		<interpolateInts public="1" set="method" line="377" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Int"/></c>
</f></interpolateInts>
		<interpolateIntsf public="1" set="method" line="382" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="Int"/></c>
	</f>
</f></interpolateIntsf>
		<indexOf public="1" params="T" get="inline" set="null" line="407" static="1"><f a="arr:el">
	<c path="Array"><c path="indexOf.T"/></c>
	<c path="indexOf.T"/>
	<c path="Int"/>
</f></indexOf>
		<every public="1" params="T" get="inline" set="null" line="420" static="1"><f a="arr:f">
	<c path="Array"><c path="every.T"/></c>
	<f a=":">
		<c path="every.T"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></every>
		<each public="1" params="T" get="inline" set="null" line="432" static="1"><f a="arr:f">
	<c path="Array"><c path="each.T"/></c>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<any public="1" params="T" get="inline" set="null" line="442" static="1"><f a="arr:f">
	<c path="Array"><c path="any.T"/></c>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" get="inline" set="null" line="447" static="1"><f a="arr:f">
	<c path="Array"><c path="all.T"/></c>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<random public="1" params="T" set="method" line="452" static="1"><f a="arr">
	<c path="Array"><c path="random.T"/></c>
	<c path="random.T"/>
</f></random>
		<string public="1" params="T" set="method" line="457" static="1"><f a="arr">
	<c path="Array"><c path="string.T"/></c>
	<c path="String"/>
</f></string>
		<last public="1" params="T" get="inline" set="null" line="462" static="1"><f a="arr">
	<c path="Array"><c path="last.T"/></c>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<lastf public="1" params="T" set="method" line="467" static="1"><f a="arr:f">
	<c path="Array"><c path="lastf.T"/></c>
	<f a="">
		<c path="lastf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="lastf.T"/></t>
</f></lastf>
		<first public="1" params="T" get="inline" set="null" line="476" static="1"><f a="arr">
	<c path="Array"><c path="first.T"/></c>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<firstf public="1" params="T" set="method" line="481" static="1"><f a="arr:f">
	<c path="Array"><c path="firstf.T"/></c>
	<f a="">
		<c path="firstf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="firstf.T"/></t>
</f></firstf>
		<bisect public="1" get="inline" set="null" line="489" static="1"><f a="a:x:?lo:?hi">
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bisect>
		<bisectRight public="1" set="method" line="494" static="1"><f a="a:x:?lo:?hi">
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bisectRight>
		<bisectLeft public="1" set="method" line="509" static="1"><f a="a:x:?lo:?hi">
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bisectLeft>
		<nearest public="1" params="T" set="method" line="524" static="1"><f a="a:x:f">
	<c path="Array"><c path="nearest.T"/></c>
	<c path="Float"/>
	<f a="">
		<c path="nearest.T"/>
		<c path="Float"/>
	</f>
	<c path="nearest.T"/>
</f></nearest>
		<compare public="1" params="T" set="method" line="533" static="1"><f a="a:b">
	<c path="Array"><c path="compare.T"/></c>
	<c path="Array"><c path="compare.T"/></c>
	<c path="Int"/>
</f></compare>
		<product public="1" params="T" set="method" line="546" static="1"><f a="a">
	<c path="Array"><c path="Array"><c path="product.T"/></c></c>
	<c path="Array"><c path="Array"><c path="product.T"/></c></c>
</f></product>
		<rotate public="1" params="T" set="method" line="568" static="1"><f a="a">
	<c path="Array"><c path="Array"><c path="rotate.T"/></c></c>
	<c path="Array"><c path="Array"><c path="rotate.T"/></c></c>
</f></rotate>
		<shuffle public="1" params="T" set="method" line="582" static="1"><f a="a">
	<c path="Array"><c path="shuffle.T"/></c>
	<c path="Array"><c path="shuffle.T"/></c>
</f></shuffle>
		<scanf public="1" params="T" set="method" line="596" static="1"><f a="arr:weightf:?incremental">
	<c path="Array"><c path="scanf.T"/></c>
	<f a=":">
		<c path="scanf.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<t path="Null"><c path="scanf.T"/></t>
	</f>
</f></scanf>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Bools" params="" file="src/Bools.hx">
		<format public="1" set="method" line="11" static="1"><f a="v:?param:?params:?culture">
	<e path="Bool"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="16" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<e path="Bool"/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="35" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<e path="Bool"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="40" static="1"><f a="a:b:?equation">
	<e path="Bool"/>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="_">
		<c path="Float"/>
		<e path="Bool"/>
	</f>
</f></interpolatef>
		<canParse public="1" set="method" line="51" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="57" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></parse>
		<compare public="1" get="inline" set="null" line="62" static="1"><f a="a:b">
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Class" params="T" file="/Users/francoponticelli/Projects/haxe/std/Class.hx" extern="1"><haxe_doc>An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Date" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="42" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="46" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="52" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.</haxe_doc>
		</fromString>
		<toString public="1" get="inline" set="null" line="38">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.</haxe_doc>
		</toString>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the week day of the date (0-6 range).</haxe_doc>
		</getDay>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the day of the date (1-31 range).</haxe_doc>
		</getDate>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the month of the date (0-11 range).</haxe_doc>
		</getMonth>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the full year of the date.</haxe_doc>
		</getFullYear>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the seconds of the date (0-59 range).</haxe_doc>
		</getSeconds>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the minutes value of the date (0-59 range).</haxe_doc>
		</getMinutes>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Returns the hours value of the date (0-23 range).</haxe_doc>
		</getHours>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.</haxe_doc>
		</getTime>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a new date object.</haxe_doc>
		</new>
		<haxe_doc>The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="DateTools" params="" file="/Users/francoponticelli/Projects/haxe/std/DateTools.hx">
		<__format_get set="method" line="38" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="91" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="116" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date [d] according to the format [f]. The format
		is compatible with the [strftime] standard format, except that there
		is no support in Flash and JS for day and months names (due to lack
		of proper internationalization API). On haXe/Neko/Windows, some
		formats are not supported.</haxe_doc>
		</format>
		<delta public="1" set="method" line="129" static="1">
			<f a="d:t">
				<c path="Date"/>
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date which time has been changed by [t] milliseconds.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH line="133" static="1"><c path="Array"><c path="Int"/></c></DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="138" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in a month</haxe_doc>
		</getMonthDays>
		<seconds public="1" set="method" line="152" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a number of seconds to a date-time</haxe_doc>
		</seconds>
		<minutes public="1" set="method" line="159" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a number of minutes to a date-time</haxe_doc>
		</minutes>
		<hours public="1" set="method" line="166" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a number of hours to a date-time</haxe_doc>
		</hours>
		<days public="1" set="method" line="173" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a number of days to a date-time</haxe_doc>
		</days>
		<parse public="1" set="method" line="180" static="1">
			<f a="t">
				<c path="Float"/>
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="196" static="1">
			<f a="o">
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
				<c path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for [Date]
	manipulation. It's stored in a different class in order to prevent
	the standard [Date] of being bloated and thus increasing the size of
	each application using it.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/EReg.hx">
		<customReplace public="1" set="method" line="72">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.</haxe_doc>
		</customReplace>
		<replace public="1" set="method" line="68">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.</haxe_doc>
		</replace>
		<split public="1" set="method" line="62">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split a string by using the regular expression to match
		the separators.</haxe_doc>
		</split>
		<matchedPos public="1" set="method" line="57">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position of the matched substring within the
		original matched string.</haxe_doc>
		</matchedPos>
		<matchedRight public="1" set="method" line="51">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part of the string that was at the right of
		of the matched substring.</haxe_doc>
		</matchedRight>
		<matchedLeft public="1" set="method" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part of the string that was as the left of
		of the matched substring.</haxe_doc>
		</matchedLeft>
		<matched public="1" set="method" line="42">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.</haxe_doc>
		</matched>
		<match public="1" set="method" line="35">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the regular expression matches the String.
		Updates the internal state accordingly.</haxe_doc>
		</match>
		<r><d/></r>
		<new public="1" set="method" line="30">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern [r] and
		options [opt].</haxe_doc>
		</new>
		<haxe_doc>Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Dates" params="" file="src/Dates.hx">
		<format public="1" set="method" line="13" static="1"><f a="d:?param:?params:?culture">
	<c path="Date"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="18" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="d">
		<c path="Date"/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" get="inline" set="null" line="75" static="1"><f a="f:a:b:?equation">
	<c path="Float"/>
	<c path="Date"/>
	<c path="Date"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Date"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="80" static="1"><f a="a:b:?equation">
	<c path="Date"/>
	<c path="Date"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="v">
		<c path="Float"/>
		<c path="Date"/>
	</f>
</f></interpolatef>
		<snap public="1" set="method" line="86" static="1"><f a="time:period:?mode">
	<c path="Float"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="Float"/>
</f></snap>
		<snapToWeekDay public="1" set="method" line="165" static="1"><f a="time:day">
	<c path="Float"/>
	<c path="String"/>
	<c path="Float"/>
</f></snapToWeekDay>
		<_reparse line="192" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="193" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="198" static="1"><f a="s">
	<c path="String"/>
	<c path="Date"/>
</f></parse>
		<compare public="1" get="inline" set="null" line="207" static="1"><f a="a:b">
	<c path="Date"/>
	<c path="Date"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Dynamics" params="" file="src/Dynamics.hx">
		<format public="1" set="method" line="11" static="1"><f a="v:?param:?params:?nullstring:?culture">
	<d/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="16" static="1"><f a="?param:?params:?nullstring:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<d/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="49" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<d/>
	<d/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<unknown/>
</f></interpolate>
		<interpolatef public="1" set="method" line="54" static="1"><f a="a:b:?equation">
	<d/>
	<d/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<d/>
	</f>
</f></interpolatef>
		<string public="1" set="method" line="83" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></string>
		<compare public="1" set="method" line="128" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>* @todo add compare over comparison method for custom classes</haxe_doc>
		</compare>
		<comparef public="1" set="method" line="161" static="1"><f a="sample">
	<d/>
	<f a=":">
		<d/>
		<d/>
		<c path="Int"/>
	</f>
</f></comparef>
		<clone public="1" set="method" line="188" static="1"><f a="v:?cloneInstances">
	<d/>
	<e path="Bool"/>
	<a/>
</f></clone>
		<same public="1" params="T1:T2" set="method" line="226" static="1"><f a="a:b">
	<c path="same.T1"/>
	<c path="same.T2"/>
	<e path="Bool"/>
</f></same>
		<number public="1" get="inline" set="null" line="371" static="1"><f a="v">
	<d/>
	<c path="Float"/>
</f></number>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="DynamicsT" params="" file="src/DynamicsT.hx">
		<toHash public="1" params="T" set="method" line="8" static="1"><f a="ob">
	<d><c path="toHash.T"/></d>
	<c path="Hash"><c path="toHash.T"/></c>
</f></toHash>
		<copyToHash public="1" params="T" set="method" line="14" static="1"><f a="ob:hash">
	<d><c path="copyToHash.T"/></d>
	<c path="Hash"><c path="copyToHash.T"/></c>
	<c path="Hash"><c path="copyToHash.T"/></c>
</f></copyToHash>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Enum" params="T" file="/Users/francoponticelli/Projects/haxe/std/Enum.hx" extern="1"><haxe_doc>An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="EnumValue" params="" file="/Users/francoponticelli/Projects/haxe/std/EnumValue.hx" extern="1"><haxe_doc>An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Enums" params="" file="src/Enums.hx">
		<string public="1" set="method" line="8" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></string>
		<compare public="1" set="method" line="17" static="1"><f a="a:b">
	<d/>
	<d/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Floats" params="" file="src/Floats.hx">
		<normalize public="1" set="method" line="13" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></normalize>
		<clamp public="1" set="method" line="23" static="1"><f a="v:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clamp>
		<clampSym public="1" set="method" line="33" static="1"><f a="v:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clampSym>
		<range public="1" set="method" line="43" static="1"><f a="start:?stop:?step:?inclusive">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="Array"><c path="Float"/></c>
</f></range>
		<sign public="1" get="inline" set="null" line="66" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></sign>
		<abs public="1" get="inline" set="null" line="71" static="1"><f a="a">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" get="inline" set="null" line="76" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" get="inline" set="null" line="81" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<wrap public="1" set="method" line="86" static="1"><f a="v:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></wrap>
		<circularWrap public="1" set="method" line="93" static="1"><f a="v:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></circularWrap>
		<interpolate public="1" set="method" line="101" static="1"><f a="f:?a:?b:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="108" static="1"><f a="?a:?b:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="f">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></interpolatef>
		<interpolateClampf public="1" set="method" line="117" static="1"><f a="min:max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="a:b">
		<c path="Float"/>
		<c path="Float"/>
		<f a="f">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
</f></interpolateClampf>
		<format public="1" set="method" line="128" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="133" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<_reparse line="156" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="157" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="162" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></parse>
		<compare public="1" get="inline" set="null" line="169" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></compare>
		<isNumeric public="1" get="inline" set="null" line="174" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isNumeric>
		<equals public="1" set="method" line="179" static="1"><f a="a:b:?approx">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></equals>
		<uninterpolatef public="1" set="method" line="190" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<f a="x">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></uninterpolatef>
		<uninterpolateClampf public="1" set="method" line="196" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<f a="x">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></uninterpolateClampf>
		<round public="1" set="method" line="202" static="1"><f a="number:?precision">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></round>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Func" params="" file="src/Func.hx"/>
	<class path="Hash" params="T" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Hash.hx">
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="64">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h>
			<d/>
			<meta/>
		</h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Hashes" params="" file="src/Hashes.hx">
		<entries public="1" params="T" set="method" line="11" static="1"><f a="h">
	<c path="Hash"><c path="entries.T"/></c>
	<c path="Array"><a>
	<value><c path="entries.T"/></value>
	<key><c path="String"/></key>
</a></c>
</f></entries>
		<toDynamic public="1" params="T" set="method" line="19" static="1"><f a="hash">
	<c path="Hash"><c path="toDynamic.T"/></c>
	<d><c path="toDynamic.T"/></d>
</f></toDynamic>
		<importObject public="1" params="T" set="method" line="27" static="1"><f a="hash:ob">
	<c path="Hash"><c path="importObject.T"/></c>
	<d><c path="importObject.T"/></d>
	<c path="Hash"><c path="importObject.T"/></c>
</f></importObject>
		<copyTo public="1" params="T" set="method" line="32" static="1"><f a="from:to">
	<c path="Hash"><c path="copyTo.T"/></c>
	<c path="Hash"><c path="copyTo.T"/></c>
	<c path="Hash"><c path="copyTo.T"/></c>
</f></copyTo>
		<clone public="1" params="T" set="method" line="39" static="1"><f a="src">
	<c path="Hash"><c path="clone.T"/></c>
	<c path="Hash"><c path="clone.T"/></c>
</f></clone>
		<arrayOfKeys public="1" get="inline" set="null" line="46" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="Array"><c path="String"/></c>
</f></arrayOfKeys>
		<setOfKeys public="1" set="method" line="51" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="thx.collection.Set"><c path="String"/></c>
</f></setOfKeys>
		<empty public="1" get="inline" set="null" line="59" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<e path="Bool"/>
</f></empty>
		<count public="1" set="method" line="61" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="Int"/>
</f></count>
		<mergef public="1" params="T" set="method" line="75" static="1"><f a="hash:new_hash:f">
	<c path="Hash"><c path="mergef.T"/></c>
	<c path="Hash"><c path="mergef.T"/></c>
	<f a="::">
		<c path="String"/>
		<c path="mergef.T"/>
		<c path="mergef.T"/>
		<c path="mergef.T"/>
	</f>
	<e path="Void"/>
</f></mergef>
		<merge public="1" params="T" set="method" line="88" static="1"><f a="hash:new_hash">
	<c path="Hash"><c path="merge.T"/></c>
	<c path="Hash"><c path="merge.T"/></c>
	<e path="Void"/>
</f></merge>
		<clear public="1" set="method" line="93" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></clear>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="FriendHash" params="" file="src/Hashes.hx" module="Hashes"><a><h><d/></h></a></typedef>
	<class path="IntHash" params="T" file="/Users/francoponticelli/Projects/haxe/std/js/_std/IntHash.hx">
		<toString public="1" set="method" line="72">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="63">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<meta/>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h>
			<d/>
			<meta/>
		</h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="IntHashes" params="" file="src/IntHashes.hx">
		<empty public="1" get="inline" set="null" line="3" static="1"><f a="hash">
	<c path="IntHash"><d/></c>
	<e path="Bool"/>
</f></empty>
		<count public="1" set="method" line="5" static="1"><f a="hash">
	<c path="IntHash"><d/></c>
	<c path="Int"/>
</f></count>
		<clear public="1" set="method" line="19" static="1"><f a="hash">
	<c path="IntHash"><d/></c>
	<e path="Void"/>
</f></clear>
	</class>
	<typedef path="FriendIntHash" params="" file="src/IntHashes.hx" module="IntHashes"><a><h><d/></h></a></typedef>
	<class path="IntIter" params="" file="/Users/francoponticelli/Projects/haxe/std/IntIter.hx">
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.</haxe_doc>
		</next>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<max><c path="Int"/></max>
		<min><c path="Int"/></min>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>Integer iterator. Used for interval implementation.</haxe_doc>
	</class>
	<class path="Ints" params="" file="src/Ints.hx">
		<range public="1" set="method" line="12" static="1"><f a="start:?stop:?step">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
</f></range>
		<sign public="1" get="inline" set="null" line="28" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></sign>
		<abs public="1" get="inline" set="null" line="33" static="1"><f a="a">
	<c path="Int"/>
	<c path="Int"/>
</f></abs>
		<min public="1" get="inline" set="null" line="38" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></min>
		<max public="1" get="inline" set="null" line="43" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></max>
		<wrap public="1" set="method" line="48" static="1"><f a="v:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></wrap>
		<clamp public="1" set="method" line="53" static="1"><f a="v:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clamp>
		<clampSym public="1" set="method" line="63" static="1"><f a="v:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clampSym>
		<interpolate public="1" get="inline" set="null" line="73" static="1"><f a="f:?min:?max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Int"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="80" static="1"><f a="?min:?max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="f">
		<c path="Float"/>
		<c path="Int"/>
	</f>
</f></interpolatef>
		<format public="1" set="method" line="88" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="93" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<_reparse line="98" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="99" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="105" static="1"><f a="s">
	<c path="String"/>
	<t path="Null"><c path="Int"/></t>
</f></parse>
		<compare public="1" get="inline" set="null" line="112" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Iterables" params="" file="src/Iterables.hx">
		<count public="1" params="T" get="inline" set="null" line="9" static="1"><f a="it">
	<t path="Iterable"><c path="count.T"/></t>
	<c path="Int"/>
</f></count>
		<indexOf public="1" params="T" get="inline" set="null" line="14" static="1"><f a="it:?v:?f">
	<t path="Iterable"><c path="indexOf.T"/></t>
	<c path="indexOf.T"/>
	<f a="">
		<c path="indexOf.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></indexOf>
		<contains public="1" params="T" get="inline" set="null" line="19" static="1"><f a="it:?v:?f">
	<t path="Iterable"><c path="contains.T"/></t>
	<c path="contains.T"/>
	<f a="">
		<c path="contains.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></contains>
		<array public="1" params="T" get="inline" set="null" line="24" static="1"><f a="it">
	<t path="Iterable"><c path="array.T"/></t>
	<c path="Array"><c path="array.T"/></c>
</f></array>
		<join public="1" params="T" get="inline" set="null" line="29" static="1"><f a="it:?glue">
	<t path="Iterable"><c path="join.T"/></t>
	<c path="String"/>
	<c path="String"/>
</f></join>
		<map public="1" params="TIn:TOut" get="inline" set="null" line="34" static="1"><f a="it:f">
	<t path="Iterable"><c path="map.TIn"/></t>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<each public="1" params="T" get="inline" set="null" line="39" static="1"><f a="it:f">
	<t path="Iterable"><c path="each.T"/></t>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<filter public="1" params="T" get="inline" set="null" line="44" static="1"><f a="it:f">
	<t path="Iterable"><c path="filter.T"/></t>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<reduce public="1" params="TIn:TOut" get="inline" set="null" line="49" static="1"><f a="it:f:initialValue">
	<t path="Iterable"><c path="reduce.TIn"/></t>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<random public="1" params="T" get="inline" set="null" line="54" static="1"><f a="it">
	<t path="Iterable"><c path="random.T"/></t>
	<c path="random.T"/>
</f></random>
		<any public="1" params="T" get="inline" set="null" line="59" static="1"><f a="it:f">
	<t path="Iterable"><c path="any.T"/></t>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" get="inline" set="null" line="64" static="1"><f a="it:f">
	<t path="Iterable"><c path="all.T"/></t>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<last public="1" params="T" get="inline" set="null" line="69" static="1"><f a="it">
	<t path="Iterable"><c path="last.T"/></t>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<lastf public="1" params="T" get="inline" set="null" line="74" static="1"><f a="it:f">
	<t path="Iterable"><c path="lastf.T"/></t>
	<f a="">
		<c path="lastf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="lastf.T"/></t>
</f></lastf>
		<first public="1" params="T" get="inline" set="null" line="79" static="1"><f a="it">
	<t path="Iterable"><c path="first.T"/></t>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<firstf public="1" params="T" get="inline" set="null" line="84" static="1"><f a="it:f">
	<t path="Iterable"><c path="firstf.T"/></t>
	<f a="">
		<c path="firstf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="firstf.T"/></t>
</f></firstf>
		<order public="1" params="T" get="inline" set="null" line="89" static="1"><f a="it:?f">
	<t path="Iterable"><c path="order.T"/></t>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<isIterable public="1" set="method" line="94" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isIterable>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Iterators" params="" file="src/Iterators.hx">
		<count public="1" params="T" set="method" line="8" static="1"><f a="it">
	<t path="Iterator"><c path="count.T"/></t>
	<c path="Int"/>
</f></count>
		<indexOf public="1" params="T" set="method" line="18" static="1"><f a="it:?v:?f">
	<t path="Iterator"><c path="indexOf.T"/></t>
	<c path="indexOf.T"/>
	<f a="">
		<c path="indexOf.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></indexOf>
		<contains public="1" params="T" set="method" line="31" static="1"><f a="it:?v:?f">
	<t path="Iterator"><c path="contains.T"/></t>
	<c path="contains.T"/>
	<f a="">
		<c path="contains.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></contains>
		<array public="1" params="T" set="method" line="42" static="1"><f a="it">
	<t path="Iterator"><c path="array.T"/></t>
	<c path="Array"><c path="array.T"/></c>
</f></array>
		<join public="1" params="T" get="inline" set="null" line="50" static="1"><f a="it:?glue">
	<t path="Iterator"><c path="join.T"/></t>
	<c path="String"/>
	<c path="String"/>
</f></join>
		<map public="1" params="TIn:TOut" set="method" line="55" static="1"><f a="it:f">
	<t path="Iterator"><c path="map.TIn"/></t>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<each public="1" params="T" set="method" line="63" static="1"><f a="it:f">
	<t path="Iterator"><c path="each.T"/></t>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<filter public="1" params="T" set="method" line="70" static="1"><f a="it:f">
	<t path="Iterator"><c path="filter.T"/></t>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<reduce public="1" params="TIn:TOut" set="method" line="79" static="1"><f a="it:f:initialValue">
	<t path="Iterator"><c path="reduce.TIn"/></t>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<random public="1" params="T" get="inline" set="null" line="88" static="1"><f a="it">
	<t path="Iterator"><c path="random.T"/></t>
	<c path="random.T"/>
</f></random>
		<any public="1" params="T" set="method" line="93" static="1"><f a="it:f">
	<t path="Iterator"><c path="any.T"/></t>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" set="method" line="101" static="1"><f a="it:f">
	<t path="Iterator"><c path="all.T"/></t>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<last public="1" params="T" get="inline" set="null" line="109" static="1"><f a="it">
	<t path="Iterator"><c path="last.T"/></t>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<lastf public="1" params="T" set="method" line="116" static="1"><f a="it:f">
	<t path="Iterator"><c path="lastf.T"/></t>
	<f a="">
		<c path="lastf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="lastf.T"/></t>
</f></lastf>
		<first public="1" params="T" get="inline" set="null" line="123" static="1"><f a="it">
	<t path="Iterator"><c path="first.T"/></t>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<firstf public="1" params="T" set="method" line="128" static="1"><f a="it:f">
	<t path="Iterator"><c path="firstf.T"/></t>
	<f a="">
		<c path="firstf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="firstf.T"/></t>
</f></firstf>
		<order public="1" params="T" get="inline" set="null" line="136" static="1"><f a="it:?f">
	<t path="Iterator"><c path="order.T"/></t>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<isIterator public="1" set="method" line="141" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isIterator>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/Users/francoponticelli/Projects/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an [Array] from an [Iterable]</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a [List] from an [Iterable]</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to [map], but also pass an index for each item iterated.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if at least one element of the iterable is found by using the specific function.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if all elements of the iterable have the specified property defined by [f].</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>Call the function 'f' on all elements of the [Iterable] 'it'.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Return the list of elements matching the function 'f'</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional 'fold' using an [Iterable]</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>Count the number of elements in an [Iterable] having [pred] returning true.</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if an iterable does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a list containing all items of 'a' followed by all items of 'b'</haxe_doc>
		</concat>
		<haxe_doc>The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.</haxe_doc>
	</class>
	<class path="List" params="T" file="/Users/francoponticelli/Projects/haxe/std/List.hx">
		<map public="1" params="X" set="method" line="246">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted
		by the function [f].</haxe_doc>
		</map>
		<filter public="1" set="method" line="230">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].</haxe_doc>
		</filter>
		<join public="1" set="method" line="211">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Join the element of the list by using the separator [sep].</haxe_doc>
		</join>
		<toString public="1" set="method" line="191">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the String.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<meta/>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Makes the list empty.</haxe_doc>
		</clear>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>Tells if a list is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" set="method" line="98">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.</haxe_doc>
		</pop>
		<last public="1" set="method" line="88">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of the list, or null
		if the list is empty.</haxe_doc>
		</last>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of the list, or null
		if the list is empty.</haxe_doc>
		</first>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Push an element at the beginning of the list.</haxe_doc>
		</push>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Add an element at the end of the list.</haxe_doc>
		</add>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The number of elements in this list.</haxe_doc>
		</length>
		<q><c path="Array"><d/></c></q>
		<h><c path="Array"><d/></c></h>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.</haxe_doc>
	</class>
	<class path="Math" params="" file="/Users/francoponticelli/Projects/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Objects" params="" file="src/Objects.hx">
		<field public="1" params="T" get="inline" set="null" line="12" static="1"><f a="o:fieldname:?alt">
	<a/>
	<c path="String"/>
	<c path="field.T"/>
	<t path="Null"><c path="field.T"/></t>
</f></field>
		<keys public="1" get="inline" set="null" line="17" static="1"><f a="o">
	<a/>
	<c path="Array"><c path="String"/></c>
</f></keys>
		<values public="1" params="T" set="method" line="22" static="1"><f a="o">
	<a/>
	<c path="Array"><c path="values.T"/></c>
</f></values>
		<entries public="1" set="method" line="30" static="1"><f a="o">
	<a/>
	<c path="Array"><t path="Entry"/></c>
</f></entries>
		<each public="1" params="T" set="method" line="38" static="1"><f a="o:handler">
	<a/>
	<f a=":">
		<c path="String"/>
		<c path="each.T"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<map public="1" params="TIn:TOut" set="method" line="46" static="1"><f a="o:handler">
	<a/>
	<f a=":">
		<c path="String"/>
		<c path="map.TIn"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<with public="1" params="T" get="inline" set="null" line="56" static="1"><f a="ob:f">
	<c path="with.T"/>
	<f a="">
		<c path="with.T"/>
		<e path="Void"/>
	</f>
	<c path="with.T"/>
</f></with>
		<toHash public="1" params="T" set="method" line="62" static="1"><f a="ob">
	<a/>
	<c path="Hash"><c path="toHash.T"/></c>
</f></toHash>
		<copyToHash public="1" params="T" set="method" line="68" static="1"><f a="ob:hash">
	<a/>
	<c path="Hash"><c path="copyToHash.T"/></c>
	<c path="Hash"><c path="copyToHash.T"/></c>
</f></copyToHash>
		<interpolate public="1" params="T" set="method" line="75" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="interpolate.T"/>
	<c path="interpolate.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="interpolate.T"/>
</f></interpolate>
		<interpolatef public="1" params="T" set="method" line="80" static="1"><f a="a:b:?equation">
	<c path="interpolatef.T"/>
	<c path="interpolatef.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="interpolatef.T"/>
	</f>
</f></interpolatef>
		<copyTo public="1" set="method" line="110" static="1"><f a="src:dst">
	<a/>
	<a/>
	<a/>
</f></copyTo>
		<clone public="1" params="T" set="method" line="126" static="1"><f a="src">
	<c path="clone.T"/>
	<c path="clone.T"/>
</f></clone>
		<mergef public="1" set="method" line="132" static="1"><f a="ob:new_ob:f">
	<a/>
	<a/>
	<f a="::">
		<c path="String"/>
		<a/>
		<a/>
		<a/>
	</f>
	<e path="Void"/>
</f></mergef>
		<merge public="1" set="method" line="148" static="1"><f a="ob:new_ob">
	<a/>
	<a/>
	<e path="Void"/>
</f></merge>
		<_flatten set="method" line="153" static="1"><f a="src:cum:arr:levels:level">
	<a/>
	<a>
		<value><d/></value>
		<fields><c path="Array"><c path="String"/></c></fields>
	</a>
	<c path="Array"><a>
	<value><d/></value>
	<fields><c path="Array"><c path="String"/></c></fields>
</a></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></_flatten>
		<flatten public="1" set="method" line="170" static="1"><f a="src:?levels">
	<a/>
	<c path="Int"/>
	<c path="Array"><a>
	<value><d/></value>
	<fields><c path="Array"><c path="String"/></c></fields>
</a></c>
</f></flatten>
		<compare public="1" set="method" line="193" static="1"><f a="a:b">
	<a/>
	<a/>
	<c path="Int"/>
</f></compare>
		<addFields public="1" set="method" line="207" static="1"><f a="o:fields:values">
	<a/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<a/>
</f></addFields>
		<addField public="1" set="method" line="214" static="1"><f a="o:field:value">
	<a/>
	<c path="String"/>
	<d/>
	<a/>
</f></addField>
		<format public="1" set="method" line="220" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="225" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="Entry" params="" file="src/Objects.hx" module="Objects"><a>
	<value><d/></value>
	<key><c path="String"/></key>
</a></typedef>
	<class path="Reflect" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if an object has a field set. This doesn't take into account the object prototype (class methods).</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the field of an object, or null if [o] is not an object or doesn't have this field.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="41" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set an object field value.</haxe_doc>
		</setField>
		<getProperty public="1" get="inline" set="null" line="46" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":defineFeature"/></meta>
			<haxe_doc>Similar to field but also supports property (might be slower).</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="52" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<meta><m n=":defineFeature"/></meta>
			<haxe_doc>Similar to setField but also supports property (might be slower).</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="57" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="61" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the list of fields of an object, excluding its prototype (class methods).</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="72" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value is a function or not.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="76" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Generic comparison function, does not work for methods, see [compareMethods]</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="80" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Compare two methods closures. Returns true if it's the same method of the same instance.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="88" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value is an object or not.</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="95" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Delete an object field.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="101" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Make a copy of the fields of an object.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="108" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="String" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<substr public="1" get="inline" set="null" line="43">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.</haxe_doc>
		</substr>
		<charCodeAt public="1" get="inline" set="null" line="39">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at the given position.
		Returns [null] if outside of String bounds.</haxe_doc>
		</charCodeAt>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Returns a part of the String, taking from [startIndex] to [endIndex] - 1.
		If [endIndex] is not specified, length is used.
		If [startIndex] or [endIndex] is smaller than 0, than 0 is used.
		If [startIndex] > [endIndex] then they are swaped.]]></haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split the string using the specified delimiter.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Similar to [indexOf] but returns the latest index.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.</haxe_doc>
		</indexOf>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at the given position.
		Returns the empty String if outside of String bounds.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been lowercased.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been uppercased.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The number of characters in the String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Std" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Std.hx">
		<is public="1" get="inline" set="null" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t.</haxe_doc>
		</is>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert any value to a String</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="37" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Convert a Float to an Int, rounded down.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a String to a Float, parsing different possible reprensations.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Return a random integer between 0 included and x excluded.</haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<enum path="Void" params="" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc></enum>
	<class path="Float" params="" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc></class>
	<class path="Int" params="" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/Users/francoponticelli/Projects/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="StringBuf" params="" file="/Users/francoponticelli/Projects/haxe/std/StringBuf.hx">
		<toString public="1" get="inline" set="null" line="64">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of the string buffer.
		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<addSub public="1" get="inline" set="null" line="56">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a character to the string buffer.</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="49">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a part of a string to the string buffer.</haxe_doc>
		</addChar>
		<add public="1" get="inline" set="null" line="42">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the representation of any value to the string buffer.</haxe_doc>
		</add>
		<b><c path="String"/></b>
		<new public="1" set="method" line="37">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new string buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by
	appending small elements together.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/Users/francoponticelli/Projects/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="41" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape HTML special characters of the string.</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="102" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Unescape HTML special characters of the string.</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="113" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the string [s] starts with the string [start].</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="126" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the string [s] ends with the string [end].</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="141" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string [s] at position [pos] is a space.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="149" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces at the left of the String [s].</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="170" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces at the right of the String [s].</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="192" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces at the beginning and the end of the String [s].</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="207" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Pad the string [s] by appending [c] at its right until it reach [l] characters.</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="229" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Pad the string [s] by appending [c] at its left until it reach [l] characters.</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="254" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the string [sub] in the string [s] by the string [by].</haxe_doc>
		</replace>
		<hex public="1" set="method" line="269" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="292" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="322" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.</haxe_doc>
	</class>
	<class path="Strings" params="" file="src/Strings.hx">
		<_re line="15" static="1"><c path="EReg"/></_re>
		<_reSplitWC line="16" static="1"><c path="EReg"/></_reSplitWC>
		<_reReduceWS line="17" static="1"><c path="EReg"/></_reReduceWS>
		<_reStripTags line="19" static="1"><c path="EReg"/></_reStripTags>
		<_reFormat line="22" static="1"><c path="EReg"/></_reFormat>
		<format public="1" set="method" line="110" static="1">
			<f a="pattern:values:?nullstring:?culture">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Take a string pattern and replaces the placeholders with the value contained in values.
	* The culture parameter is needed for proper localization of numeric and date values.
	* Placeholders follows this schema:
<pre>
{pos[:format][,param]*}
</pre>
	* <em>pos</em> is the position in the array
	* <em>format</em> is a string sequence that identifies a specific value format (see below)
	* <em>param</em> is one or more optional parameters specific to certain format values.
	*
	* <pre>
Numeric Formats
---------------
D (default) Decimal format. The default number of decimals is set by culture. This value can overriden
            using the length parameter.
I           Integer format.
C           Currency format. The default number of decimals is set by culture. This value can overriden
            using the length parameter. The symbol can be overridden appending a string value after C
			Ei. "{0:C,3,USD}" will print something like "USD2.000" instead of "$2.00"
P           Percent format.
M           Permille format.

Date Formats
---------------
D (default) Date format.
DS          Short Date format.
DST         Short date / long time format.
DSTS        Short date / short time format.
DT          Long date / long time format.
DTS         Long date / short time format.
Y           Year format.
YM          Year Month format.
M           Month format.
MN          Month name format.
MS          Short Month name format.
MD          Month Day format.
WD          Week day format.
WDN         Week day name format.
WDS         Short week day name format.
R           RFC Date format.
DT          Date Time format.
U           Universal format.
S           Sortable format.
T           Time format.
TS          Short Time format.
C			Custom, second parameter is the format as described in FormatDate

Boolean Formats
---------------
B			Normal bool (true, false)
N			Numeric representation (1, 0)
R			Replace values with first parameter for true and second for false

String Formats
---------------
S			Normal text.
T           Truncate. First parameter is the length to trim, second is the ellipsis
			(optional parameter, defaults to '...')
PL          Pad left. First parameter is the length, second is filling char
			(optional parameter, defaults to ' ')
PR          Pad right. First parameter is the length, second is filling char
			(optional parameter, defaults to ' ')

List Formats
---------------
J           Joins the elements of the list.
			The first parameter is the format for individual items
			The second parameter is what is shown when the list is empty (defaults to '[]')
			The third is the separator.
            The fourth is the maximum number of values to show (default to nolimit).
			The fifth parameter the ellipsis for not included values (defaults to '...'),
C			Counts the elements in the list

Object Formats
----------------
O			Uses the Std.string function
R			Uses the Reflects.string function for each field value

TODO:
List Formats
---------------
C           Concats the elements of the list

Other things to do. Nested placeholders
</pre>]]></haxe_doc>
		</format>
		<formatf public="1" set="method" line="116" static="1"><f a="pattern:?nullstring:?culture">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<f a="values">
		<c path="Array"><d/></c>
		<c path="String"/>
	</f>
</f></formatf>
		<formatOne public="1" set="method" line="154" static="1"><f a="v:?param:?params:?culture">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></formatOne>
		<formatOnef public="1" set="method" line="159" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="String"/>
		<c path="String"/>
	</f>
</f></formatOnef>
		<upTo public="1" set="method" line="185" static="1"><f a="value:searchFor">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></upTo>
		<startFrom public="1" set="method" line="195" static="1"><f a="value:searchFor">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></startFrom>
		<rtrim public="1" set="method" line="205" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></rtrim>
		<ltrim public="1" set="method" line="223" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></ltrim>
		<trim public="1" get="inline" set="null" line="240" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></trim>
		<_reCollapse line="249" static="1"><c path="EReg"/></_reCollapse>
		<collapse public="1" set="method" line="250" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></collapse>
		<ucfirst public="1" get="inline" set="null" line="255" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ucfirst>
		<lcfirst public="1" get="inline" set="null" line="260" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></lcfirst>
		<empty public="1" set="method" line="265" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></empty>
		<isAlphaNum public="1" get="inline" set="null" line="270" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></isAlphaNum>
		<digitsOnly public="1" get="inline" set="null" line="279" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></digitsOnly>
		<ucwords public="1" set="method" line="288" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ucwords>
		<ucwordsws public="1" set="method" line="298" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Like ucwords but uses only white spaces as boundaries
	 * @param	value
	 * @return</haxe_doc>
		</ucwordsws>
		<__upperMatch set="method" line="307" static="1"><f a="re">
	<c path="EReg"/>
	<c path="String"/>
</f></__upperMatch>
		<__ucwordsPattern line="311" static="1"><c path="EReg"/></__ucwordsPattern>
		<__ucwordswsPattern line="313" static="1"><c path="EReg"/></__ucwordswsPattern>
		<__alphaNumPattern line="314" static="1"><c path="EReg"/></__alphaNumPattern>
		<__digitsPattern line="315" static="1"><c path="EReg"/></__digitsPattern>
		<humanize public="1" set="method" line="322" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>*  Replaces undescores with space, finds UC characters, turns them into LC and prepends them with a space.
	*  More than one UC in sequence is left untouched.</haxe_doc>
		</humanize>
		<capitalize public="1" set="method" line="328" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></capitalize>
		<succ public="1" set="method" line="334" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></succ>
		<underscore public="1" set="method" line="340" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></underscore>
		<dasherize public="1" set="method" line="349" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></dasherize>
		<repeat public="1" set="method" line="354" static="1"><f a="s:times">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
</f></repeat>
		<wrapColumns public="1" set="method" line="362" static="1"><f a="s:?columns:?indent:?newline">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapColumns>
		<_wrapColumns set="method" line="373" static="1"><f a="s:columns:indent:newline">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_wrapColumns>
		<stripTags public="1" set="method" line="412" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></stripTags>
		<_reInterpolateNumber line="421" static="1"><c path="EReg"/></_reInterpolateNumber>
		<interpolate public="1" set="method" line="422" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="427" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolatef>
		<interpolateChars public="1" set="method" line="503" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolateChars>
		<interpolateCharsf public="1" set="method" line="508" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolateCharsf>
		<interpolateChar public="1" set="method" line="529" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolateChar>
		<interpolateCharf public="1" set="method" line="534" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolateCharf>
		<ellipsis public="1" set="method" line="545" static="1"><f a="s:?maxlen:?symbol">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></ellipsis>
		<ellipsisf public="1" set="method" line="553" static="1"><f a="?maxlen:?symbol">
	<c path="Int"/>
	<c path="String"/>
	<f a="s">
		<c path="String"/>
		<c path="String"/>
	</f>
</f></ellipsisf>
		<compare public="1" set="method" line="564" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>Returns the class of a value or [null] if this value is not a Class instance.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="46" static="1">
			<f a="o">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>Returns the enum of a value or [null] if this value is not an Enum instance.</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="52" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>Returns the super-class of a class, or null if no super class.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the complete name of a class.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="62" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the complete name of an enum.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="67" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>Evaluates a class from a name. The class must have been compiled
		to be accessible.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="75" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>Evaluates an enum from a name. The enum must have been compiled
		to be accessible.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="83" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of the given class with the list of constructor arguments.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="109" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="114" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Create an instance of an enum by using a constructor name and parameters.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="126" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Create an instance of an enum by using a constructor index and parameters.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="132" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the list of instance fields.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="140" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the list of a class static fields.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="150" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the available constructor names for an enum.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="155" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of a value.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="185" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Recursively compare two enums constructors and parameters.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="203" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor of an enum</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="207" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns the parameters of an enum</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="211" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of the constructor of an enum</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="215" static="1">
			<f a="e">
				<c path="Enum"><c path="allEnums.T"/></c>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns the list of all enum values that don't take any parameter.</haxe_doc>
		</allEnums>
		<haxe_doc>The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Types" params="" file="src/Types.hx">
		<className public="1" get="inline" set="null" line="5" static="1"><f a="o">
	<d/>
	<t path="Null"><c path="String"/></t>
</f></className>
		<fullName public="1" get="inline" set="null" line="10" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></fullName>
		<typeName public="1" set="method" line="15" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></typeName>
		<hasSuperClass public="1" set="method" line="31" static="1"><f a="type:sup">
	<c path="Class"><d/></c>
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></hasSuperClass>
		<isAnonymous public="1" get="inline" set="null" line="42" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isAnonymous>
		<as public="1" params="T1:T2" get="inline" set="null" line="47" static="1"><f a="value:type">
	<c path="as.T1"/>
	<c path="Class"><c path="as.T2"/></c>
	<t path="Null"><c path="as.T2"/></t>
</f></as>
		<ifIs public="1" params="T1:T2" set="method" line="52" static="1"><f a="value:type:handler">
	<c path="ifIs.T1"/>
	<c path="Class"><c path="ifIs.T2"/></c>
	<f a="">
		<c path="ifIs.T2"/>
		<e path="Void"/>
	</f>
	<c path="ifIs.T1"/>
</f></ifIs>
		<of public="1" params="T" get="inline" set="null" line="59" static="1"><f a="type:value">
	<c path="Class"><c path="of.T"/></c>
	<d/>
	<t path="Null"><c path="of.T"/></t>
</f></of>
		<sameType public="1" set="method" line="64" static="1"><f a="a:b">
	<d/>
	<d/>
	<e path="Bool"/>
</f></sameType>
		<isPrimitive public="1" set="method" line="80" static="1"><f a="v">
	<c path="String"/>
	<e path="Bool"/>
</f></isPrimitive>
	</class>
	<enum path="XmlType" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="/Users/francoponticelli/Projects/haxe/std/js/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="50" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="57" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="66" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="73" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="80" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="87" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" line="94" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProlog>
		<createDocument public="1" set="method" line="101" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<toString public="1" set="method" line="285">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<insertChild public="1" set="method" line="278">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.</haxe_doc>
		</insertChild>
		<removeChild public="1" set="method" line="270">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<addChild public="1" set="method" line="263">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<firstElement public="1" set="method" line="250">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<firstChild public="1" set="method" line="245">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<elementsNamed public="1" set="method" line="212">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<elements public="1" set="method" line="180">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<iterator public="1" set="method" line="166">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<attributes public="1" set="method" line="160">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<exists public="1" set="method" line="154">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<remove public="1" set="method" line="148">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<set public="1" set="method" line="142">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<get public="1" set="method" line="136">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<getParent set="method" line="132"><f a=""><c path="Xml"/></f></getParent>
		<set_nodeValue set="method" line="126"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get_nodeValue set="method" line="120"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeName set="method" line="114"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeName set="method" line="108"><f a=""><c path="String"/></f></get_nodeName>
		<_parent><c path="Xml"/></_parent>
		<_children><c path="Array"><c path="Xml"/></c></_children>
		<_attributes><c path="Hash"><c path="String"/></c></_attributes>
		<_nodeValue><c path="String"/></_nodeValue>
		<_nodeName><c path="String"/></_nodeName>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<nodeValue public="1" get="get_nodeValue" set="set_nodeValue">
			<c path="String"/>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<nodeName public="1" get="get_nodeName" set="set_nodeName">
			<c path="String"/>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<new set="method" line="54"><f a=""><e path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="haxe.Log" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="54" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams>
		<c path="Array"><d/></c>
		<meta><m n=":optional"/></meta>
	</customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="haxe.Timer" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="77" static="1">
			<f a="f:time_ms">
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>This will delay the call to [f] for the given time. [f] will only be called once.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="91" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measure the time it takes to execute the function [f] and trace it. Returns the value returned by [f].</haxe_doc>
		</measure>
		<stamp public="1" set="method" line="101" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>Returns the most precise timestamp, in seconds. The value itself might differ depending on platforms, only differences between two values make sense.</haxe_doc>
		</stamp>
		<run public="1" set="dynamic" line="71">
			<f a=""><e path="Void"/></f>
			<haxe_doc>This is the [run()] method that is called when the Timer executes. It can be either overriden in subclasses or directly rebinded with another function-value.</haxe_doc>
		</run>
		<stop public="1" set="method" line="55">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Stop the timer definitely.</haxe_doc>
		</stop>
		<id><t path="Null"><c path="Int"/></t></id>
		<new public="1" set="method" line="39">
			<f a="time_ms">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Create a new timer that will run every [time_ms] (in milliseconds).</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that support events.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><c path="Int"/></min>
	<max><c path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprRequire" params="T" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AStatic/>
		<APublic/>
		<APrivate/>
		<AOverride/>
		<AInline/>
		<ADynamic/>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><e path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDStructure/>
		<TDEnum/>
		<TDClass a="?extend:?implement:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<e path="Bool"/>
		</TDClass>
	</enum>
	<class path="haxe.macro.Error" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<message public="1"><c path="String"/></message>
		<new public="1" set="method" line="219"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<name><c path="String"/></name>
</a></c></CAnonymous>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.ClassField" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<isPublic><e path="Bool"/></isPublic>
	<isOverride><e path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<file><t path="Null"><c path="String"/></t></file>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="Hash"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="117" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="128" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="135" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<e path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<e path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="149" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<e path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="164" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="213" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="233" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<e path="Bool"/>
</f></constructorEq>
	</class>
	<class path="haxe.rtti.Meta" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="35" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="47" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="59" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/rtti/XmlParser.hx">
		<defplat set="method" line="507"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<xtypeparams set="method" line="500"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<xtype set="method" line="449"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypedef set="method" line="424"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xenumfield set="method" line="396"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xenum set="method" line="374"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xclassfield set="method" line="351"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xclass set="method" line="313"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xpath set="method" line="302"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<processElement public="1" set="method" line="292"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xroot set="method" line="286"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="Void"/>
</f></xroot>
		<xerror set="method" line="282"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<mkRights set="method" line="272"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<mkTypeParams set="method" line="265"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkPath set="method" line="261"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<merge set="method" line="180"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<e path="Void"/>
</f></merge>
		<mergeTypedefs set="method" line="172"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<e path="Bool"/>
</f></mergeTypedefs>
		<mergeEnums set="method" line="152"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<e path="Bool"/>
</f></mergeEnums>
		<mergeClasses set="method" line="114"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<e path="Bool"/>
</f></mergeClasses>
		<newField public="1" set="dynamic" line="111"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Void"/>
</f></newField>
		<mergeFields set="method" line="107"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeFields>
		<mergeDoc set="method" line="99"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeDoc>
		<mergeRights set="method" line="90"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeRights>
		<process public="1" set="method" line="84"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Void"/>
</f></process>
		<sortFields set="method" line="64"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<sort public="1" set="method" line="38"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></sort>
		<curplatform><c path="String"/></curplatform>
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="35"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="31"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="54"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="50"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="73"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="69"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="89"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="85"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="103"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="99"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Fast.hx">
		<getElements set="method" line="167"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><e path="Bool"/></f></hasNext>
</a></f></getElements>
		<getInnerHTML set="method" line="160"><f a=""><c path="String"/></f></getInnerHTML>
		<getInnerData set="method" line="140"><f a=""><c path="String"/></f></getInnerData>
		<getName set="method" line="136"><f a=""><c path="String"/></f></getName>
		<elements public="1" get="getElements" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<innerHTML public="1" get="getInnerHTML" set="null"><c path="String"/></innerHTML>
		<innerData public="1" get="getInnerData" set="null"><c path="String"/></innerData>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<x public="1" set="null"><c path="Xml"/></x>
		<new public="1" set="method" line="125"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" line="7" static="1"><c path="Int"/></IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" line="8" static="1"><c path="Int"/></BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></TAG_NAME>
		<BODY public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></CHILDS>
		<CLOSE public="1" get="inline" set="null" line="17" static="1"><c path="Int"/></CLOSE>
		<WAIT_END public="1" get="inline" set="null" line="18" static="1"><c path="Int"/></WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" line="20" static="1"><c path="Int"/></PCDATA>
		<HEADER public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></HEADER>
		<COMMENT public="1" get="inline" set="null" line="22" static="1"><c path="Int"/></COMMENT>
		<DOCTYPE public="1" get="inline" set="null" line="23" static="1"><c path="Int"/></DOCTYPE>
		<CDATA public="1" get="inline" set="null" line="24" static="1"><c path="Int"/></CDATA>
	</class>
	<class path="haxe.xml.Parser" params="" file="/Users/francoponticelli/Projects/haxe/std/haxe/xml/Parser.hx">
		<parse public="1" set="method" line="29" static="1"><f a="str">
	<c path="String"/>
	<c path="Xml"/>
</f></parse>
		<doParse set="method" line="36" static="1"><f a="str:?p:?parent">
	<c path="String"/>
	<c path="Int"/>
	<c path="Xml"/>
	<c path="Int"/>
</f></doParse>
		<isValidChar get="inline" set="null" line="281" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isValidChar>
	</class>
	<class path="js.Boot" params="" file="/Users/francoponticelli/Projects/haxe/std/js/Boot.hx">
		<__unhtml set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="33" static="1"><f a="v:i">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__enum__ set="null"><e path="Bool"/></__enum__>
	</a>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__clear_trace set="method" line="50" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<isClass get="inline" set="null" line="62" static="1"><f a="o">
	<d/>
	<e path="Bool"/>
</f></isClass>
		<isEnum get="inline" set="null" line="66" static="1"><f a="e">
	<d/>
	<e path="Bool"/>
</f></isEnum>
		<getClass get="inline" set="null" line="70" static="1"><f a="o">
	<d/>
	<d/>
</f></getClass>
		<__string_rec set="method" line="75" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><c path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><e path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":feature"><e>"has_enum"</e></m></meta>
		</__string_rec>
		<__interfLoop set="method" line="147" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<t path="#Array"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":feature"><e>"typed_catch"</e></m></meta>
		</__instanceof>
		<__cast set="method" line="198" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":feature"><e>"typed_cast"</e></m></meta>
		</__cast>
	</class>
	<class path="thx.benchmark.SpeedTest" params="" file="src/thx/benchmark/SpeedTest.hx">
		<getTimer get="inline" set="null" line="61" static="1"><f a=""><c path="Float"/></f></getTimer>
		<getOutput set="method" line="100"><f a=""><c path="String"/></f></getOutput>
		<handleRound set="method" line="84"><f a=""><e path="Void"/></f></handleRound>
		<takeRound set="method" line="76"><f a=""><e path="Void"/></f></takeRound>
		<test set="method" line="54"><f a="f">
	<f a="">
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<c path="Float"/>
</f></test>
		<start><c path="Float"/></start>
		<handler><f a="">
	<c path="String"/>
	<e path="Void"/>
</f></handler>
		<toPerform><c path="Int"/></toPerform>
		<results><c path="Array"><c path="Float"/></c></results>
		<descriptions><c path="Array"><c path="String"/></c></descriptions>
		<tests><c path="Array"><f a="">
	<c path="Int"/>
	<e path="Void"/>
</f></c></tests>
		<repetitions><c path="Int"/></repetitions>
		<averages><c path="Int"/></averages>
		<testDelay><c path="Int"/></testDelay>
		<reference><c path="Int"/></reference>
		<execute public="1" set="method" line="30"><f a="?handler">
	<f a="">
		<c path="String"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></execute>
		<add public="1" set="method" line="20"><f a="description:f:?isReference">
	<c path="String"/>
	<f a="">
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<c path="thx.benchmark.SpeedTest"/>
</f></add>
		<new public="1" set="method" line="10"><f a="?repetitions:?testDelay:?averages">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.collection.CascadeHash" params="T" file="src/thx/collection/CascadeHash.hx">
		<toString public="1" set="method" line="67"><f a=""><c path="String"/></f></toString>
		<keys public="1" set="method" line="58"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<iterator public="1" set="method" line="50"><f a=""><t path="Iterator"><c path="thx.collection.CascadeHash.T"/></t></f></iterator>
		<exists public="1" set="method" line="42"><f a="key">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<get public="1" set="method" line="34"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="thx.collection.CascadeHash.T"/></t>
</f></get>
		<remove public="1" set="method" line="26"><f a="key">
	<c path="String"/>
	<e path="Bool"/>
</f></remove>
		<set public="1" set="method" line="21"><f a="key:value">
	<c path="String"/>
	<c path="thx.collection.CascadeHash.T"/>
	<e path="Void"/>
</f></set>
		<_h><c path="List"><c path="Hash"><c path="thx.collection.CascadeHash.T"/></c></c></_h>
		<new public="1" set="method" line="13"><f a="hashes">
	<c path="Array"><c path="Hash"><c path="thx.collection.CascadeHash.T"/></c></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.collection.HashList" params="T" file="src/thx/collection/HashList.hx">
		<__hash><c path="Hash"><c path="thx.collection.HashList.T"/></c></__hash>
		<__keys><c path="Array"><c path="String"/></c></__keys>
		<toString public="1" set="method" line="112"><f a=""><c path="String"/></f></toString>
		<array public="1" set="method" line="104"><f a=""><c path="Array"><c path="thx.collection.HashList.T"/></c></f></array>
		<clear public="1" set="method" line="97"><f a=""><e path="Void"/></f></clear>
		<iterator public="1" set="method" line="92"><f a=""><t path="Iterator"><c path="thx.collection.HashList.T"/></t></f></iterator>
		<keys public="1" set="method" line="87"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<keyAt public="1" set="method" line="82"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></keyAt>
		<removeAt public="1" set="method" line="71"><f a="index">
	<c path="Int"/>
	<c path="thx.collection.HashList.T"/>
</f></removeAt>
		<remove public="1" set="method" line="61"><f a="key">
	<c path="String"/>
	<c path="thx.collection.HashList.T"/>
</f></remove>
		<exists public="1" set="method" line="56"><f a="key">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<indexOf public="1" set="method" line="47"><f a="key">
	<c path="String"/>
	<c path="Int"/>
</f></indexOf>
		<getAt public="1" set="method" line="42"><f a="index">
	<c path="Int"/>
	<t path="Null"><c path="thx.collection.HashList.T"/></t>
</f></getAt>
		<get public="1" set="method" line="37"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="thx.collection.HashList.T"/></t>
</f></get>
		<setAt public="1" set="method" line="29"><f a="index:key:value">
	<c path="Int"/>
	<c path="String"/>
	<c path="thx.collection.HashList.T"/>
	<e path="Void"/>
</f></setAt>
		<set public="1" set="method" line="19"><f a="key:value">
	<c path="String"/>
	<c path="thx.collection.HashList.T"/>
	<e path="Void"/>
</f></set>
		<length public="1" set="null"><c path="Int"/></length>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.collection.IntHashList" params="T" file="src/thx/collection/IntHashList.hx">
		<__hash><c path="IntHash"><c path="thx.collection.IntHashList.T"/></c></__hash>
		<__keys><c path="Array"><c path="Int"/></c></__keys>
		<toString public="1" set="method" line="90"><f a=""><c path="String"/></f></toString>
		<array public="1" set="method" line="82"><f a=""><c path="Array"><c path="thx.collection.IntHashList.T"/></c></f></array>
		<clear public="1" set="method" line="75"><f a=""><e path="Void"/></f></clear>
		<iterator public="1" set="method" line="70"><f a=""><t path="Iterator"><c path="thx.collection.IntHashList.T"/></t></f></iterator>
		<keys public="1" set="method" line="65"><f a=""><t path="Iterator"><c path="Int"/></t></f></keys>
		<removeAt public="1" set="method" line="54"><f a="index">
	<c path="Int"/>
	<c path="thx.collection.IntHashList.T"/>
</f></removeAt>
		<remove public="1" set="method" line="44"><f a="key">
	<c path="Int"/>
	<c path="thx.collection.IntHashList.T"/>
</f></remove>
		<exists public="1" set="method" line="39"><f a="key">
	<c path="Int"/>
	<e path="Bool"/>
</f></exists>
		<getAt public="1" set="method" line="34"><f a="index">
	<c path="Int"/>
	<t path="Null"><c path="thx.collection.IntHashList.T"/></t>
</f></getAt>
		<get public="1" set="method" line="29"><f a="key">
	<c path="Int"/>
	<t path="Null"><c path="thx.collection.IntHashList.T"/></t>
</f></get>
		<set public="1" set="method" line="19"><f a="key:value">
	<c path="Int"/>
	<c path="thx.collection.IntHashList.T"/>
	<e path="Void"/>
</f></set>
		<length public="1" set="null"><c path="Int"/></length>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.collection.Set" params="T" file="src/thx/collection/Set.hx">
		<ofArray public="1" params="T" set="method" line="10" static="1"><f a="arr">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="thx.collection.Set"><c path="ofArray.T"/></c>
</f></ofArray>
		<toString public="1" set="method" line="58"><f a=""><c path="String"/></f></toString>
		<array public="1" set="method" line="53"><f a=""><c path="Array"><c path="thx.collection.Set.T"/></c></f></array>
		<iterator public="1" set="method" line="48"><f a=""><t path="Iterator"><c path="thx.collection.Set.T"/></t></f></iterator>
		<exists public="1" set="method" line="40"><f a="v">
	<c path="thx.collection.Set.T"/>
	<e path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="33"><f a="v">
	<c path="thx.collection.Set.T"/>
	<e path="Bool"/>
</f></remove>
		<add public="1" set="method" line="26"><f a="v">
	<c path="thx.collection.Set.T"/>
	<e path="Void"/>
</f></add>
		<_v>
			<c path="Array"><c path="thx.collection.Set.T"/></c>
			<meta/>
		</_v>
		<length public="1"><c path="Int"/></length>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.collection.Sets" params="" file="src/thx/collection/Sets.hx">
		<indexOf public="1" params="T" get="inline" set="null" line="10" static="1"><f a="set:value">
	<c path="thx.collection.Set"><c path="indexOf.T"/></c>
	<c path="indexOf.T"/>
	<c path="Int"/>
</f></indexOf>
		<first public="1" params="T" get="inline" set="null" line="15" static="1"><f a="set">
	<c path="thx.collection.Set"><c path="first.T"/></c>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<last public="1" params="T" get="inline" set="null" line="20" static="1"><f a="set">
	<c path="thx.collection.Set"><c path="last.T"/></c>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<order public="1" params="T" get="inline" set="null" line="25" static="1"><f a="set:?f">
	<c path="thx.collection.Set"><c path="order.T"/></c>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="thx.collection.Set"><c path="order.T"/></c>
</f></order>
		<arr params="T" get="inline" set="null" line="31" static="1"><f a="set">
	<a><_v><c path="Array"><c path="arr.T"/></c></_v></a>
	<c path="Array"><c path="arr.T"/></c>
</f></arr>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.color.Categories" params="" file="src/thx/color/Categories.hx">
		<category10 public="1" line="10" static="1"><c path="Array"><c path="String"/></c></category10>
		<category20 public="1" line="15" static="1"><c path="Array"><c path="String"/></c></category20>
		<category20b public="1" line="28" static="1"><c path="Array"><c path="String"/></c></category20b>
		<category20c public="1" line="36" static="1"><c path="Array"><c path="String"/></c></category20c>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.color.Rgb" params="" file="src/thx/color/Rgb.hx">
		<fromFloats public="1" set="method" line="55" static="1"><f a="r:g:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.color.Rgb"/>
</f></fromFloats>
		<fromInt public="1" set="method" line="63" static="1"><f a="v">
	<c path="Int"/>
	<c path="thx.color.Rgb"/>
</f></fromInt>
		<equals public="1" set="method" line="68" static="1"><f a="a:b">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="73" static="1"><f a="color:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></darker>
		<lighter public="1" set="method" line="82" static="1"><f a="color:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></lighter>
		<interpolate public="1" set="method" line="91" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="100" static="1"><f a="a:b:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolatef>
		<contrast public="1" set="method" line="108" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></contrast>
		<contrastBW public="1" set="method" line="117" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></contrastBW>
		<interpolateBrightness public="1" set="method" line="127" static="1"><f a="t:?equation">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></interpolateBrightness>
		<interpolateBrightnessf public="1" set="method" line="128" static="1"><f a="?equation">
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolateBrightnessf>
		<interpolateHeat public="1" set="method" line="139" static="1"><f a="t:?middle:?equation">
	<c path="Float"/>
	<c path="thx.color.Rgb"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></interpolateHeat>
		<interpolateHeatf public="1" set="method" line="140" static="1"><f a="?middle:?equation">
	<c path="thx.color.Rgb"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolateHeatf>
		<interpolateRainbow public="1" set="method" line="149" static="1"><f a="t:?equation">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></interpolateRainbow>
		<interpolateRainbowf public="1" set="method" line="150" static="1"><f a="?equation">
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolateRainbowf>
		<interpolateStepsf public="1" set="method" line="161" static="1"><f a="steps:?equation">
	<c path="Array"><c path="thx.color.Rgb"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolateStepsf>
		<toString public="1" set="method" line="50"><f a=""><c path="String"/></f></toString>
		<toRgbString public="1" set="method" line="45"><f a=""><c path="String"/></f></toRgbString>
		<toCss public="1" get="inline" set="null" line="43"><f a=""><c path="String"/></f></toCss>
		<hex public="1" set="method" line="38"><f a="?prefix">
	<c path="String"/>
	<c path="String"/>
</f></hex>
		<int public="1" set="method" line="33"><f a=""><c path="Int"/></f></int>
		<red public="1" set="null"><c path="Int"/></red>
		<green public="1" set="null"><c path="Int"/></green>
		<blue public="1" set="null"><c path="Int"/></blue>
		<new public="1" set="method" line="26">
			<f a="r:g:b">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>*
	 * @param r	an Int value between 0 and 255 for the red channel
	 * @param g	an Int value between 0 and 255 for the green channel
	 * @param b	an Int value between 0 and 255 for the blue channel</haxe_doc>
		</new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.color.Cmyk" params="" file="src/thx/color/Cmyk.hx">
		<extends path="thx.color.Rgb"/>
		<toCmyk public="1" set="method" line="43" static="1"><f a="rgb">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Cmyk"/>
</f></toCmyk>
		<equals public="1" set="method" line="61" static="1"><f a="a:b">
	<c path="thx.color.Cmyk"/>
	<c path="thx.color.Cmyk"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="66" static="1"><f a="color:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></darker>
		<lighter public="1" set="method" line="76" static="1"><f a="color:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></lighter>
		<interpolate public="1" set="method" line="86" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></interpolate>
		<toCmykString public="1" set="method" line="38"><f a=""><c path="String"/></f></toCmykString>
		<yellow public="1" set="null"><c path="Float"/></yellow>
		<magenta public="1" set="null"><c path="Float"/></magenta>
		<cyan public="1" set="null"><c path="Float"/></cyan>
		<black public="1" set="null"><c path="Float"/></black>
		<new public="1" set="method" line="25">
			<f a="cyan:magenta:yellow:black">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Construct a Cmyk Color.
	 * @param cyan		Float bewteen 0 and 1
	 * @param magenta	Float bewteen 0 and 1
	 * @param yellow	Float bewteen 0 and 1
	 * @param black		Float bewteen 0 and 1</haxe_doc>
		</new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.color.Colors" params="" file="src/thx/color/Colors.hx">
		<interpolatef public="1" set="method" line="14" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolatef>
		<interpolate public="1" set="method" line="22" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolate>
		<_reParse line="27" static="1"><c path="EReg"/></_reParse>
		<parse public="1" set="method" line="35" static="1"><f a="s">
	<c path="String"/>
	<c path="thx.color.Rgb"/>
</f></parse>
		<_c set="method" line="70" static="1"><f a="s">
	<c path="String"/>
	<c path="Int"/>
</f></_c>
		<_d set="method" line="75" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></_d>
		<_p set="method" line="85" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></_p>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.color.Grey" params="" file="src/thx/color/Grey.hx">
		<extends path="thx.color.Rgb"/>
		<toGrey public="1" set="method" line="23" static="1"><f a="rgb:?luminance">
	<c path="thx.color.Rgb"/>
	<e path="thx.color.PerceivedLuminance"/>
	<c path="thx.color.Grey"/>
</f></toGrey>
		<equals public="1" set="method" line="42" static="1"><f a="a:b">
	<c path="thx.color.Grey"/>
	<c path="thx.color.Grey"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="47" static="1"><f a="color:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></darker>
		<lighter public="1" set="method" line="52" static="1"><f a="color:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></lighter>
		<interpolate public="1" set="method" line="57" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></interpolate>
		<grey public="1" set="null"><c path="Float"/></grey>
		<new public="1" set="method" line="16"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<enum path="thx.color.PerceivedLuminance" params="" file="src/thx/color/Grey.hx" module="thx.color.Grey">
		<Standard/>
		<PerceivedAccurate/>
		<Perceived/>
	</enum>
	<class path="thx.color.Hsl" params="" file="src/thx/color/Hsl.hx">
		<extends path="thx.color.Rgb"/>
		<_c set="method" line="29" static="1"><f a="d:s:l">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></_c>
		<toHsl public="1" set="method" line="49" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></toHsl>
		<equals public="1" set="method" line="75" static="1"><f a="a:b">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="80" static="1"><f a="color:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></darker>
		<lighter public="1" set="method" line="89" static="1"><f a="color:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></lighter>
		<interpolate public="1" set="method" line="98" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="107" static="1"><f a="a:b:?equation">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="thx.color.Hsl"/>
	</f>
</f></interpolatef>
		<toHslString public="1" set="method" line="44"><f a=""><c path="String"/></f></toHslString>
		<lightness public="1" set="null"><c path="Float"/></lightness>
		<saturation public="1" set="null"><c path="Float"/></saturation>
		<hue public="1" set="null"><c path="Float"/></hue>
		<new public="1" set="method" line="17"><f a="h:s:l">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.color.NamedColors" params="" file="src/thx/color/NamedColors.hx">
		<aliceblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></aliceblue>
		<antiquewhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></antiquewhite>
		<aqua public="1" set="null" static="1"><c path="thx.color.Rgb"/></aqua>
		<aquamarine public="1" set="null" static="1"><c path="thx.color.Rgb"/></aquamarine>
		<azure public="1" set="null" static="1"><c path="thx.color.Rgb"/></azure>
		<beige public="1" set="null" static="1"><c path="thx.color.Rgb"/></beige>
		<bisque public="1" set="null" static="1"><c path="thx.color.Rgb"/></bisque>
		<black public="1" set="null" static="1"><c path="thx.color.Rgb"/></black>
		<blanchedalmond public="1" set="null" static="1"><c path="thx.color.Rgb"/></blanchedalmond>
		<blue public="1" set="null" static="1"><c path="thx.color.Rgb"/></blue>
		<blueviolet public="1" set="null" static="1"><c path="thx.color.Rgb"/></blueviolet>
		<brown public="1" set="null" static="1"><c path="thx.color.Rgb"/></brown>
		<burlywood public="1" set="null" static="1"><c path="thx.color.Rgb"/></burlywood>
		<cadetblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></cadetblue>
		<chartreuse public="1" set="null" static="1"><c path="thx.color.Rgb"/></chartreuse>
		<chocolate public="1" set="null" static="1"><c path="thx.color.Rgb"/></chocolate>
		<coral public="1" set="null" static="1"><c path="thx.color.Rgb"/></coral>
		<cornflowerblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></cornflowerblue>
		<cornsilk public="1" set="null" static="1"><c path="thx.color.Rgb"/></cornsilk>
		<crimson public="1" set="null" static="1"><c path="thx.color.Rgb"/></crimson>
		<cyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></cyan>
		<darkblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkblue>
		<darkcyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkcyan>
		<darkgoldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgoldenrod>
		<darkgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgray>
		<darkgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgreen>
		<darkgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgrey>
		<darkkhaki public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkkhaki>
		<darkmagenta public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkmagenta>
		<darkolivegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkolivegreen>
		<darkorange public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkorange>
		<darkorchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkorchid>
		<darkred public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkred>
		<darksalmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></darksalmon>
		<darkseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkseagreen>
		<darkslateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslateblue>
		<darkslategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslategray>
		<darkslategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslategrey>
		<darkturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkturquoise>
		<darkviolet public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkviolet>
		<deeppink public="1" set="null" static="1"><c path="thx.color.Rgb"/></deeppink>
		<deepskyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></deepskyblue>
		<dimgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></dimgray>
		<dimgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></dimgrey>
		<dodgerblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></dodgerblue>
		<firebrick public="1" set="null" static="1"><c path="thx.color.Rgb"/></firebrick>
		<floralwhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></floralwhite>
		<forestgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></forestgreen>
		<fuchsia public="1" set="null" static="1"><c path="thx.color.Rgb"/></fuchsia>
		<gainsboro public="1" set="null" static="1"><c path="thx.color.Rgb"/></gainsboro>
		<ghostwhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></ghostwhite>
		<gold public="1" set="null" static="1"><c path="thx.color.Rgb"/></gold>
		<goldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></goldenrod>
		<gray public="1" set="null" static="1"><c path="thx.color.Rgb"/></gray>
		<green public="1" set="null" static="1"><c path="thx.color.Rgb"/></green>
		<greenyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></greenyellow>
		<grey public="1" set="null" static="1"><c path="thx.color.Rgb"/></grey>
		<honeydew public="1" set="null" static="1"><c path="thx.color.Rgb"/></honeydew>
		<hotpink public="1" set="null" static="1"><c path="thx.color.Rgb"/></hotpink>
		<indianred public="1" set="null" static="1"><c path="thx.color.Rgb"/></indianred>
		<indigo public="1" set="null" static="1"><c path="thx.color.Rgb"/></indigo>
		<ivory public="1" set="null" static="1"><c path="thx.color.Rgb"/></ivory>
		<khaki public="1" set="null" static="1"><c path="thx.color.Rgb"/></khaki>
		<lavender public="1" set="null" static="1"><c path="thx.color.Rgb"/></lavender>
		<lavenderblush public="1" set="null" static="1"><c path="thx.color.Rgb"/></lavenderblush>
		<lawngreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lawngreen>
		<lemonchiffon public="1" set="null" static="1"><c path="thx.color.Rgb"/></lemonchiffon>
		<lightblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightblue>
		<lightcoral public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightcoral>
		<lightcyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightcyan>
		<lightgoldenrodyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgoldenrodyellow>
		<lightgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgray>
		<lightgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgreen>
		<lightgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgrey>
		<lightpink public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightpink>
		<lightsalmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightsalmon>
		<lightseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightseagreen>
		<lightskyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightskyblue>
		<lightslategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightslategray>
		<lightslategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightslategrey>
		<lightsteelblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightsteelblue>
		<lightyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightyellow>
		<lime public="1" set="null" static="1"><c path="thx.color.Rgb"/></lime>
		<limegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></limegreen>
		<linen public="1" set="null" static="1"><c path="thx.color.Rgb"/></linen>
		<magenta public="1" set="null" static="1"><c path="thx.color.Rgb"/></magenta>
		<maroon public="1" set="null" static="1"><c path="thx.color.Rgb"/></maroon>
		<mediumaquamarine public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumaquamarine>
		<mediumblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumblue>
		<mediumorchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumorchid>
		<mediumpurple public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumpurple>
		<mediumseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumseagreen>
		<mediumslateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumslateblue>
		<mediumspringgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumspringgreen>
		<mediumturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumturquoise>
		<mediumvioletred public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumvioletred>
		<midnightblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></midnightblue>
		<mintcream public="1" set="null" static="1"><c path="thx.color.Rgb"/></mintcream>
		<mistyrose public="1" set="null" static="1"><c path="thx.color.Rgb"/></mistyrose>
		<moccasin public="1" set="null" static="1"><c path="thx.color.Rgb"/></moccasin>
		<navajowhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></navajowhite>
		<navy public="1" set="null" static="1"><c path="thx.color.Rgb"/></navy>
		<oldlace public="1" set="null" static="1"><c path="thx.color.Rgb"/></oldlace>
		<olive public="1" set="null" static="1"><c path="thx.color.Rgb"/></olive>
		<olivedrab public="1" set="null" static="1"><c path="thx.color.Rgb"/></olivedrab>
		<orange public="1" set="null" static="1"><c path="thx.color.Rgb"/></orange>
		<orangered public="1" set="null" static="1"><c path="thx.color.Rgb"/></orangered>
		<orchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></orchid>
		<palegoldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></palegoldenrod>
		<palegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></palegreen>
		<paleturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></paleturquoise>
		<palevioletred public="1" set="null" static="1"><c path="thx.color.Rgb"/></palevioletred>
		<papayawhip public="1" set="null" static="1"><c path="thx.color.Rgb"/></papayawhip>
		<peachpuff public="1" set="null" static="1"><c path="thx.color.Rgb"/></peachpuff>
		<peru public="1" set="null" static="1"><c path="thx.color.Rgb"/></peru>
		<pink public="1" set="null" static="1"><c path="thx.color.Rgb"/></pink>
		<plum public="1" set="null" static="1"><c path="thx.color.Rgb"/></plum>
		<powderblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></powderblue>
		<purple public="1" set="null" static="1"><c path="thx.color.Rgb"/></purple>
		<red public="1" set="null" static="1"><c path="thx.color.Rgb"/></red>
		<rosybrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></rosybrown>
		<royalblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></royalblue>
		<saddlebrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></saddlebrown>
		<salmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></salmon>
		<sandybrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></sandybrown>
		<seagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></seagreen>
		<seashell public="1" set="null" static="1"><c path="thx.color.Rgb"/></seashell>
		<sienna public="1" set="null" static="1"><c path="thx.color.Rgb"/></sienna>
		<silver public="1" set="null" static="1"><c path="thx.color.Rgb"/></silver>
		<skyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></skyblue>
		<slateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></slateblue>
		<slategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></slategray>
		<slategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></slategrey>
		<snow public="1" set="null" static="1"><c path="thx.color.Rgb"/></snow>
		<springgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></springgreen>
		<steelblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></steelblue>
		<tan public="1" set="null" static="1"><c path="thx.color.Rgb"/></tan>
		<teal public="1" set="null" static="1"><c path="thx.color.Rgb"/></teal>
		<thistle public="1" set="null" static="1"><c path="thx.color.Rgb"/></thistle>
		<tomato public="1" set="null" static="1"><c path="thx.color.Rgb"/></tomato>
		<turquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></turquoise>
		<violet public="1" set="null" static="1"><c path="thx.color.Rgb"/></violet>
		<wheat public="1" set="null" static="1"><c path="thx.color.Rgb"/></wheat>
		<white public="1" set="null" static="1"><c path="thx.color.Rgb"/></white>
		<whitesmoke public="1" set="null" static="1"><c path="thx.color.Rgb"/></whitesmoke>
		<yellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></yellow>
		<yellowgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></yellowgreen>
		<byName public="1" set="null" static="1"><c path="Hash"><c path="thx.color.Rgb"/></c></byName>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.csv.Csv" params="" file="src/thx/csv/Csv.hx">
		<encode public="1" set="method" line="16" static="1"><f a="value:?delimiter:?nulltoempty:?newline">
	<c path="Array"><c path="Array"><d/></c></c>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="25" static="1">
			<f a="value:?check_type:?delimiter:?emptytonull:?newline:?quote:?doublequotations:?skipwhitespace">
				<c path="String"/>
				<e path="Bool"/>
				<c path="String"/>
				<e path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Array"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>*  Parses and decodes well structured csv data.</haxe_doc>
		</decode>
		<decodeObjects public="1" set="method" line="32" static="1"><f a="value:?check_type:?delimiter:?emptytonull:?newline:?quote:?doublequotations:?skipwhitespace">
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Array"><d/></c>
</f></decodeObjects>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.csv.CsvDecoder" params="" file="src/thx/csv/CsvDecoder.hx">
		<typeString set="method" line="209"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeString>
		<typeDate set="method" line="202"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeDate>
		<typeBool set="method" line="195"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeBool>
		<typeFloat set="method" line="188"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeFloat>
		<typeCultureFloat set="method" line="181"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeCultureFloat>
		<typeInt set="method" line="175"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeInt>
		<typeToken set="method" line="158"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></typeToken>
		<getTyper set="method" line="132"><f a="s">
	<c path="String"/>
	<f a="s">
		<c path="String"/>
		<e path="Void"/>
	</f>
</f></getTyper>
		<error set="method" line="126"><f a="e">
	<c path="String"/>
	<unknown/>
</f></error>
		<parseValue set="method" line="76"><f a=""><e path="Bool"/></f></parseValue>
		<parseLine set="method" line="63"><f a=""><e path="Void"/></f></parseLine>
		<decode public="1" set="method" line="50"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<_typers><c path="Array"><f a="">
	<c path="String"/>
	<d/>
</f></c></_typers>
		<_end><c path="EReg"/></_end>
		<_s><c path="String"/></_s>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<check_type public="1" set="null"><e path="Bool"/></check_type>
		<column public="1" set="null"><c path="Int"/></column>
		<line public="1" set="null"><c path="Int"/></line>
		<trim_whitespace public="1" set="null"><e path="Bool"/></trim_whitespace>
		<doublequotations public="1" set="null"><e path="Bool"/></doublequotations>
		<quote public="1" set="null"><c path="String"/></quote>
		<newline public="1" set="null"><c path="String"/></newline>
		<emptytonull public="1" set="null"><e path="Bool"/></emptytonull>
		<delimiter public="1" set="null"><c path="String"/></delimiter>
		<new public="1" set="method" line="28"><f a="handler:?check_type:?delimiter:?emptytonull:?newline:?quote:?doublequotations:?trim_whitespace">
	<c path="thx.data.IDataHandler"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.data.IDataHandler" params="" file="src/thx/data/IDataHandler.hx" interface="1">
		<comment public="1" set="method"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<valueBool public="1" set="method"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></valueBool>
		<valueNull public="1" set="method"><f a=""><e path="Void"/></f></valueNull>
		<valueFloat public="1" set="method"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></valueFloat>
		<valueInt public="1" set="method"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></valueInt>
		<valueString public="1" set="method"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></valueString>
		<valueDate public="1" set="method"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></valueDate>
		<arrayEnd public="1" set="method"><f a=""><e path="Void"/></f></arrayEnd>
		<arrayItemEnd public="1" set="method"><f a=""><e path="Void"/></f></arrayItemEnd>
		<arrayItemStart public="1" set="method"><f a=""><e path="Void"/></f></arrayItemStart>
		<arrayStart public="1" set="method"><f a=""><e path="Void"/></f></arrayStart>
		<objectEnd public="1" set="method"><f a=""><e path="Void"/></f></objectEnd>
		<objectFieldEnd public="1" set="method"><f a=""><e path="Void"/></f></objectFieldEnd>
		<objectFieldStart public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></objectFieldStart>
		<objectStart public="1" set="method"><f a=""><e path="Void"/></f></objectStart>
		<end public="1" set="method"><f a=""><e path="Void"/></f></end>
		<start public="1" set="method"><f a=""><e path="Void"/></f></start>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.csv.CsvEncoder" params="" file="src/thx/csv/CsvEncoder.hx">
		<implements path="thx.data.IDataHandler"/>
		<comment public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<valueBool public="1" set="method" line="115"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></valueBool>
		<valueNull public="1" set="method" line="109"><f a=""><e path="Void"/></f></valueNull>
		<valueFloat public="1" set="method" line="105"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></valueFloat>
		<valueInt public="1" set="method" line="101"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></valueInt>
		<valueString public="1" set="method" line="92"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></valueString>
		<valueDate public="1" set="method" line="85"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></valueDate>
		<arrayEnd public="1" set="method" line="79"><f a=""><e path="Void"/></f></arrayEnd>
		<arrayItemEnd public="1" set="method" line="75"><f a=""><e path="Void"/></f></arrayItemEnd>
		<arrayItemStart public="1" set="method" line="58"><f a=""><e path="Void"/></f></arrayItemStart>
		<arrayStart public="1" set="method" line="54"><f a=""><e path="Void"/></f></arrayStart>
		<objectEnd public="1" set="method" line="52"><f a=""><e path="Void"/></f></objectEnd>
		<objectFieldEnd public="1" set="method" line="51"><f a=""><e path="Void"/></f></objectFieldEnd>
		<objectFieldStart public="1" set="method" line="50"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></objectFieldStart>
		<objectStart public="1" set="method" line="46"><f a=""><e path="Void"/></f></objectStart>
		<end public="1" set="method" line="41"><f a=""><e path="Void"/></f></end>
		<start public="1" set="method" line="35"><f a=""><e path="Void"/></f></start>
		<firstValue><e path="Bool"/></firstValue>
		<firstLine><e path="Bool"/></firstLine>
		<valueContext><e path="Bool"/></valueContext>
		<lineContext><e path="Bool"/></lineContext>
		<buf><c path="StringBuf"/></buf>
		<re><c path="EReg"/></re>
		<encodedString public="1" set="null"><c path="String"/></encodedString>
		<newline public="1" set="null"><c path="String"/></newline>
		<nulltoempty public="1" set="null"><e path="Bool"/></nulltoempty>
		<delimiter public="1" set="null"><c path="String"/></delimiter>
		<new public="1" set="method" line="27"><f a="?delimiter:?nulltoempty:?newline">
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.culture.Info" params="" file="src/thx/culture/Info.hx">
		<toString public="1" set="method" line="17"><f a=""><c path="String"/></f></toString>
		<pluralRule public="1" set="null"><c path="Int"/></pluralRule>
		<iso3 public="1" set="null"><c path="String"/></iso3>
		<iso2 public="1" set="null"><c path="String"/></iso2>
		<english public="1" set="null"><c path="String"/></english>
		<native public="1" set="null"><c path="String"/></native>
		<name public="1" set="null"><c path="String"/></name>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.culture.Culture" params="" file="src/thx/culture/Culture.hx">
		<extends path="thx.culture.Info"/>
		<cultures get="getCultures" set="null" static="1"><c path="Hash"><c path="thx.culture.Culture"/></c></cultures>
		<getCultures set="method" line="39" static="1"><f a=""><c path="Hash"><c path="thx.culture.Culture"/></c></f></getCultures>
		<get public="1" set="method" line="46" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
</f></get>
		<names public="1" set="method" line="51" static="1"><f a=""><t path="Iterator"><c path="String"/></t></f></names>
		<exists public="1" set="method" line="56" static="1"><f a="culture">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<_defaultCulture static="1"><c path="thx.culture.Culture"/></_defaultCulture>
		<defaultCulture public="1" get="getDefaultCulture" set="setDefaultCulture" static="1"><c path="thx.culture.Culture"/></defaultCulture>
		<getDefaultCulture set="method" line="64" static="1"><f a=""><c path="thx.culture.Culture"/></f></getDefaultCulture>
		<setDefaultCulture set="method" line="72" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.Culture"/>
</f></setDefaultCulture>
		<add public="1" set="method" line="77" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<e path="Void"/>
</f></add>
		<loadAll public="1" set="method" line="87" static="1"><f a=""><e path="Void"/></f></loadAll>
		<percent public="1" set="null"><c path="thx.culture.core.NumberInfo"/></percent>
		<currency public="1" set="null"><c path="thx.culture.core.NumberInfo"/></currency>
		<number public="1" set="null"><c path="thx.culture.core.NumberInfo"/></number>
		<symbolPosInf public="1" set="null"><c path="String"/></symbolPosInf>
		<symbolNegInf public="1" set="null"><c path="String"/></symbolNegInf>
		<symbolPermille public="1" set="null"><c path="String"/></symbolPermille>
		<symbolPercent public="1" set="null"><c path="String"/></symbolPercent>
		<symbolNaN public="1" set="null"><c path="String"/></symbolNaN>
		<signPos public="1" set="null"><c path="String"/></signPos>
		<signNeg public="1" set="null"><c path="String"/></signNeg>
		<digits public="1" set="null"><t path="Null"><c path="Array"><c path="String"/></c></t></digits>
		<isMetric public="1" set="null"><e path="Bool"/></isMetric>
		<nativeRegion public="1" set="null"><c path="String"/></nativeRegion>
		<englishRegion public="1" set="null"><c path="String"/></englishRegion>
		<currencyIso public="1" set="null"><c path="String"/></currencyIso>
		<currencySymbol public="1" set="null"><c path="String"/></currencySymbol>
		<nativeCurrency public="1" set="null"><c path="String"/></nativeCurrency>
		<englishCurrency public="1" set="null"><c path="String"/></englishCurrency>
		<date public="1" set="null"><c path="thx.culture.core.DateTimeInfo"/></date>
		<language public="1" set="null"><c path="thx.culture.Language"/></language>
		<haxe_doc>* @todo add lazy loading</haxe_doc>
	</class>
	<class path="thx.culture.FormatDate" params="" file="src/thx/culture/FormatDate.hx">
		<format public="1" set="method" line="98" static="1">
			<f a="pattern:date:?culture:?leadingspace">
				<c path="String"/>
				<c path="Date"/>
				<c path="thx.culture.Culture"/>
				<e path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Returns a formatted date according to the passed pattern and culture. The pattern
	* paramter accepts the following modifiers.
	*
<pre>
    description                                                   example
===========================================================================
%a	The abbreviated weekday name according to the current locale. Wed
%A	The full weekday name according to the current locale.	      Wednesday
%b	The abbreviated month name according to the current locale.	  Jan
%B	The full month name according to the current locale.	      January
%c	The preferred date and time representation for the current locale.
%C	The century number (year/100) as a 2-digit integer.	          19
%d	The day of the month as a decimal number (range 01 to 31).	  07
%D	Equivalent to %m/%d/%y. (This is the USA date format.         06/25/04
    In many countries %d/%m/%y is the standard date format.
    Thus, in an international context, both of these formats are
    ambiguous and should be avoided.)
%e	Like %d, the day of the month as a decimal number, but a      7
    leading zero may be replaced by a leadingspace.
%G	The ISO 8601 year with century as a decimal number. The       2004
    4-digit year corresponding to the ISO week number (see %V).
    This has the same format and value as %y, except that if the
    ISO week number belongs to the previous or next year, that
    year is used instead.
%g	Like %G, but without century, i.e., with a 2-digit year       04
    (00-99).
%h	Equivalent to %b.	                                          Jan
%H	The hour as a decimal number using a 24-hour clock            22
    (range 00 to 23).
%I	The hour as a decimal number using a 12-hour clock            07
    (range 01 to 12).
%j	The day of the year as a decimal number (range 001 to 366).   008
%k	The hour (24-hour clock) as a decimal number (range 0 to 23); 7
    single-digits are optionally prefixed by leadingspace.
    (See also %H.)
%l	The hour (12-hour clock) as a decimal number (range 1 to 12); 7
    single-digits are optionally prefixed by leadingspace.
    (See also %I.)
%m	The month as a decimal number (range 01 to 12).	              04
%M	The minute as a decimal number (range 00 to 59).              08
%n	A newline character.
%p	Either 'AM' or 'PM' according to the given time value, or the AM
    corresponding strings for the current locale. Noon is treated
    as 'pm' and midnight as 'am'.
%P	Like %p but in lowercase: 'am' or 'pm' or a corresponding     AM
    string for the current locale.
%r	The time in a.m. or p.m. notation. In the POSIX locale this   07:08:09 am
    is equivalent to '%I:%M:%S %p'.
%R	The time in 24-hour notation (%H:%M). For a version including 07:08
    the seconds, see %T below.
%s	The number of seconds since the Epoch, i.e., since            1099928130
    1970-01-01 00:00:00 UTC.
%S	The second as a decimal number (range 00 to 61). the upper    07
    level of the range 61 rather than 59 to allow for the
    occasional leap second and even more occasional double leap
    second.
%t	A tab character.
%T	The time in 24-hour notation (%H:%M:%S).                      17:08:09
%u	The day of the week as a decimal, range 1 to 7, Monday
    being 1. See also %w.
%U	The week number of the current year as a decimal number,      26
    range 00 to 53, starting with the first Sunday as the first
    day of week 01. See also %V and %W.
%V	The ISO 8601:1988 week number of the current year as a        26
    decimal number, range 01 to 53, where week 1 is the first
    week that has at least 4 days in the current year, and with
    Monday as the first day of the week. See also %U and %W.
%w	The day of the week as a decimal, range 0 to 6, Sunday being
    0. See also %u.
%W	The week number of the current year as a decimal number,
    range 00 to 53, starting with the first Monday as the first
    day of week 01.
%x	The preferred date representation for the current locale
    without the time.
%X	The preferred time representation for the current locale
    without the date.
%y	The year as a decimal number without a century                04
    (range 00 to 99).
%Y	The year as a decimal number including the century.           2004
%z	The time-zone as hour offset from GMT. Required to emit       -2
    RFC822-conformant dates (using "%a, %d %b %Y %H:%M:%S %z").
%Z	The time zone or name or abbreviation.                        GMT
%%	A literal '%' character.                                      %

customs for missing features
%f  The month. Single-digit months may be prefixed by             6
    leadingspace.
%i  The minute. Single-digit minutes may be prefixed by           8
    leadingspace.
%q  The second. Single-digit seconds may be prefixed by           9
    leadingspace.
</pre>]]></haxe_doc>
		</format>
		<getMHours set="method" line="164" static="1"><f a="date">
	<c path="Date"/>
	<c path="Int"/>
</f></getMHours>
		<yearMonth public="1" set="method" line="170" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></yearMonth>
		<monthDay public="1" set="method" line="176" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthDay>
		<date public="1" set="method" line="182" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></date>
		<dateShort public="1" set="method" line="188" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateShort>
		<dateRfc public="1" set="method" line="194" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateRfc>
		<dateTime public="1" set="method" line="200" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateTime>
		<universal public="1" set="method" line="206" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></universal>
		<sortable public="1" set="method" line="212" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></sortable>
		<time public="1" set="method" line="218" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></time>
		<timeShort public="1" set="method" line="224" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></timeShort>
		<hourShort public="1" set="method" line="230" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></hourShort>
		<year public="1" set="method" line="239" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></year>
		<month public="1" set="method" line="245" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></month>
		<monthName public="1" set="method" line="251" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthName>
		<monthNameShort public="1" set="method" line="257" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthNameShort>
		<weekDay public="1" set="method" line="263" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDay>
		<weekDayName public="1" set="method" line="269" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDayName>
		<weekDayNameShort public="1" set="method" line="275" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDayNameShort>
	</class>
	<class path="thx.culture.FormatNumber" params="" file="src/thx/culture/FormatNumber.hx">
		<decimal public="1" set="method" line="6" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></decimal>
		<percent public="1" set="method" line="11" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></percent>
		<permille public="1" set="method" line="16" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></permille>
		<currency public="1" set="method" line="21" static="1"><f a="v:?symbol:?decimals:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></currency>
		<int public="1" set="method" line="26" static="1"><f a="v:?culture">
	<c path="Float"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></int>
		<digits public="1" set="method" line="36" static="1">
			<f a="v:?culture">
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Transforms a string of digit from the international format (0...9) to the locale format.
	* Be sure to include only characters in the 0...9 range.</haxe_doc>
		</digits>
		<crunch set="method" line="42" static="1"><f a="v:decimals:info:negative:positive:culture:symbol:replace">
	<c path="Float"/>
	<t path="Null"><c path="Int"/></t>
	<c path="thx.culture.core.NumberInfo"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></crunch>
		<processDigits set="method" line="54" static="1"><f a="s:digits">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></processDigits>
		<value set="method" line="62" static="1"><f a="v:info:decimals:digits">
	<c path="Float"/>
	<c path="thx.culture.core.NumberInfo"/>
	<c path="Int"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></value>
	</class>
	<class path="thx.culture.FormatParams" params="" file="src/thx/culture/FormatParams.hx">
		<cleanQuotes public="1" set="method" line="12" static="1"><f a="p">
	<c path="String"/>
	<c path="String"/>
</f></cleanQuotes>
		<params public="1" set="method" line="24" static="1"><f a="p:ps:alt">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></params>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.culture.Language" params="" file="src/thx/culture/Language.hx">
		<extends path="thx.culture.Info"/>
		<languages get="getLanguages" set="null" static="1"><c path="Hash"><c path="thx.culture.Language"/></c></languages>
		<getLanguages set="method" line="9" static="1"><f a=""><c path="Hash"><c path="thx.culture.Language"/></c></f></getLanguages>
		<get public="1" set="method" line="16" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.culture.Language"/>
</f></get>
		<names public="1" set="method" line="20" static="1"><f a=""><t path="Iterator"><c path="String"/></t></f></names>
		<add public="1" set="method" line="24" static="1"><f a="language">
	<c path="thx.culture.Language"/>
	<e path="Void"/>
</f></add>
		<haxe_doc>* @todo add lazy loading</haxe_doc>
	</class>
	<class path="thx.culture.core.DateTimeInfo" params="" file="src/thx/culture/core/DateTimeInfo.hx">
		<patternTimeShort public="1" set="null"><c path="String"/></patternTimeShort>
		<patternTime public="1" set="null"><c path="String"/></patternTime>
		<patternSortable public="1" set="null"><c path="String"/></patternSortable>
		<patternUniversal public="1" set="null"><c path="String"/></patternUniversal>
		<patternDateTime public="1" set="null"><c path="String"/></patternDateTime>
		<patternDateRfc public="1" set="null"><c path="String"/></patternDateRfc>
		<patternDateShort public="1" set="null"><c path="String"/></patternDateShort>
		<patternDate public="1" set="null"><c path="String"/></patternDate>
		<patternMonthDay public="1" set="null"><c path="String"/></patternMonthDay>
		<patternYearMonth public="1" set="null"><c path="String"/></patternYearMonth>
		<firstWeekDay public="1" set="null"><c path="Int"/></firstWeekDay>
		<separatorTime public="1" set="null"><c path="String"/></separatorTime>
		<separatorDate public="1" set="null"><c path="String"/></separatorDate>
		<pm public="1" set="null"><c path="String"/></pm>
		<am public="1" set="null"><c path="String"/></am>
		<shortDays public="1" set="null"><c path="Array"><c path="String"/></c></shortDays>
		<abbrDays public="1" set="null"><c path="Array"><c path="String"/></c></abbrDays>
		<days public="1" set="null"><c path="Array"><c path="String"/></c></days>
		<abbrMonths public="1" set="null"><c path="Array"><c path="String"/></c></abbrMonths>
		<months public="1" set="null"><c path="Array"><c path="String"/></c></months>
		<new public="1" set="method" line="25"><f a="months:abbrMonths:days:abbrDays:shortDays:am:pm:separatorDate:separatorTime:firstWeekDay:patternYearMonth:patternMonthDay:patternDate:patternDateShort:patternDateRfc:patternDateTime:patternUniversal:patternSortable:patternTime:patternTimeShort">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.core.NumberInfo" params="" file="src/thx/culture/core/NumberInfo.hx">
		<patternPositive public="1" set="null"><c path="String"/></patternPositive>
		<patternNegative public="1" set="null"><c path="String"/></patternNegative>
		<groupsSeparator public="1" set="null"><c path="String"/></groupsSeparator>
		<groups public="1" set="null"><c path="Array"><c path="Int"/></c></groups>
		<decimalsSeparator public="1" set="null"><c path="String"/></decimalsSeparator>
		<decimals public="1" set="null"><c path="Int"/></decimals>
		<new public="1" set="method" line="11"><f a="decimals:decimalsSeparator:groups:groupsSeparator:patternNegative:patternPositive">
	<c path="Int"/>
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.languages.Af" params="" file="src/thx/languages/Af.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AfZA" params="" file="src/thx/cultures/AfZA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AmET" params="" file="src/thx/cultures/AmET.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ar" params="" file="src/thx/languages/Ar.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArAE" params="" file="src/thx/cultures/ArAE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArBH" params="" file="src/thx/cultures/ArBH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArDZ" params="" file="src/thx/cultures/ArDZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArEG" params="" file="src/thx/cultures/ArEG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArIQ" params="" file="src/thx/cultures/ArIQ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArJO" params="" file="src/thx/cultures/ArJO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArKW" params="" file="src/thx/cultures/ArKW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArLB" params="" file="src/thx/cultures/ArLB.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArLY" params="" file="src/thx/cultures/ArLY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArMA" params="" file="src/thx/cultures/ArMA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArOM" params="" file="src/thx/cultures/ArOM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArQA" params="" file="src/thx/cultures/ArQA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArSA" params="" file="src/thx/cultures/ArSA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArSY" params="" file="src/thx/cultures/ArSY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArTN" params="" file="src/thx/cultures/ArTN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArYE" params="" file="src/thx/cultures/ArYE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AsIN" params="" file="src/thx/cultures/AsIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Az" params="" file="src/thx/languages/Az.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AzCyrlAZ" params="" file="src/thx/cultures/AzCyrlAZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AzLatnAZ" params="" file="src/thx/cultures/AzLatnAZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BaRU" params="" file="src/thx/cultures/BaRU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Be" params="" file="src/thx/languages/Be.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BeBY" params="" file="src/thx/cultures/BeBY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Bg" params="" file="src/thx/languages/Bg.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BgBG" params="" file="src/thx/cultures/BgBG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BnBD" params="" file="src/thx/cultures/BnBD.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BnIN" params="" file="src/thx/cultures/BnIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BoCN" params="" file="src/thx/cultures/BoCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BrFR" params="" file="src/thx/cultures/BrFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ca" params="" file="src/thx/languages/Ca.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.CaES" params="" file="src/thx/cultures/CaES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.CoFR" params="" file="src/thx/cultures/CoFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Cs" params="" file="src/thx/languages/Cs.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.CsCZ" params="" file="src/thx/cultures/CsCZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Da" params="" file="src/thx/languages/Da.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DaDK" params="" file="src/thx/cultures/DaDK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.De" params="" file="src/thx/languages/De.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeAT" params="" file="src/thx/cultures/DeAT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeCH" params="" file="src/thx/cultures/DeCH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeDE" params="" file="src/thx/cultures/DeDE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeLI" params="" file="src/thx/cultures/DeLI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeLU" params="" file="src/thx/cultures/DeLU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Dv" params="" file="src/thx/languages/Dv.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DvMV" params="" file="src/thx/cultures/DvMV.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.El" params="" file="src/thx/languages/El.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ElGR" params="" file="src/thx/cultures/ElGR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.En" params="" file="src/thx/languages/En.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnAU" params="" file="src/thx/cultures/EnAU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnBZ" params="" file="src/thx/cultures/EnBZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnCA" params="" file="src/thx/cultures/EnCA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnGB" params="" file="src/thx/cultures/EnGB.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnIE" params="" file="src/thx/cultures/EnIE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnIN" params="" file="src/thx/cultures/EnIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnJM" params="" file="src/thx/cultures/EnJM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnMY" params="" file="src/thx/cultures/EnMY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnNZ" params="" file="src/thx/cultures/EnNZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnPH" params="" file="src/thx/cultures/EnPH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnSG" params="" file="src/thx/cultures/EnSG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnTT" params="" file="src/thx/cultures/EnTT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnUS" params="" file="src/thx/cultures/EnUS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnZA" params="" file="src/thx/cultures/EnZA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnZW" params="" file="src/thx/cultures/EnZW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Es" params="" file="src/thx/languages/Es.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsAR" params="" file="src/thx/cultures/EsAR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsBO" params="" file="src/thx/cultures/EsBO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsCL" params="" file="src/thx/cultures/EsCL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsCO" params="" file="src/thx/cultures/EsCO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsCR" params="" file="src/thx/cultures/EsCR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsDO" params="" file="src/thx/cultures/EsDO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsEC" params="" file="src/thx/cultures/EsEC.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsES" params="" file="src/thx/cultures/EsES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsGT" params="" file="src/thx/cultures/EsGT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsHN" params="" file="src/thx/cultures/EsHN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsMX" params="" file="src/thx/cultures/EsMX.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsNI" params="" file="src/thx/cultures/EsNI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsPA" params="" file="src/thx/cultures/EsPA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsPE" params="" file="src/thx/cultures/EsPE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsPR" params="" file="src/thx/cultures/EsPR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsPY" params="" file="src/thx/cultures/EsPY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsSV" params="" file="src/thx/cultures/EsSV.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsUS" params="" file="src/thx/cultures/EsUS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsUY" params="" file="src/thx/cultures/EsUY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsVE" params="" file="src/thx/cultures/EsVE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Et" params="" file="src/thx/languages/Et.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EtEE" params="" file="src/thx/cultures/EtEE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Eu" params="" file="src/thx/languages/Eu.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EuES" params="" file="src/thx/cultures/EuES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fa" params="" file="src/thx/languages/Fa.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FaIR" params="" file="src/thx/cultures/FaIR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fi" params="" file="src/thx/languages/Fi.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FiFI" params="" file="src/thx/cultures/FiFI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fo" params="" file="src/thx/languages/Fo.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FoFO" params="" file="src/thx/cultures/FoFO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fr" params="" file="src/thx/languages/Fr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrBE" params="" file="src/thx/cultures/FrBE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrCA" params="" file="src/thx/cultures/FrCA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrCH" params="" file="src/thx/cultures/FrCH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrFR" params="" file="src/thx/cultures/FrFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrLU" params="" file="src/thx/cultures/FrLU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrMC" params="" file="src/thx/cultures/FrMC.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.GdGB" params="" file="src/thx/cultures/GdGB.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Gl" params="" file="src/thx/languages/Gl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.GlES" params="" file="src/thx/cultures/GlES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Gu" params="" file="src/thx/languages/Gu.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.GuIN" params="" file="src/thx/cultures/GuIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HaLatnNG" params="" file="src/thx/cultures/HaLatnNG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="43" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.He" params="" file="src/thx/languages/He.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HeIL" params="" file="src/thx/cultures/HeIL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hi" params="" file="src/thx/languages/Hi.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HiIN" params="" file="src/thx/cultures/HiIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hr" params="" file="src/thx/languages/Hr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HrHR" params="" file="src/thx/cultures/HrHR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hu" params="" file="src/thx/languages/Hu.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HuHU" params="" file="src/thx/cultures/HuHU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hy" params="" file="src/thx/languages/Hy.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HyAM" params="" file="src/thx/cultures/HyAM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Id" params="" file="src/thx/languages/Id.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IdID" params="" file="src/thx/cultures/IdID.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IgNG" params="" file="src/thx/cultures/IgNG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="43" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IiCN" params="" file="src/thx/cultures/IiCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Is" params="" file="src/thx/languages/Is.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IsIS" params="" file="src/thx/cultures/IsIS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.It" params="" file="src/thx/languages/It.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ItCH" params="" file="src/thx/cultures/ItCH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ItIT" params="" file="src/thx/cultures/ItIT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IuCansCA" params="" file="src/thx/cultures/IuCansCA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="42" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ja" params="" file="src/thx/languages/Ja.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.JaJP" params="" file="src/thx/cultures/JaJP.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ka" params="" file="src/thx/languages/Ka.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KaGE" params="" file="src/thx/cultures/KaGE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Kk" params="" file="src/thx/languages/Kk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KkKZ" params="" file="src/thx/cultures/KkKZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KlGL" params="" file="src/thx/cultures/KlGL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KmKH" params="" file="src/thx/cultures/KmKH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Kn" params="" file="src/thx/languages/Kn.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KnIN" params="" file="src/thx/cultures/KnIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ko" params="" file="src/thx/languages/Ko.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KoKR" params="" file="src/thx/cultures/KoKR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ky" params="" file="src/thx/languages/Ky.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KyKG" params="" file="src/thx/cultures/KyKG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.LoLA" params="" file="src/thx/cultures/LoLA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Lt" params="" file="src/thx/languages/Lt.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.LtLT" params="" file="src/thx/cultures/LtLT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Lv" params="" file="src/thx/languages/Lv.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.LvLV" params="" file="src/thx/cultures/LvLV.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Mk" params="" file="src/thx/languages/Mk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MkMK" params="" file="src/thx/cultures/MkMK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MlIN" params="" file="src/thx/cultures/MlIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Mn" params="" file="src/thx/languages/Mn.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MnMN" params="" file="src/thx/cultures/MnMN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MnMongCN" params="" file="src/thx/cultures/MnMongCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Mr" params="" file="src/thx/languages/Mr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MrIN" params="" file="src/thx/cultures/MrIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ms" params="" file="src/thx/languages/Ms.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MsBN" params="" file="src/thx/cultures/MsBN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MsMY" params="" file="src/thx/cultures/MsMY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.No" params="" file="src/thx/languages/No.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NbNO" params="" file="src/thx/cultures/NbNO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NeNP" params="" file="src/thx/cultures/NeNP.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Nl" params="" file="src/thx/languages/Nl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NlBE" params="" file="src/thx/cultures/NlBE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NlNL" params="" file="src/thx/cultures/NlNL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NnNO" params="" file="src/thx/cultures/NnNO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.OcFR" params="" file="src/thx/cultures/OcFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.OrIN" params="" file="src/thx/cultures/OrIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Pa" params="" file="src/thx/languages/Pa.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PaIN" params="" file="src/thx/cultures/PaIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Pl" params="" file="src/thx/languages/Pl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PlPL" params="" file="src/thx/cultures/PlPL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PsAF" params="" file="src/thx/cultures/PsAF.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="53" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Pt" params="" file="src/thx/languages/Pt.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PtBR" params="" file="src/thx/cultures/PtBR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PtPT" params="" file="src/thx/cultures/PtPT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ro" params="" file="src/thx/languages/Ro.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.RoRO" params="" file="src/thx/cultures/RoRO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ru" params="" file="src/thx/languages/Ru.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.RuRU" params="" file="src/thx/cultures/RuRU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.RwRW" params="" file="src/thx/cultures/RwRW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="45" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sa" params="" file="src/thx/languages/Sa.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SaIN" params="" file="src/thx/cultures/SaIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SiLK" params="" file="src/thx/cultures/SiLK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sk" params="" file="src/thx/languages/Sk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SkSK" params="" file="src/thx/cultures/SkSK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sl" params="" file="src/thx/languages/Sl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SlSI" params="" file="src/thx/cultures/SlSI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sq" params="" file="src/thx/languages/Sq.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SqAL" params="" file="src/thx/cultures/SqAL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sr" params="" file="src/thx/languages/Sr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrCyrlCS" params="" file="src/thx/cultures/SrCyrlCS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrCyrlME" params="" file="src/thx/cultures/SrCyrlME.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrCyrlRS" params="" file="src/thx/cultures/SrCyrlRS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrLatnCS" params="" file="src/thx/cultures/SrLatnCS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrLatnME" params="" file="src/thx/cultures/SrLatnME.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrLatnRS" params="" file="src/thx/cultures/SrLatnRS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sv" params="" file="src/thx/languages/Sv.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SvFI" params="" file="src/thx/cultures/SvFI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SvSE" params="" file="src/thx/cultures/SvSE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sw" params="" file="src/thx/languages/Sw.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SwKE" params="" file="src/thx/cultures/SwKE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ta" params="" file="src/thx/languages/Ta.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TaIN" params="" file="src/thx/cultures/TaIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Te" params="" file="src/thx/languages/Te.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TeIN" params="" file="src/thx/cultures/TeIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TgCyrlTJ" params="" file="src/thx/cultures/TgCyrlTJ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Th" params="" file="src/thx/languages/Th.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ThTH" params="" file="src/thx/cultures/ThTH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TkTM" params="" file="src/thx/cultures/TkTM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Tr" params="" file="src/thx/languages/Tr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TrTR" params="" file="src/thx/cultures/TrTR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Tt" params="" file="src/thx/languages/Tt.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TtRU" params="" file="src/thx/cultures/TtRU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UgCN" params="" file="src/thx/cultures/UgCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Uk" params="" file="src/thx/languages/Uk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UkUA" params="" file="src/thx/cultures/UkUA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ur" params="" file="src/thx/languages/Ur.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UrPK" params="" file="src/thx/cultures/UrPK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Uz" params="" file="src/thx/languages/Uz.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UzCyrlUZ" params="" file="src/thx/cultures/UzCyrlUZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UzLatnUZ" params="" file="src/thx/cultures/UzLatnUZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Vi" params="" file="src/thx/languages/Vi.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ViVN" params="" file="src/thx/cultures/ViVN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.WoSN" params="" file="src/thx/cultures/WoSN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.YoNG" params="" file="src/thx/cultures/YoNG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="43" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.ZhHans" params="" file="src/thx/languages/ZhHans.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ZhCN" params="" file="src/thx/cultures/ZhCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.ZhHant" params="" file="src/thx/languages/ZhHant.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ZhHK" params="" file="src/thx/cultures/ZhHK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ZhMO" params="" file="src/thx/cultures/ZhMO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ZhSG" params="" file="src/thx/cultures/ZhSG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ZhTW" params="" file="src/thx/cultures/ZhTW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.data.ValueEncoder" params="" file="src/thx/data/ValueEncoder.hx">
		<encodeArray set="method" line="97"><f a="a">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></encodeArray>
		<encodeList set="method" line="85"><f a="list">
	<c path="List"><d/></c>
	<e path="Void"/>
</f></encodeList>
		<encodeHash set="method" line="73"><f a="o">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></encodeHash>
		<encodeObject set="method" line="61"><f a="o">
	<a/>
	<e path="Void"/>
</f></encodeObject>
		<encodeValue set="method" line="24"><f a="o">
	<d/>
	<e path="Void"/>
</f></encodeValue>
		<encode public="1" set="method" line="17"><f a="o">
	<d/>
	<e path="Void"/>
</f></encode>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<new public="1" set="method" line="12"><f a="handler">
	<c path="thx.data.IDataHandler"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.data.ValueHandler" params="" file="src/thx/data/ValueHandler.hx">
		<implements path="thx.data.IDataHandler"/>
		<comment public="1" set="method" line="65"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<valueBool public="1" set="method" line="64"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></valueBool>
		<valueNull public="1" set="method" line="63"><f a=""><e path="Void"/></f></valueNull>
		<valueFloat public="1" set="method" line="62"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></valueFloat>
		<valueInt public="1" set="method" line="61"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></valueInt>
		<valueString public="1" set="method" line="60"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></valueString>
		<valueDate public="1" set="method" line="59"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></valueDate>
		<arrayItemEnd public="1" set="method" line="52"><f a=""><e path="Void"/></f></arrayItemEnd>
		<arrayItemStart public="1" set="method" line="51"><f a=""><e path="Void"/></f></arrayItemStart>
		<arrayEnd public="1" set="method" line="50"><f a=""><e path="Void"/></f></arrayEnd>
		<arrayStart public="1" set="method" line="45"><f a=""><e path="Void"/></f></arrayStart>
		<objectFieldEnd public="1" set="method" line="38"><f a=""><e path="Void"/></f></objectFieldEnd>
		<objectFieldStart public="1" set="method" line="33"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></objectFieldStart>
		<objectEnd public="1" set="method" line="32"><f a=""><e path="Void"/></f></objectEnd>
		<objectStart public="1" set="method" line="27"><f a=""><e path="Void"/></f></objectStart>
		<end public="1" set="method" line="22"><f a=""><e path="Void"/></f></end>
		<start public="1" set="method" line="17"><f a=""><e path="Void"/></f></start>
		<_names><c path="Array"><c path="String"/></c></_names>
		<_stack><c path="Array"><d/></c></_stack>
		<value public="1"><d/></value>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.date.DateParser" params="" file="src/thx/date/DateParser.hx">
		<daynumeric line="13" static="1"><c path="String"/></daynumeric>
		<months line="15" static="1"><c path="Array"><c path="String"/></c></months>
		<shortmonths line="16" static="1"><c path="Array"><c path="String"/></c></shortmonths>
		<days line="17" static="1"><c path="Array"><c path="String"/></c></days>
		<shortdays line="18" static="1"><c path="Array"><c path="String"/></c></shortdays>
		<sfullmonths line="21" static="1"><c path="String"/></sfullmonths>
		<sshortmonths line="22" static="1"><c path="String"/></sshortmonths>
		<sfulldays line="23" static="1"><c path="String"/></sfulldays>
		<sshortdays line="24" static="1"><c path="String"/></sshortdays>
		<day line="28" static="1"><c path="String"/></day>
		<month line="29" static="1"><c path="String"/></month>
		<hour line="30" static="1"><c path="String"/></hour>
		<hhour line="31" static="1"><c path="String"/></hhour>
		<hohour line="32" static="1"><c path="String"/></hohour>
		<fminsec line="33" static="1"><c path="String"/></fminsec>
		<minsec line="34" static="1"><c path="String"/></minsec>
		<ampm line="35" static="1"><c path="String"/></ampm>
		<daypart line="36" static="1"><c path="String"/></daypart>
		<period line="37" static="1"><c path="String"/></period>
		<dateexp line="39" static="1"><c path="EReg"/></dateexp>
		<absdateexp line="67" static="1"><c path="EReg"/></absdateexp>
		<relexp line="84" static="1"><c path="EReg"/></relexp>
		<timeexp line="95" static="1"><c path="EReg"/></timeexp>
		<parse public="1" set="method" line="121" static="1"><f a="s:?d">
	<c path="String"/>
	<c path="Date"/>
	<t path="Null"><c path="Date"/></t>
</f></parse>
		<parseTime public="1" set="method" line="343" static="1"><f a="s">
	<c path="String"/>
	<a>
		<second><c path="Int"/></second>
		<minute><c path="Int"/></minute>
		<millis><c path="Float"/></millis>
		<matched><c path="String"/></matched>
		<hour><c path="Int"/></hour>
	</a>
</f></parseTime>
		<fixyear set="method" line="411" static="1"><f a="y">
	<c path="Int"/>
	<c path="Int"/>
</f></fixyear>
		<last set="method" line="421" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></last>
		<next set="method" line="429" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></next>
		<plusPm set="method" line="437" static="1"><f a="s">
	<c path="String"/>
	<c path="Int"/>
</f></plusPm>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.date.Milli" params="" file="src/thx/date/Milli.hx">
		<CHUNKER line="7" static="1"><c path="EReg"/></CHUNKER>
		<intervals line="8" static="1"><c path="Array"><a>
	<time><c path="Int"/></time>
	<short><c path="String"/></short>
	<name><c path="String"/></name>
</a></c></intervals>
		<map line="29" static="1"><c path="Hash"><c path="Int"/></c></map>
		<parse public="1" set="method" line="37" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></parse>
		<toString public="1" set="method" line="53" static="1"><f a="v:?shortFormat">
	<c path="Float"/>
	<e path="Bool"/>
	<c path="String"/>
</f></toString>
	</class>
	<class path="thx.util.Message" params="" file="src/thx/util/Message.hx">
		<translate public="1" set="method" line="38"><f a="translator:?domain">
	<c path="thx.translation.ITranslation"/>
	<c path="String"/>
	<c path="String"/>
</f></translate>
		<translatef public="1" set="method" line="33"><f a="translator">
	<f a="">
		<c path="String"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></translatef>
		<toString public="1" set="method" line="28"><f a=""><c path="String"/></f></toString>
		<params public="1" set="null"><c path="Array"><d/></c></params>
		<message public="1" set="null"><c path="String"/></message>
		<new public="1" set="method" line="17"><f a="message:?params:?param">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.error.Error" params="" file="src/thx/error/Error.hx">
		<extends path="thx.util.Message"/>
		<errorPositionPattern public="1" line="14" static="1"><c path="String"/></errorPositionPattern>
		<toString public="1" set="method" line="36" override="1"><f a=""><c path="String"/></f></toString>
		<toStringError public="1" set="method" line="30"><f a="?pattern">
	<c path="String"/>
	<c path="String"/>
</f></toStringError>
		<setInner public="1" set="method" line="24"><f a="inner">
	<c path="thx.error.Error"/>
	<c path="thx.error.Error"/>
</f></setInner>
		<inner public="1" set="null"><c path="thx.error.Error"/></inner>
		<pos public="1" set="null"><t path="haxe.PosInfos"/></pos>
		<new public="1" set="method" line="18"><f a="message:?params:?param:?pos">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.error.AbstractMethod" params="" file="src/thx/error/AbstractMethod.hx">
		<extends path="thx.error.Error"/>
		<new public="1" set="method" line="12"><f a="?posInfo">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.error.NotImplemented" params="" file="src/thx/error/NotImplemented.hx">
		<extends path="thx.error.Error"/>
		<new public="1" set="method" line="11"><f a="?posInfo">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.error.NullArgument" params="" file="src/thx/error/NullArgument.hx">
		<extends path="thx.error.Error"/>
		<new public="1" set="method" line="12"><f a="argumentName:?message:?posInfo">
	<c path="String"/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.geo.IProjection" params="" file="src/thx/geo/IProjection.hx" interface="1">
		<invert public="1" set="method"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></invert>
		<project public="1" set="method"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.geo.Albers" params="" file="src/thx/geo/Albers.hx">
		<implements path="thx.geo.IProjection"/>
		<getScale set="method" line="98"><f a=""><c path="Float"/></f></getScale>
		<setScale set="method" line="97"><f a="scale">
	<c path="Float"/>
	<c path="Float"/>
</f></setScale>
		<reload set="method" line="83"><f a=""><c path="thx.geo.Albers"/></f></reload>
		<setTranslate set="method" line="77"><f a="translate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setTranslate>
		<getTranslate set="method" line="76"><f a=""><c path="Array"><c path="Float"/></c></f></getTranslate>
		<setParallels set="method" line="69"><f a="parallels">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setParallels>
		<getParallels set="method" line="68"><f a=""><c path="Array"><c path="Float"/></c></f></getParallels>
		<setOrigin set="method" line="61"><f a="origin">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setOrigin>
		<getOrigin set="method" line="60"><f a=""><c path="Array"><c path="Float"/></c></f></getOrigin>
		<invert public="1" set="method" line="47"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></invert>
		<project public="1" set="method" line="37"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<_scale><c path="Float"/></_scale>
		<_translate><c path="Array"><c path="Float"/></c></_translate>
		<_parallels><c path="Array"><c path="Float"/></c></_parallels>
		<_origin><c path="Array"><c path="Float"/></c></_origin>
		<p0><c path="Float"/></p0>
		<C><c path="Float"/></C>
		<n><c path="Float"/></n>
		<lng0><c path="Float"/></lng0>
		<scale public="1" get="getScale" set="setScale"><c path="Float"/></scale>
		<translate public="1" get="getTranslate" set="setTranslate"><c path="Array"><c path="Float"/></c></translate>
		<parallels public="1" get="getParallels" set="setParallels"><c path="Array"><c path="Float"/></c></parallels>
		<origin public="1" get="getOrigin" set="setOrigin"><c path="Array"><c path="Float"/></c></origin>
		<new public="1" set="method" line="28"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * Derived from Tom Carden's Albers implementation for Protovis.
 * http://gist.github.com/476238
 * http://mathworld.wolfram.com/AlbersEqual-AreaConicProjection.html</haxe_doc>
	</class>
	<class path="thx.geo.AlbersUsa" params="" file="src/thx/geo/AlbersUsa.hx">
		<implements path="thx.geo.IProjection"/>
		<getTranslate set="method" line="93"><f a=""><c path="Array"><c path="Float"/></c></f></getTranslate>
		<setTranslate set="method" line="82"><f a="translate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setTranslate>
		<getScale set="method" line="80"><f a=""><c path="Float"/></f></getScale>
		<setScale set="method" line="70"><f a="scale">
	<c path="Float"/>
	<c path="Float"/>
</f></setScale>
		<invert public="1" set="method" line="65"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></invert>
		<project public="1" set="method" line="43"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<last><c path="String"/></last>
		<puertoRico><c path="thx.geo.Albers"/></puertoRico>
		<hawaii><c path="thx.geo.Albers"/></hawaii>
		<alaska><c path="thx.geo.Albers"/></alaska>
		<lower48><c path="thx.geo.Albers"/></lower48>
		<scale public="1" get="getScale" set="setScale"><c path="Float"/></scale>
		<translate public="1" get="getTranslate" set="setTranslate"><c path="Array"><c path="Float"/></c></translate>
		<new public="1" set="method" line="23"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * A composite projection for the United States, 960x500. The set of standard
 * parallels for each region comes from USGS, which is published here:
 * http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
 * TODO allow the composite projection to be rescaled?</haxe_doc>
	</class>
	<class path="thx.geo.Azimuthal" params="" file="src/thx/geo/Azimuthal.hx">
		<implements path="thx.geo.IProjection"/>
		<getMode set="method" line="87"><f a=""><e path="thx.geo.ProjectionMode"/></f></getMode>
		<setMode set="method" line="86"><f a="mode">
	<e path="thx.geo.ProjectionMode"/>
	<e path="thx.geo.ProjectionMode"/>
</f></setMode>
		<getScale set="method" line="85"><f a=""><c path="Float"/></f></getScale>
		<setScale set="method" line="84"><f a="scale">
	<c path="Float"/>
	<c path="Float"/>
</f></setScale>
		<setTranslate set="method" line="78"><f a="translate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setTranslate>
		<getTranslate set="method" line="77"><f a=""><c path="Array"><c path="Float"/></c></f></getTranslate>
		<setOrigin set="method" line="67"><f a="origin">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setOrigin>
		<getOrigin set="method" line="66"><f a=""><c path="Array"><c path="Float"/></c></f></getOrigin>
		<invert public="1" set="method" line="48"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></invert>
		<project public="1" set="method" line="28"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<sy0><c path="Float"/></sy0>
		<cy0><c path="Float"/></cy0>
		<y0><c path="Float"/></y0>
		<x0><c path="Float"/></x0>
		<translate public="1" get="getTranslate" set="setTranslate"><c path="Array"><c path="Float"/></c></translate>
		<scale public="1" get="getScale" set="setScale"><c path="Float"/></scale>
		<origin public="1" get="getOrigin" set="setOrigin"><c path="Array"><c path="Float"/></c></origin>
		<mode public="1" get="getMode" set="setMode"><e path="thx.geo.ProjectionMode"/></mode>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<enum path="thx.geo.ProjectionMode" params="" file="src/thx/geo/Azimuthal.hx" module="thx.geo.Azimuthal">
		<Stereographic/>
		<Orthographic/>
	</enum>
	<class path="thx.geo.Mercator" params="" file="src/thx/geo/Mercator.hx">
		<implements path="thx.geo.IProjection"/>
		<setTranslate set="method" line="44"><f a="translate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></setTranslate>
		<getTranslate set="method" line="43"><f a=""><c path="Array"><c path="Float"/></c></f></getTranslate>
		<getScale set="method" line="41"><f a=""><c path="Float"/></f></getScale>
		<setScale set="method" line="40"><f a="scale">
	<c path="Float"/>
	<c path="Float"/>
</f></setScale>
		<invert public="1" set="method" line="30"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></invert>
		<project public="1" set="method" line="20"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<translate public="1" get="getTranslate" set="setTranslate"><c path="Array"><c path="Float"/></c></translate>
		<scale public="1" get="getScale" set="setScale"><c path="Float"/></scale>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.geom.Contour" params="" file="src/thx/geom/Contour.hx">
		<contourStart set="method" line="10" static="1"><f a="grid">
	<f a=":">
		<c path="Int"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="Int"/></c>
</f></contourStart>
		<contourDx line="33" static="1"><c path="Array"><c path="Int"/></c></contourDx>
		<contourDy line="34" static="1"><c path="Array"><c path="Int"/></c></contourDy>
		<contour public="1" set="method" line="36" static="1"><f a="grid:?start">
	<f a=":">
		<c path="Int"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Array"><c path="Int"/></c></c>
</f></contour>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.geom.Polygon" params="" file="src/thx/geom/Polygon.hx">
		<polygonInside set="method" line="75" static="1"><f a="p:a:b">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="Bool"/>
</f></polygonInside>
		<polygonIntersect set="method" line="80" static="1"><f a="c:d:a:b">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></polygonIntersect>
		<clip public="1" set="method" line="49">
			<f a="subject">
				<c path="Array"><c path="Array"><c path="Float"/></c></c>
				<c path="Array"><c path="Array"><c path="Float"/></c></c>
			</f>
			<haxe_doc>* The Sutherland-Hodgman clipping algorithm.</haxe_doc>
		</clip>
		<centroid public="1" set="method" line="30"><f a="?k">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
</f></centroid>
		<area public="1" set="method" line="17"><f a=""><c path="Float"/></f></area>
		<coordinates><c path="Array"><c path="Array"><c path="Float"/></c></c></coordinates>
		<new public="1" set="method" line="12"><f a="coordinates">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.geom.layout.Chord" params="" file="src/thx/geom/layout/Chord.hx">
		<groups public="1" set="method" line="202"><f a=""><c path="Array"><t path="thx.geom.layout.ItemType"/></c></f></groups>
		<chords public="1" set="method" line="195"><f a=""><c path="Array"><t path="thx.geom.layout.ChordType"/></c></f></chords>
		<sortChords public="1" set="method" line="187"><f a="v">
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Chord"/>
</f></sortChords>
		<getSortChords public="1" set="method" line="185"><f a=""><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></f></getSortChords>
		<sortSubgroups public="1" set="method" line="178"><f a="v">
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Chord"/>
</f></sortSubgroups>
		<getSortSubgroups public="1" set="method" line="176"><f a=""><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></f></getSortSubgroups>
		<sortGroups public="1" set="method" line="168"><f a="v">
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Chord"/>
</f></sortGroups>
		<getSortGroups public="1" set="method" line="166"><f a=""><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></f></getSortGroups>
		<padding public="1" set="method" line="158"><f a="v">
	<c path="Float"/>
	<c path="thx.geom.layout.Chord"/>
</f></padding>
		<getPadding public="1" set="method" line="156"><f a=""><c path="Float"/></f></getPadding>
		<matrix public="1" set="method" line="147"><f a="x">
	<c path="Array"><c path="Array"><c path="Int"/></c></c>
	<c path="thx.geom.layout.Chord"/>
</f></matrix>
		<getMatrix public="1" set="method" line="142"><f a=""><c path="Array"><c path="Array"><c path="Int"/></c></c></f></getMatrix>
		<resort set="method" line="132"><f a=""><e path="Void"/></f></resort>
		<relayout set="method" line="25"><f a=""><e path="Void"/></f></relayout>
		<_sortChords><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></_sortChords>
		<_sortSubgroups><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></_sortSubgroups>
		<_sortGroups><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></_sortGroups>
		<_padding><c path="Float"/></_padding>
		<_n><c path="Int"/></_n>
		<_matrix><c path="Array"><c path="Array"><c path="Int"/></c></c></_matrix>
		<_groups><c path="Array"><t path="thx.geom.layout.ItemType"/></c></_groups>
		<_chords><c path="Array"><t path="thx.geom.layout.ChordType"/></c></_chords>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="thx.geom.layout.ChordType" params="" file="src/thx/geom/layout/Chord.hx" module="thx.geom.layout.Chord"><a>
	<target><t path="thx.geom.layout.ItemType"/></target>
	<source><t path="thx.geom.layout.ItemType"/></source>
</a></typedef>
	<typedef path="thx.geom.layout.ItemType" params="" file="src/thx/geom/layout/Chord.hx" module="thx.geom.layout.Chord"><a>
	<value><t path="Null"><c path="Float"/></t></value>
	<subindex><c path="Int"/></subindex>
	<startAngle><c path="Float"/></startAngle>
	<index><c path="Int"/></index>
	<endAngle><c path="Float"/></endAngle>
</a></typedef>
	<class path="thx.geom.layout._Hierarchy.IThis" params="This" file="src/thx/geom/layout/Hierarchy.hx" private="1" module="thx.geom.layout.Hierarchy">
		<This set="method" line="138"><f a=""><c path="thx.geom.layout._Hierarchy.IThis.This"/></f></This>
		<new public="1" set="method" line="137"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.geom.layout.AbstractHierarchy" params="T:This" file="src/thx/geom/layout/Hierarchy.hx" module="thx.geom.layout.Hierarchy">
		<extends path="thx.geom.layout._Hierarchy.IThis"><c path="thx.geom.layout.AbstractHierarchy.This"/></extends>
		<revalue public="1" set="method" line="130"><f a="root">
	<t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractHierarchy.T"/></t>
	<t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractHierarchy.T"/></t>
</f></revalue>
		<getValue public="1" set="method" line="126"><f a=""><f a=":">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getValue>
		<value public="1" set="method" line="121"><f a="v">
	<f a=":">
		<c path="thx.geom.layout.AbstractHierarchy.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.geom.layout.AbstractHierarchy.This"/>
</f></value>
		<getChildren public="1" set="method" line="117"><f a=""><f a=":">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
	<c path="Array"><c path="thx.geom.layout.AbstractHierarchy.T"/></c>
</f></f></getChildren>
		<children public="1" set="method" line="112"><f a="c">
	<f a=":">
		<c path="thx.geom.layout.AbstractHierarchy.T"/>
		<c path="Int"/>
		<c path="Array"><c path="thx.geom.layout.AbstractHierarchy.T"/></c>
	</f>
	<c path="thx.geom.layout.AbstractHierarchy.This"/>
</f></children>
		<getSort public="1" set="method" line="108"><f a=""><f a=":">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
</f></f></getSort>
		<sort public="1" set="method" line="103"><f a="f">
	<f a=":">
		<c path="thx.geom.layout.AbstractHierarchy.T"/>
		<c path="thx.geom.layout.AbstractHierarchy.T"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.AbstractHierarchy.This"/>
</f></sort>
		<_revalue set="method" line="87"><f a="node:depth">
	<t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractHierarchy.T"/></t>
	<c path="Int"/>
	<c path="Float"/>
</f></_revalue>
		<recurse set="method" line="57"><f a="data:depth:nodes">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
	<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractHierarchy.T"/></t></c>
	<t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractHierarchy.T"/></t>
</f></recurse>
		<hierarchy public="1" set="method" line="49"><f a="data:?i">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
	<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractHierarchy.T"/></t></c>
</f></hierarchy>
		<_value><f a=":">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_value>
		<_children><f a=":">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
	<c path="Array"><c path="thx.geom.layout.AbstractHierarchy.T"/></c>
</f></_children>
		<_sort><f a=":">
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="thx.geom.layout.AbstractHierarchy.T"/>
	<c path="Int"/>
</f></_sort>
		<new public="1" set="method" line="42"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.geom.layout.Hierarchy" params="T" file="src/thx/geom/layout/Hierarchy.hx">
		<extends path="thx.geom.layout.AbstractHierarchy">
			<c path="thx.geom.layout.Hierarchy.T"/>
			<c path="thx.geom.layout.Hierarchy"><c path="thx.geom.layout.Hierarchy.T"/></c>
		</extends>
		<nodeChildren public="1" params="T" set="method" line="15" static="1"><f a="d">
	<t path="thx.geom.layout.Node"><c path="nodeChildren.T"/></t>
	<c path="Array"><t path="thx.geom.layout.Node"><c path="nodeChildren.T"/></t></c>
</f></nodeChildren>
		<nodeValue public="1" params="T" set="method" line="19" static="1"><f a="d">
	<t path="thx.geom.layout.Node"><c path="nodeValue.T"/></t>
	<c path="Float"/>
</f></nodeValue>
		<nodeSort public="1" params="T" set="method" line="23" static="1"><f a="a:b">
	<t path="thx.geom.layout.Node"><c path="nodeSort.T"/></t>
	<t path="thx.geom.layout.Node"><c path="nodeSort.T"/></t>
	<c path="Float"/>
</f></nodeSort>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Justin Donaldson</haxe_doc>
	</class>
	<typedef path="thx.geom.layout.Node" params="T" file="src/thx/geom/layout/Hierarchy.hx" module="thx.geom.layout.Hierarchy"><a>
	<value><t path="Null"><c path="Float"/></t></value>
	<parent><t path="thx.geom.layout.Node"><c path="thx.geom.layout.Node.T"/></t></parent>
	<depth><c path="Int"/></depth>
	<data><c path="thx.geom.layout.Node.T"/></data>
	<children><c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.Node.T"/></t></c></children>
</a></typedef>
	<class path="thx.geom.layout.Pie" params="T" file="src/thx/geom/layout/Pie.hx">
		<valuef public="1" set="method" line="84"><f a="v">
	<f a=":">
		<c path="thx.geom.layout.Pie.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.geom.layout.Pie"><c path="thx.geom.layout.Pie.T"/></c>
</f></valuef>
		<getValue public="1" set="method" line="83"><f a=""><f a=":">
	<c path="thx.geom.layout.Pie.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getValue>
		<sort public="1" set="method" line="77"><f a="v">
	<f a=":">
		<c path="thx.geom.layout.Pie.T"/>
		<c path="thx.geom.layout.Pie.T"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Pie"><c path="thx.geom.layout.Pie.T"/></c>
</f></sort>
		<getSort public="1" set="method" line="76"><f a=""><f a=":">
	<c path="thx.geom.layout.Pie.T"/>
	<c path="thx.geom.layout.Pie.T"/>
	<c path="Int"/>
</f></f></getSort>
		<endAnglef public="1" set="method" line="70"><f a="v">
	<f a=":">
		<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.geom.layout.Pie"><c path="thx.geom.layout.Pie.T"/></c>
</f></endAnglef>
		<endAngle public="1" set="method" line="69"><f a="v">
	<c path="Float"/>
	<c path="thx.geom.layout.Pie"><c path="thx.geom.layout.Pie.T"/></c>
</f></endAngle>
		<getEndAngle public="1" set="method" line="68"><f a=""><f a=":">
	<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getEndAngle>
		<startAnglef public="1" set="method" line="62"><f a="v">
	<f a=":">
		<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.geom.layout.Pie"><c path="thx.geom.layout.Pie.T"/></c>
</f></startAnglef>
		<startAngle public="1" set="method" line="61"><f a="v">
	<c path="Float"/>
	<c path="thx.geom.layout.Pie"><c path="thx.geom.layout.Pie.T"/></c>
</f></startAngle>
		<getStartAngle public="1" set="method" line="60"><f a=""><f a=":">
	<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getStartAngle>
		<pie public="1" set="method" line="26"><f a="data:?i">
	<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
	<c path="Int"/>
	<c path="Array"><a>
	<value><c path="Float"/></value>
	<startAngle><c path="Float"/></startAngle>
	<endAngle><c path="Float"/></endAngle>
</a></c>
</f></pie>
		<_value><f a=":">
	<c path="thx.geom.layout.Pie.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_value>
		<_sort><f a=":">
	<c path="thx.geom.layout.Pie.T"/>
	<c path="thx.geom.layout.Pie.T"/>
	<c path="Int"/>
</f></_sort>
		<_endAngle><f a=":">
	<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
	<c path="Int"/>
	<c path="Float"/>
</f></_endAngle>
		<_startAngle><f a=":">
	<c path="Array"><c path="thx.geom.layout.Pie.T"/></c>
	<c path="Int"/>
	<c path="Float"/>
</f></_startAngle>
		<new public="1" set="method" line="18"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.geom.layout.Stack" params="" file="src/thx/geom/layout/Stack.hx">
		<getStackOrder set="method" line="70" static="1"><f a="order:data">
	<e path="thx.geom.layout.StackOrder"/>
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c></c>
	<c path="Array"><c path="Int"/></c>
</f></getStackOrder>
		<getStackOffset set="method" line="107" static="1"><f a="offset:index:data">
	<e path="thx.geom.layout.StackOffset"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c></c>
	<e path="Void"/>
</f></getStackOffset>
		<stackMaxIndex set="method" line="178" static="1"><f a="data:_">
	<c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c>
	<c path="Int"/>
	<c path="Int"/>
</f></stackMaxIndex>
		<stackReduceSum set="method" line="195" static="1"><f a="data:_">
	<c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c>
	<c path="Int"/>
	<c path="Float"/>
</f></stackReduceSum>
		<stackSum set="method" line="200" static="1"><f a="p:c:i">
	<c path="Float"/>
	<t path="thx.geom.layout._Stack.Point0"/>
	<c path="Int"/>
	<c path="Float"/>
</f></stackSum>
		<offset public="1" set="method" line="64"><f a="x">
	<e path="thx.geom.layout.StackOffset"/>
	<c path="thx.geom.layout.Stack"/>
</f></offset>
		<getOffset public="1" set="method" line="63"><f a=""><e path="thx.geom.layout.StackOffset"/></f></getOffset>
		<order public="1" set="method" line="57"><f a="x">
	<e path="thx.geom.layout.StackOrder"/>
	<c path="thx.geom.layout.Stack"/>
</f></order>
		<getOrder public="1" set="method" line="56"><f a=""><e path="thx.geom.layout.StackOrder"/></f></getOrder>
		<stack public="1" set="method" line="21"><f a="data">
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point"/></c></c>
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c></c>
</f></stack>
		<_offset><e path="thx.geom.layout.StackOffset"/></_offset>
		<_order><e path="thx.geom.layout.StackOrder"/></_order>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * @todo update to version 1.16 (from 1.11)</haxe_doc>
	</class>
	<typedef path="thx.geom.layout._Stack.Point" params="" file="src/thx/geom/layout/Stack.hx" private="1" module="thx.geom.layout.Stack"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<typedef path="thx.geom.layout._Stack.Point0" params="" file="src/thx/geom/layout/Stack.hx" private="1" module="thx.geom.layout.Stack"><a>
	<y0><c path="Float"/></y0>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<enum path="thx.geom.layout.StackOrder" params="" file="src/thx/geom/layout/Stack.hx" module="thx.geom.layout.Stack">
		<ReverseOrder/>
		<InsideOut/>
		<DefaultOrder/>
	</enum>
	<enum path="thx.geom.layout.StackOffset" params="" file="src/thx/geom/layout/Stack.hx" module="thx.geom.layout.Stack">
		<ZeroOffset/>
		<Wiggle/>
		<Silhouette/>
	</enum>
	<class path="thx.geom.layout.AbstractTree" params="T:This" file="src/thx/geom/layout/Tree.hx" module="thx.geom.layout.Tree">
		<extends path="thx.geom.layout.AbstractHierarchy">
			<c path="thx.geom.layout.AbstractTree.T"/>
			<c path="thx.geom.layout.AbstractTree.This"/>
		</extends>
		<tree public="1" set="method" line="264"><f a="d:?i">
	<c path="thx.geom.layout.AbstractTree.T"/>
	<c path="Int"/>
	<c path="Array"><t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
</f></tree>
		<secondWalk set="method" line="251"><f a="node:x">
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<c path="Float"/>
	<e path="Void"/>
</f></secondWalk>
		<firstWalk set="method" line="219"><f a="node:previousSibling">
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<e path="Void"/>
</f></firstWalk>
		<apportion set="method" line="174"><f a="node:previousSibling:ancestor">
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
</f></apportion>
		<getTreeHierarchy public="1" set="method" line="170"><f a="x">
	<unknown/>
	<f a=":">
		<c path="thx.geom.layout.AbstractTree.T"/>
		<c path="Int"/>
		<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
	</f>
</f></getTreeHierarchy>
		<treeHierarchy public="1" set="method" line="166"><f a="x">
	<f a=":">
		<c path="thx.geom.layout.AbstractTree.T"/>
		<c path="Int"/>
		<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
	</f>
	<c path="thx.geom.layout.AbstractTree">
		<c path="thx.geom.layout.AbstractTree.T"/>
		<c path="thx.geom.layout.AbstractTree.This"/>
	</c>
</f></treeHierarchy>
		<getSize public="1" set="method" line="162"><f a="x">
	<unknown/>
	<c path="Array"><c path="Float"/></c>
</f></getSize>
		<size public="1" set="method" line="158"><f a="x">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.geom.layout.AbstractTree">
		<c path="thx.geom.layout.AbstractTree.T"/>
		<c path="thx.geom.layout.AbstractTree.This"/>
	</c>
</f></size>
		<getSeparation public="1" set="method" line="154"><f a="x">
	<unknown/>
	<f a=":">
		<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
		<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
		<c path="Float"/>
	</f>
</f></getSeparation>
		<separation public="1" set="method" line="149"><f a="x">
	<f a=":">
		<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
		<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
		<c path="Float"/>
	</f>
	<c path="thx.geom.layout.AbstractTree">
		<c path="thx.geom.layout.AbstractTree.T"/>
		<c path="thx.geom.layout.AbstractTree.This"/>
	</c>
</f></separation>
		<getLinks public="1" set="method" line="145"><f a="x">
	<unknown/>
	<f a="">
		<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
		<c path="Array"><t path="thx.geom.layout.Link"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
	</f>
</f></getLinks>
		<links public="1" set="method" line="141"><f a="x">
	<f a="">
		<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
		<c path="Array"><t path="thx.geom.layout.Link"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
	</f>
	<c path="thx.geom.layout.AbstractTree">
		<c path="thx.geom.layout.AbstractTree.T"/>
		<c path="thx.geom.layout.AbstractTree.This"/>
	</c>
</f></links>
		<_treeHierarchy><f a=":">
	<c path="thx.geom.layout.AbstractTree.T"/>
	<c path="Int"/>
	<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
</f></_treeHierarchy>
		<_links><f a="">
	<c path="Array"><t path="thx.geom.layout.Node"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
	<c path="Array"><t path="thx.geom.layout.Link"><c path="thx.geom.layout.AbstractTree.T"/></t></c>
</f></_links>
		<_size><c path="Array"><c path="Float"/></c></_size>
		<_separation><f a=":">
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<c path="Float"/>
</f></_separation>
		<new public="1" set="method" line="135"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.geom.layout.Tree" params="T" file="src/thx/geom/layout/Tree.hx">
		<extends path="thx.geom.layout.AbstractTree">
			<c path="thx.geom.layout.Tree.T"/>
			<c path="thx.geom.layout.Tree"><c path="thx.geom.layout.Tree.T"/></c>
		</extends>
		<treeLinks public="1" params="T" set="method" line="18" static="1"><f a="nodes">
	<c path="Array"><t path="thx.geom.layout.TreeNode"><c path="treeLinks.T"/></t></c>
	<c path="Array"><t path="thx.geom.layout.SourceTarget"><t path="thx.geom.layout.TreeNode"><c path="treeLinks.T"/></t></t></c>
</f></treeLinks>
		<treeLinkDiagonal public="1" set="method" line="30" static="1"><f a=""><c path="thx.svg.Diagonal"><t path="thx.geom.layout.SourceTarget"><t path="thx.geom.layout.TreeNode"><d/></t></t></c></f></treeLinkDiagonal>
		<treeSeparation public="1" params="T" set="method" line="42" static="1"><f a="a:b">
	<t path="thx.geom.layout.TreeNode"><c path="treeSeparation.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="treeSeparation.T"/></t>
	<c path="Int"/>
</f></treeSeparation>
		<left public="1" params="T" set="method" line="49" static="1"><f a="node">
	<t path="thx.geom.layout.TreeNode"><c path="left.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="left.T"/></t>
</f></left>
		<right public="1" params="T" set="method" line="52" static="1"><f a="node">
	<t path="thx.geom.layout.TreeNode"><c path="right.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="right.T"/></t>
</f></right>
		<search public="1" params="T" set="method" line="55" static="1"><f a="node:compare">
	<t path="thx.geom.layout.TreeNode"><c path="search.T"/></t>
	<f a=":">
		<t path="thx.geom.layout.TreeNode"><c path="search.T"/></t>
		<t path="thx.geom.layout.TreeNode"><c path="search.T"/></t>
		<c path="Float"/>
	</f>
	<t path="thx.geom.layout.TreeNode"><c path="search.T"/></t>
</f></search>
		<rightmost public="1" params="T" set="method" line="70" static="1"><f a="a:b">
	<t path="thx.geom.layout.TreeNode"><c path="rightmost.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="rightmost.T"/></t>
	<c path="Float"/>
</f></rightmost>
		<leftmost public="1" params="T" set="method" line="73" static="1"><f a="a:b">
	<t path="thx.geom.layout.TreeNode"><c path="leftmost.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="leftmost.T"/></t>
	<c path="Float"/>
</f></leftmost>
		<deepest public="1" params="T" set="method" line="76" static="1"><f a="a:b">
	<t path="thx.geom.layout.TreeNode"><c path="deepest.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="deepest.T"/></t>
	<c path="Int"/>
</f></deepest>
		<visit public="1" params="T" set="method" line="79" static="1"><f a="node:previousSibling:callbackf">
	<t path="thx.geom.layout.TreeNode"><c path="visit.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="visit.T"/></t>
	<f a=":">
		<t path="thx.geom.layout.TreeNode"><c path="visit.T"/></t>
		<t path="thx.geom.layout.TreeNode"><c path="visit.T"/></t>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></visit>
		<visitAfter public="1" set="method" line="94" static="1"><f a="node:callbackf">
	<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
	<f a=":">
		<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
		<t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.AbstractTree.T"/></t>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></visitAfter>
		<shift public="1" params="T" set="method" line="97" static="1"><f a="node">
	<t path="thx.geom.layout.TreeNode"><c path="shift.T"/></t>
	<e path="Void"/>
</f></shift>
		<move public="1" params="T" set="method" line="110" static="1"><f a="ancestor:node:shift">
	<t path="thx.geom.layout.TreeNode"><c path="move.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="move.T"/></t>
	<c path="Float"/>
	<e path="Void"/>
</f></move>
		<ancestor public="1" params="T" set="method" line="120" static="1"><f a="vim:node:ancestor">
	<t path="thx.geom.layout.TreeNode"><c path="ancestor.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="ancestor.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="ancestor.T"/></t>
	<t path="thx.geom.layout.TreeNode"><c path="ancestor.T"/></t>
</f></ancestor>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Justin Donaldson</haxe_doc>
	</class>
	<typedef path="thx.geom.layout.Link" params="T" file="src/thx/geom/layout/Tree.hx" module="thx.geom.layout.Tree"><a>
	<parent><t path="thx.geom.layout.Node"><c path="thx.geom.layout.Link.T"/></t></parent>
	<child><t path="thx.geom.layout.Node"><c path="thx.geom.layout.Link.T"/></t></child>
</a></typedef>
	<typedef path="thx.geom.layout.SourceTarget" params="T" file="src/thx/geom/layout/Tree.hx" module="thx.geom.layout.Tree"><a>
	<target><c path="thx.geom.layout.SourceTarget.T"/></target>
	<source><c path="thx.geom.layout.SourceTarget.T"/></source>
</a></typedef>
	<typedef path="thx.geom.layout.PosType" params="" file="src/thx/geom/layout/Tree.hx" module="thx.geom.layout.Tree"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<typedef path="thx.geom.layout.TreeNode" params="T" file="src/thx/geom/layout/Tree.hx" module="thx.geom.layout.Tree"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
	<value><c path="Float"/></value>
	<parent><t path="Null"><t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.TreeNode.T"/></t></t></parent>
	<depth><c path="Int"/></depth>
	<data><c path="thx.geom.layout.TreeNode.T"/></data>
	<children><c path="Array"><t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.TreeNode.T"/></t></c></children>
	<ancestor><t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.TreeNode.T"/></t></ancestor>
	<_tree><t path="thx.geom.layout.TreeData"><c path="thx.geom.layout.TreeNode.T"/></t></_tree>
</a></typedef>
	<typedef path="thx.geom.layout.TreeData" params="T" file="src/thx/geom/layout/Tree.hx" module="thx.geom.layout.Tree"><a>
	<thread><t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.TreeData.T"/></t></thread>
	<shift><c path="Float"/></shift>
	<prelim><c path="Float"/></prelim>
	<number><c path="Float"/></number>
	<mod><c path="Float"/></mod>
	<change><c path="Float"/></change>
	<ancestor><t path="thx.geom.layout.TreeNode"><c path="thx.geom.layout.TreeData.T"/></t></ancestor>
</a></typedef>
	<typedef path="thx.graph.Edge" params="" file="src/thx/graph/Edge.hx"><a>
	<b><c path="String"/></b>
	<a><c path="String"/></a>
</a></typedef>
	<class path="thx.graph.EdgeSplitter" params="" file="src/thx/graph/EdgeSplitter.hx">
		<split public="1" params="TNodeData:TEdgeData" set="method" line="9">
			<f a="layout:splitted:?dataf:?edgef">
				<c path="thx.graph.GraphLayout">
					<c path="split.TNodeData"/>
					<c path="split.TEdgeData"/>
				</c>
				<c path="Array"><c path="Array"><c path="thx.graph.GEdge">
	<c path="split.TNodeData"/>
	<c path="split.TEdgeData"/>
</c></c></c>
				<f a="">
					<c path="thx.graph.GEdge">
						<c path="split.TNodeData"/>
						<c path="split.TEdgeData"/>
					</c>
					<c path="split.TNodeData"/>
				</f>
				<f a="::">
					<c path="thx.graph.GEdge">
						<c path="split.TNodeData"/>
						<c path="split.TEdgeData"/>
					</c>
					<c path="thx.graph.GEdge">
						<c path="split.TNodeData"/>
						<c path="split.TEdgeData"/>
					</c>
					<c path="Int"/>
					<e path="Void"/>
				</f>
				<c path="thx.graph.GraphLayout">
					<c path="split.TNodeData"/>
					<c path="split.TEdgeData"/>
				</c>
			</f>
			<meta/>
		</split>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.graph.GraphElement" params="TData:TNodeData:TEdgeData" file="src/thx/graph/GraphElement.hx">
		<friendDestroy public="1" params="TData:TNodeData:TEdgeData" get="inline" set="null" line="23" static="1"><f a="item">
	<c path="thx.graph.GraphElement">
		<c path="friendDestroy.TData"/>
		<c path="friendDestroy.TNodeData"/>
		<c path="friendDestroy.TEdgeData"/>
	</c>
	<t path="thx.graph.FriendDestroy"/>
</f></friendDestroy>
		<destroyed public="1" set="method" line="21"><f a=""><e path="Bool"/></f></destroyed>
		<destroy set="method" line="15">
			<f a=""><e path="Void"/></f>
			<meta/>
		</destroy>
		<data public="1" set="null"><t path="Null"><c path="thx.graph.GraphElement.TData"/></t></data>
		<id public="1" set="null"><c path="Int"/></id>
		<graph public="1" set="null"><c path="thx.graph.Graph">
	<c path="thx.graph.GraphElement.TNodeData"/>
	<c path="thx.graph.GraphElement.TEdgeData"/>
</c></graph>
		<new set="method" line="8"><f a="graph:id:?data">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GraphElement.TNodeData"/>
		<c path="thx.graph.GraphElement.TEdgeData"/>
	</c>
	<c path="Int"/>
	<c path="thx.graph.GraphElement.TData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.graph.GEdge" params="TNodeData:TEdgeData" file="src/thx/graph/GEdge.hx">
		<extends path="thx.graph.GraphElement">
			<c path="thx.graph.GEdge.TEdgeData"/>
			<c path="thx.graph.GEdge.TNodeData"/>
			<c path="thx.graph.GEdge.TEdgeData"/>
		</extends>
		<create public="1" params="TNodeData:TEdgeData" set="method" line="7" static="1"><f a="graph:id:tail:head:weight:?data">
	<c path="thx.graph.Graph">
		<c path="create.TNodeData"/>
		<c path="create.TEdgeData"/>
	</c>
	<c path="Int"/>
	<c path="thx.graph.GNode">
		<c path="create.TNodeData"/>
		<c path="create.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="create.TNodeData"/>
		<c path="create.TEdgeData"/>
	</c>
	<c path="Float"/>
	<c path="create.TEdgeData"/>
	<c path="thx.graph.GEdge">
		<c path="create.TNodeData"/>
		<c path="create.TEdgeData"/>
	</c>
</f></create>
		<toString public="1" set="method" line="81"><f a=""><c path="String"/></f></toString>
		<friendRemove get="inline" set="null" line="79"><f a=""><a><_remove set="method"><f a="edge">
	<c path="thx.graph.GEdge">
		<c path="thx.graph.GEdge.TNodeData"/>
		<c path="thx.graph.GEdge.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></_remove></a></f></friendRemove>
		<remove public="1" get="inline" set="null" line="77"><f a=""><e path="Void"/></f></remove>
		<invert public="1" set="method" line="70"><f a=""><c path="thx.graph.GEdge">
	<c path="thx.graph.GEdge.TNodeData"/>
	<c path="thx.graph.GEdge.TEdgeData"/>
</c></f></invert>
		<other public="1" set="method" line="58"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GEdge.TNodeData"/>
		<c path="thx.graph.GEdge.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GEdge.TNodeData"/>
		<c path="thx.graph.GEdge.TEdgeData"/>
	</c>
</f></other>
		<split public="1" set="method" line="31"><f a="?times:?dataf:?edgef">
	<c path="Int"/>
	<f a="">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GEdge.TNodeData"/>
			<c path="thx.graph.GEdge.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge.TNodeData"/>
	</f>
	<f a="::">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GEdge.TNodeData"/>
			<c path="thx.graph.GEdge.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GEdge.TNodeData"/>
			<c path="thx.graph.GEdge.TEdgeData"/>
		</c>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.GEdge.TNodeData"/>
	<c path="thx.graph.GEdge.TEdgeData"/>
</c></c>
</f></split>
		<destroy set="method" line="24" override="1"><f a=""><e path="Void"/></f></destroy>
		<weight public="1"><c path="Float"/></weight>
		<head public="1" set="null"><c path="thx.graph.GNode">
	<c path="thx.graph.GEdge.TNodeData"/>
	<c path="thx.graph.GEdge.TEdgeData"/>
</c></head>
		<tail public="1" set="null"><c path="thx.graph.GNode">
	<c path="thx.graph.GEdge.TNodeData"/>
	<c path="thx.graph.GEdge.TEdgeData"/>
</c></tail>
		<new set="method" line="16"><f a="graph:id:tail:head:weight:?data">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GEdge.TNodeData"/>
		<c path="thx.graph.GEdge.TEdgeData"/>
	</c>
	<c path="Int"/>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GEdge.TNodeData"/>
		<c path="thx.graph.GEdge.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GEdge.TNodeData"/>
		<c path="thx.graph.GEdge.TEdgeData"/>
	</c>
	<c path="Float"/>
	<c path="thx.graph.GEdge.TEdgeData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.graph.GNode" params="TNodeData:TEdgeData" file="src/thx/graph/GNode.hx">
		<extends path="thx.graph.GraphElement">
			<c path="thx.graph.GNode.TNodeData"/>
			<c path="thx.graph.GNode.TNodeData"/>
			<c path="thx.graph.GNode.TEdgeData"/>
		</extends>
		<create public="1" params="TNodeData:TEdgeData" set="method" line="9" static="1"><f a="graph:id:?data">
	<c path="thx.graph.Graph">
		<c path="create.TNodeData"/>
		<c path="create.TEdgeData"/>
	</c>
	<c path="Int"/>
	<c path="create.TNodeData"/>
	<c path="thx.graph.GNode">
		<c path="create.TNodeData"/>
		<c path="create.TEdgeData"/>
	</c>
</f></create>
		<toString public="1" set="method" line="156"><f a=""><c path="String"/></f></toString>
		<friendEdges get="inline" set="null" line="154"><f a=""><t path="thx.graph.FriendGraphEdges">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</t></f></friendEdges>
		<friendRemove get="inline" set="null" line="152"><f a=""><a><_remove set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></_remove></a></f></friendRemove>
		<remove public="1" get="inline" set="null" line="150"><f a=""><e path="Void"/></f></remove>
		<negativeCount public="1" get="inline" set="null" line="146"><f a=""><c path="Int"/></f></negativeCount>
		<positiveCount public="1" get="inline" set="null" line="141"><f a=""><c path="Int"/></f></positiveCount>
		<edgeCount public="1" get="inline" set="null" line="136"><f a=""><c path="Int"/></f></edgeCount>
		<sortNegatives public="1" get="inline" set="null" line="131"><f a="sortf">
	<f a=":">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GNode.TNodeData"/>
			<c path="thx.graph.GNode.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GNode.TNodeData"/>
			<c path="thx.graph.GNode.TEdgeData"/>
		</c>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sortNegatives>
		<sortPositives public="1" get="inline" set="null" line="126"><f a="sortf">
	<f a=":">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GNode.TNodeData"/>
			<c path="thx.graph.GNode.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GNode.TNodeData"/>
			<c path="thx.graph.GNode.TEdgeData"/>
		</c>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sortPositives>
		<negatives public="1" get="inline" set="null" line="121"><f a=""><t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t></f></negatives>
		<positives public="1" get="inline" set="null" line="116"><f a=""><t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t></f></positives>
		<edges public="1" get="inline" set="null" line="111"><f a=""><t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t></f></edges>
		<predecessorBy public="1" set="method" line="104"><f a="successor">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<t path="Null"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t>
</f></predecessorBy>
		<successorBy public="1" set="method" line="97"><f a="predecessor">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<t path="Null"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t>
</f></successorBy>
		<isPredecessorOf public="1" set="method" line="90"><f a="successor">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<e path="Bool"/>
</f></isPredecessorOf>
		<isSuccessorOf public="1" set="method" line="85"><f a="predecessor">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<e path="Bool"/>
</f></isSuccessorOf>
		<isIsolated public="1" set="method" line="80"><f a=""><e path="Bool"/></f></isIsolated>
		<isSink public="1" set="method" line="75"><f a=""><e path="Bool"/></f></isSink>
		<isSource public="1" set="method" line="70"><f a=""><e path="Bool"/></f></isSource>
		<_weight set="method" line="62"><f a="it">
	<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t>
	<c path="Float"/>
</f></_weight>
		<negativeWeight public="1" set="method" line="57"><f a=""><c path="Float"/></f></negativeWeight>
		<positiveWeight public="1" set="method" line="52"><f a=""><c path="Float"/></f></positiveWeight>
		<connectedBy public="1" set="method" line="38"><f a="other">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<t path="Null"><c path="thx.graph.GEdge">
	<c path="thx.graph.GNode.TNodeData"/>
	<c path="thx.graph.GNode.TEdgeData"/>
</c></t>
</f></connectedBy>
		<isConnectedTo public="1" set="method" line="27"><f a="other">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<e path="Bool"/>
</f></isConnectedTo>
		<destroy set="method" line="21" override="1"><f a=""><e path="Void"/></f></destroy>
		<new set="method" line="15"><f a="graph:id:?data">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GNode.TNodeData"/>
		<c path="thx.graph.GNode.TEdgeData"/>
	</c>
	<c path="Int"/>
	<c path="thx.graph.GNode.TNodeData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.graph.Graph" params="TNodeData:TEdgeData" file="src/thx/graph/Graph.hx">
		<friendNodes params="TNodeData:TEdgeData" get="inline" set="null" line="146" static="1"><f a="friend">
	<c path="thx.graph.GraphNodes">
		<c path="friendNodes.TNodeData"/>
		<c path="friendNodes.TEdgeData"/>
	</c>
	<t path="thx.graph.FriendNodesCopy">
		<c path="friendNodes.TNodeData"/>
		<c path="friendNodes.TEdgeData"/>
	</t>
</f></friendNodes>
		<friendEdges params="TNodeData:TEdgeData" get="inline" set="null" line="147" static="1"><f a="friend">
	<c path="thx.graph.GraphEdges">
		<c path="friendEdges.TNodeData"/>
		<c path="friendEdges.TEdgeData"/>
	</c>
	<t path="thx.graph.FriendEdgesCopy">
		<c path="friendEdges.TNodeData"/>
		<c path="friendEdges.TEdgeData"/>
	</t>
</f></friendEdges>
		<toString public="1" set="method" line="144"><f a=""><c path="String"/></f></toString>
		<pickPath set="method" line="127"><f a="paths:weighted">
	<c path="Array"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></c>
	<e path="Bool"/>
	<t path="Null"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></t>
</f></pickPath>
		<directedPath public="1" set="method" line="122"><f a="a:b:?weighted">
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<e path="Bool"/>
	<t path="Null"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></t>
</f></directedPath>
		<directedPaths public="1" set="method" line="97"><f a="a:b">
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<c path="Array"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></c>
</f></directedPaths>
		<path public="1" set="method" line="92"><f a="a:b:?weighted">
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<e path="Bool"/>
	<t path="Null"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></t>
</f></path>
		<paths public="1" set="method" line="67"><f a="a:b">
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="thx.graph.Graph.TEdgeData"/>
	</c>
	<c path="Array"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></c>
</f></paths>
		<findIsolated public="1" set="method" line="62"><f a=""><t path="Null"><c path="thx.graph.GNode">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></t></f></findIsolated>
		<findIsolateds public="1" set="method" line="57"><f a=""><c path="Array"><c path="thx.graph.GNode">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></f></findIsolateds>
		<findSource public="1" set="method" line="52"><f a=""><t path="Null"><c path="thx.graph.GNode">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></t></f></findSource>
		<findSources public="1" set="method" line="47"><f a=""><c path="Array"><c path="thx.graph.GNode">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></f></findSources>
		<findSink public="1" set="method" line="42"><f a=""><t path="Null"><c path="thx.graph.GNode">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></t></f></findSink>
		<findSinks public="1" set="method" line="37"><f a=""><c path="Array"><c path="thx.graph.GNode">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></c></f></findSinks>
		<clone public="1" set="method" line="29"><f a=""><c path="thx.graph.Graph">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></f></clone>
		<clear public="1" set="method" line="23"><f a=""><e path="Void"/></f></clear>
		<empty public="1" get="inline" set="null" line="18"><f a=""><e path="Bool"/></f></empty>
		<edges public="1" set="null"><c path="thx.graph.GraphEdges">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></edges>
		<nodes public="1" set="null"><c path="thx.graph.GraphNodes">
	<c path="thx.graph.Graph.TNodeData"/>
	<c path="thx.graph.Graph.TEdgeData"/>
</c></nodes>
		<new public="1" set="method" line="12"><f a="?nodeidf:?edgeidf">
	<f a="">
		<c path="thx.graph.Graph.TNodeData"/>
		<c path="String"/>
	</f>
	<f a="">
		<c path="thx.graph.Graph.TEdgeData"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="thx.graph.FriendNodesCopy" params="TNodeData:TEdgeData" file="src/thx/graph/Graph.hx" module="thx.graph.Graph"><a><copyTo set="method"><f a="g">
	<c path="thx.graph.Graph">
		<c path="thx.graph.FriendNodesCopy.TNodeData"/>
		<c path="thx.graph.FriendNodesCopy.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphNodes">
		<c path="thx.graph.FriendNodesCopy.TNodeData"/>
		<c path="thx.graph.FriendNodesCopy.TEdgeData"/>
	</c>
</f></copyTo></a></typedef>
	<typedef path="thx.graph.FriendEdgesCopy" params="TNodeData:TEdgeData" file="src/thx/graph/Graph.hx" module="thx.graph.Graph"><a><copyTo set="method"><f a="g">
	<c path="thx.graph.Graph">
		<c path="thx.graph.FriendEdgesCopy.TNodeData"/>
		<c path="thx.graph.FriendEdgesCopy.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphEdges">
		<c path="thx.graph.FriendEdgesCopy.TNodeData"/>
		<c path="thx.graph.FriendEdgesCopy.TEdgeData"/>
	</c>
</f></copyTo></a></typedef>
	<class path="thx.graph.GraphCollection" params="TNodeData:TEdgeData:TData:TListItem" file="src/thx/graph/GraphCollection.hx">
		<toString public="1" set="method" line="78"><f a=""><c path="String"/></f></toString>
		<iterator public="1" get="inline" set="null" line="76">
			<f a=""><t path="Iterator"><c path="thx.graph.GraphCollection.TListItem"/></t></f>
			<meta/>
		</iterator>
		<collectionRemove set="dynamic" line="68"><f a="item">
	<c path="thx.graph.GraphCollection.TListItem"/>
	<e path="Void"/>
</f></collectionRemove>
		<collectionCreate set="dynamic" line="60"><f a="item">
	<c path="thx.graph.GraphCollection.TListItem"/>
	<e path="Void"/>
</f></collectionCreate>
		<get_length get="inline" set="null" line="58"><f a=""><c path="Int"/></f></get_length>
		<has public="1" set="method" line="56"><f a="item">
	<c path="thx.graph.GraphCollection.TListItem"/>
	<e path="Bool"/>
</f></has>
		<get public="1" set="method" line="54"><f a="id">
	<c path="Int"/>
	<c path="thx.graph.GraphCollection.TListItem"/>
</f></get>
		<getById public="1" set="method" line="49"><f a="id">
	<c path="String"/>
	<c path="thx.graph.GraphCollection.TListItem"/>
</f></getById>
		<length public="1" get="get_length" set="null"><c path="Int"/></length>
		<_map><c path="Hash"><c path="thx.graph.GraphCollection.TListItem"/></c></_map>
		<idf><f a="">
	<c path="thx.graph.GraphCollection.TData"/>
	<c path="String"/>
</f></idf>
		<nextid><c path="Int"/></nextid>
		<collection><c path="IntHash"><c path="thx.graph.GraphCollection.TListItem"/></c></collection>
		<graph><c path="thx.graph.Graph">
	<c path="thx.graph.GraphCollection.TNodeData"/>
	<c path="thx.graph.GraphCollection.TEdgeData"/>
</c></graph>
		<new set="method" line="21"><f a="graph:?idf">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GraphCollection.TNodeData"/>
		<c path="thx.graph.GraphCollection.TEdgeData"/>
	</c>
	<f a="">
		<c path="thx.graph.GraphCollection.TData"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.graph.GraphEdges" params="TNodeData:TEdgeData" file="src/thx/graph/GraphEdges.hx">
		<extends path="thx.graph.GraphCollection">
			<c path="thx.graph.GraphEdges.TNodeData"/>
			<c path="thx.graph.GraphEdges.TEdgeData"/>
			<c path="thx.graph.GraphEdges.TEdgeData"/>
			<c path="thx.graph.GEdge">
				<c path="thx.graph.GraphEdges.TNodeData"/>
				<c path="thx.graph.GraphEdges.TEdgeData"/>
			</c>
		</extends>
		<newInstance public="1" params="TNodeData:TEdgeData" set="method" line="8" static="1"><f a="graph:?edgeidf">
	<c path="thx.graph.Graph">
		<c path="newInstance.TNodeData"/>
		<c path="newInstance.TEdgeData"/>
	</c>
	<f a="">
		<c path="newInstance.TEdgeData"/>
		<c path="String"/>
	</f>
	<c path="thx.graph.GraphEdges">
		<c path="newInstance.TNodeData"/>
		<c path="newInstance.TEdgeData"/>
	</c>
</f></newInstance>
		<toString public="1" set="method" line="195" override="1"><f a=""><c path="String"/></f></toString>
		<removeConnection set="method" line="185"><f a="edgeid:nodeid:connections">
	<c path="Int"/>
	<c path="Int"/>
	<c path="IntHash"><c path="Array"><c path="Int"/></c></c>
	<e path="Void"/>
</f></removeConnection>
		<connections set="method" line="177"><f a="id:connections">
	<c path="Int"/>
	<c path="IntHash"><c path="Array"><c path="Int"/></c></c>
	<t path="Null"><c path="Array"><c path="Int"/></c></t>
</f></connections>
		<clear public="1" set="method" line="170"><f a=""><e path="Void"/></f></clear>
		<_unlink set="method" line="154"><f a="node:connections">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<c path="IntHash"><c path="Array"><c path="Int"/></c></c>
	<e path="Void"/>
</f></_unlink>
		<unlinkNegatives set="method" line="147"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></unlinkNegatives>
		<unlinkPositives set="method" line="140"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></unlinkPositives>
		<_edges set="method" line="135"><f a="id:collection">
	<c path="Int"/>
	<c path="IntHash"><c path="Array"><c path="Int"/></c></c>
	<c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.GraphEdges.TNodeData"/>
	<c path="thx.graph.GraphEdges.TEdgeData"/>
</c></c>
</f></_edges>
		<_edgeids set="method" line="127"><f a="id:collection">
	<c path="Int"/>
	<c path="IntHash"><c path="Array"><c path="Int"/></c></c>
	<t path="Null"><c path="Array"><c path="Int"/></c></t>
</f></_edgeids>
		<edgeCount set="method" line="122">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<c path="Int"/>
			</f>
			<meta/>
		</edgeCount>
		<negativeCount set="method" line="117">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<c path="Int"/>
			</f>
			<meta/>
		</negativeCount>
		<positiveCount set="method" line="112">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<c path="Int"/>
			</f>
			<meta/>
		</positiveCount>
		<edges set="method" line="107">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GraphEdges.TNodeData"/>
	<c path="thx.graph.GraphEdges.TEdgeData"/>
</c></t>
			</f>
			<meta/>
		</edges>
		<_sort set="method" line="95"><f a="node:sortf:collection">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<f a=":">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GraphEdges.TNodeData"/>
			<c path="thx.graph.GraphEdges.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.GraphEdges.TNodeData"/>
			<c path="thx.graph.GraphEdges.TEdgeData"/>
		</c>
		<c path="Int"/>
	</f>
	<c path="IntHash"><c path="Array"><c path="Int"/></c></c>
	<e path="Void"/>
</f></_sort>
		<sortNegatives set="method" line="90">
			<f a="node:sortf">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<f a=":">
					<c path="thx.graph.GEdge">
						<c path="thx.graph.GraphEdges.TNodeData"/>
						<c path="thx.graph.GraphEdges.TEdgeData"/>
					</c>
					<c path="thx.graph.GEdge">
						<c path="thx.graph.GraphEdges.TNodeData"/>
						<c path="thx.graph.GraphEdges.TEdgeData"/>
					</c>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<meta/>
		</sortNegatives>
		<sortPositives set="method" line="85">
			<f a="node:sortf">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<f a=":">
					<c path="thx.graph.GEdge">
						<c path="thx.graph.GraphEdges.TNodeData"/>
						<c path="thx.graph.GraphEdges.TEdgeData"/>
					</c>
					<c path="thx.graph.GEdge">
						<c path="thx.graph.GraphEdges.TNodeData"/>
						<c path="thx.graph.GraphEdges.TEdgeData"/>
					</c>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<meta/>
		</sortPositives>
		<negatives set="method" line="80">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GraphEdges.TNodeData"/>
	<c path="thx.graph.GraphEdges.TEdgeData"/>
</c></t>
			</f>
			<meta/>
		</negatives>
		<positives set="method" line="75">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.GraphEdges.TNodeData"/>
	<c path="thx.graph.GraphEdges.TEdgeData"/>
</c></t>
			</f>
			<meta/>
		</positives>
		<unlink public="1" set="method" line="67"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></unlink>
		<_remove set="method" line="59">
			<f a="edge">
				<c path="thx.graph.GEdge">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<e path="Void"/>
			</f>
			<meta/>
		</_remove>
		<remove public="1" set="method" line="52"><f a="edge">
	<c path="thx.graph.GEdge">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></remove>
		<_create set="method" line="43"><f a="id:tail:head:weight:?data">
	<c path="Int"/>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<c path="Float"/>
	<c path="thx.graph.GraphEdges.TEdgeData"/>
	<c path="thx.graph.GEdge">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
</f></_create>
		<create public="1" set="method" line="36"><f a="tail:head:?weight:?data">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<c path="Float"/>
	<c path="thx.graph.GraphEdges.TEdgeData"/>
	<c path="thx.graph.GEdge">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
</f></create>
		<copyTo set="method" line="20">
			<f a="graph">
				<c path="thx.graph.Graph">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
				<c path="thx.graph.GraphEdges">
					<c path="thx.graph.GraphEdges.TNodeData"/>
					<c path="thx.graph.GraphEdges.TEdgeData"/>
				</c>
			</f>
			<meta/>
		</copyTo>
		<edgesn><c path="IntHash"><c path="Array"><c path="Int"/></c></c></edgesn>
		<edgesp><c path="IntHash"><c path="Array"><c path="Int"/></c></c></edgesp>
		<new set="method" line="13"><f a="graph:?edgeidf">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GraphEdges.TNodeData"/>
		<c path="thx.graph.GraphEdges.TEdgeData"/>
	</c>
	<f a="">
		<c path="thx.graph.GraphEdges.TEdgeData"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="thx.graph.FriendGraphEdges" params="TNodeData:TEdgeData" file="src/thx/graph/GraphEdges.hx" module="thx.graph.GraphEdges"><a>
	<sortPositives set="method"><f a="node:sortf">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<f a=":">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.FriendGraphEdges.TNodeData"/>
			<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.FriendGraphEdges.TNodeData"/>
			<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
		</c>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sortPositives>
	<sortNegatives set="method"><f a="node:sortf">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<f a=":">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.FriendGraphEdges.TNodeData"/>
			<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.FriendGraphEdges.TNodeData"/>
			<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
		</c>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sortNegatives>
	<positives set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.FriendGraphEdges.TNodeData"/>
	<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
</c></t>
</f></positives>
	<positiveCount set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<c path="Int"/>
</f></positiveCount>
	<negatives set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.FriendGraphEdges.TNodeData"/>
	<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
</c></t>
</f></negatives>
	<negativeCount set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<c path="Int"/>
</f></negativeCount>
	<edges set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<t path="Iterator"><c path="thx.graph.GEdge">
	<c path="thx.graph.FriendGraphEdges.TNodeData"/>
	<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
</c></t>
</f></edges>
	<edgeCount set="method"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.FriendGraphEdges.TNodeData"/>
		<c path="thx.graph.FriendGraphEdges.TEdgeData"/>
	</c>
	<c path="Int"/>
</f></edgeCount>
</a></typedef>
	<typedef path="thx.graph.FriendDestroy" params="" file="src/thx/graph/GraphElement.hx" module="thx.graph.GraphElement"><a><destroy set="method"><f a=""><e path="Void"/></f></destroy></a></typedef>
	<class path="thx.graph.GraphLayout" params="TNodeData:TEdgeData" file="src/thx/graph/GraphLayout.hx">
		<arrayCrossings public="1" params="TNodeData:TEdgeData" set="method" line="98" static="1"><f a="graph:a:b">
	<c path="thx.graph.Graph">
		<c path="arrayCrossings.TNodeData"/>
		<c path="arrayCrossings.TEdgeData"/>
	</c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
</f></arrayCrossings>
		<toString public="1" set="method" line="144"><f a=""><c path="String"/></f></toString>
		<_nodeRemove set="method" line="135"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphLayout.TNodeData"/>
		<c path="thx.graph.GraphLayout.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></_nodeRemove>
		<maxCells public="1" set="method" line="130"><f a=""><c path="Int"/></f></maxCells>
		<crossings public="1" set="method" line="90"><f a=""><c path="Int"/></f></crossings>
		<layers public="1" set="method" line="82"><f a=""><c path="Array"><c path="Array"><c path="Int"/></c></c></f></layers>
		<layer public="1" set="method" line="77"><f a="i">
	<c path="Int"/>
	<c path="Array"><c path="thx.graph.GNode">
	<c path="thx.graph.GraphLayout.TNodeData"/>
	<c path="thx.graph.GraphLayout.TEdgeData"/>
</c></c>
</f></layer>
		<nodeAt public="1" set="method" line="66"><f a="layer:position">
	<c path="Int"/>
	<c path="Int"/>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphLayout.TNodeData"/>
		<c path="thx.graph.GraphLayout.TEdgeData"/>
	</c>
</f></nodeAt>
		<cell public="1" set="method" line="56"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphLayout.TNodeData"/>
		<c path="thx.graph.GraphLayout.TEdgeData"/>
	</c>
	<c path="thx.graph.LayoutCell"/>
</f></cell>
		<each public="1" set="method" line="41"><f a="f">
	<f a=":">
		<c path="thx.graph.LayoutCell"/>
		<c path="thx.graph.GNode">
			<c path="thx.graph.GraphLayout.TNodeData"/>
			<c path="thx.graph.GraphLayout.TEdgeData"/>
		</c>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<clone public="1" set="method" line="36"><f a=""><c path="thx.graph.GraphLayout">
	<c path="thx.graph.GraphLayout.TNodeData"/>
	<c path="thx.graph.GraphLayout.TEdgeData"/>
</c></f></clone>
		<_updateMap set="method" line="28"><f a=""><e path="Void"/></f></_updateMap>
		<friendCell><t path="thx.graph.FriendLayoutCell"/></friendCell>
		<_map><c path="IntHash"><c path="Array"><c path="Int"/></c></c></_map>
		<_cell><c path="thx.graph.LayoutCell"/></_cell>
		<_layers><c path="Array"><c path="Array"><c path="Int"/></c></c></_layers>
		<length public="1" set="null"><c path="Int"/></length>
		<graph public="1" set="null"><c path="thx.graph.Graph">
	<c path="thx.graph.GraphLayout.TNodeData"/>
	<c path="thx.graph.GraphLayout.TEdgeData"/>
</c></graph>
		<new public="1" set="method" line="15"><f a="graph:layers">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GraphLayout.TNodeData"/>
		<c path="thx.graph.GraphLayout.TEdgeData"/>
	</c>
	<c path="Array"><c path="Array"><c path="Int"/></c></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.graph.LayoutCell" params="" file="src/thx/graph/GraphLayout.hx" module="thx.graph.GraphLayout">
		<toString public="1" set="method" line="169"><f a=""><c path="String"/></f></toString>
		<update set="method" line="161">
			<f a="layer:position:layers:positions">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</update>
		<positions public="1"><c path="Int"/></positions>
		<layers public="1"><c path="Int"/></layers>
		<position public="1"><c path="Int"/></position>
		<layer public="1"><c path="Int"/></layer>
		<new public="1" set="method" line="153"><f a="?layer:?position:?layers:?positions">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="thx.graph.FriendLayoutCell" params="" file="src/thx/graph/GraphLayout.hx" module="thx.graph.GraphLayout"><a><update set="method"><f a="layer:position:layers:positions">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></update></a></typedef>
	<class path="thx.graph.GraphNodes" params="TNodeData:TEdgeData" file="src/thx/graph/GraphNodes.hx">
		<extends path="thx.graph.GraphCollection">
			<c path="thx.graph.GraphNodes.TNodeData"/>
			<c path="thx.graph.GraphNodes.TEdgeData"/>
			<c path="thx.graph.GraphNodes.TNodeData"/>
			<c path="thx.graph.GNode">
				<c path="thx.graph.GraphNodes.TNodeData"/>
				<c path="thx.graph.GraphNodes.TEdgeData"/>
			</c>
		</extends>
		<newInstance public="1" params="TNodeData:TEdgeData" set="method" line="8" static="1"><f a="graph:?nodeidf">
	<c path="thx.graph.Graph">
		<c path="newInstance.TNodeData"/>
		<c path="newInstance.TEdgeData"/>
	</c>
	<f a="">
		<c path="newInstance.TNodeData"/>
		<c path="String"/>
	</f>
	<c path="thx.graph.GraphNodes">
		<c path="newInstance.TNodeData"/>
		<c path="newInstance.TEdgeData"/>
	</c>
</f></newInstance>
		<toString public="1" set="method" line="56" override="1"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="50"><f a=""><e path="Void"/></f></clear>
		<_remove set="method" line="43">
			<f a="node">
				<c path="thx.graph.GNode">
					<c path="thx.graph.GraphNodes.TNodeData"/>
					<c path="thx.graph.GraphNodes.TEdgeData"/>
				</c>
				<e path="Void"/>
			</f>
			<meta/>
		</_remove>
		<remove public="1" set="method" line="36"><f a="node">
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphNodes.TNodeData"/>
		<c path="thx.graph.GraphNodes.TEdgeData"/>
	</c>
	<e path="Void"/>
</f></remove>
		<_create set="method" line="29"><f a="id:?data">
	<c path="Int"/>
	<c path="thx.graph.GraphNodes.TNodeData"/>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphNodes.TNodeData"/>
		<c path="thx.graph.GraphNodes.TEdgeData"/>
	</c>
</f></_create>
		<create public="1" set="method" line="24"><f a="?data">
	<c path="thx.graph.GraphNodes.TNodeData"/>
	<c path="thx.graph.GNode">
		<c path="thx.graph.GraphNodes.TNodeData"/>
		<c path="thx.graph.GraphNodes.TEdgeData"/>
	</c>
</f></create>
		<copyTo set="method" line="15">
			<f a="graph">
				<c path="thx.graph.Graph">
					<c path="thx.graph.GraphNodes.TNodeData"/>
					<c path="thx.graph.GraphNodes.TEdgeData"/>
				</c>
				<c path="thx.graph.GraphNodes">
					<c path="thx.graph.GraphNodes.TNodeData"/>
					<c path="thx.graph.GraphNodes.TEdgeData"/>
				</c>
			</f>
			<meta/>
		</copyTo>
		<new set="method" line="10"><f a="graph:?nodeidf">
	<c path="thx.graph.Graph">
		<c path="thx.graph.GraphNodes.TNodeData"/>
		<c path="thx.graph.GraphNodes.TEdgeData"/>
	</c>
	<f a="">
		<c path="thx.graph.GraphNodes.TNodeData"/>
		<c path="String"/>
	</f>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.graph.Graphs" params="" file="src/thx/graph/Graphs.hx">
		<crossings public="1" set="method" line="8" static="1"><f a="a:b">
	<c path="Array"><t path="thx.graph.Node"/></c>
	<c path="Array"><t path="thx.graph.Node"/></c>
	<c path="Int"/>
</f></crossings>
		<layoutCrossings public="1" set="method" line="40" static="1"><f a="a">
	<c path="Array"><c path="Array"><t path="thx.graph.Node"/></c></c>
	<c path="Int"/>
</f></layoutCrossings>
		<toMap public="1" set="method" line="50" static="1"><f a="layout">
	<c path="Array"><c path="Array"><t path="thx.graph.Node"/></c></c>
	<c path="Hash"><t path="thx.graph.Node"/></c>
</f></toMap>
		<toVertices public="1" set="method" line="63" static="1"><f a="layout">
	<c path="Array"><c path="Array"><t path="thx.graph.Node"/></c></c>
	<c path="Array"><c path="String"/></c>
</f></toVertices>
		<toEdges public="1" set="method" line="76" static="1"><f a="layout">
	<c path="Array"><c path="Array"><t path="thx.graph.Node"/></c></c>
	<c path="Array"><t path="thx.graph.Edge"/></c>
</f></toEdges>
		<findMaxPositiveOverNegative public="1" set="method" line="91" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<t path="thx.graph.Node"/>
</f></findMaxPositiveOverNegative>
		<isSink public="1" get="inline" set="null" line="106" static="1"><f a="node">
	<t path="thx.graph.Node"/>
	<e path="Bool"/>
</f></isSink>
		<isSource public="1" get="inline" set="null" line="107" static="1"><f a="node">
	<t path="thx.graph.Node"/>
	<e path="Bool"/>
</f></isSource>
		<findSink public="1" set="method" line="109" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<t path="thx.graph.Node"/>
</f></findSink>
		<findSource public="1" set="method" line="119" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<t path="thx.graph.Node"/>
</f></findSource>
		<findAllIsolated public="1" set="method" line="129" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="Array"><t path="thx.graph.Node"/></c>
</f></findAllIsolated>
		<addConnection public="1" set="method" line="140" static="1"><f a="graph:a:b">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></addConnection>
		<addConnections public="1" set="method" line="154" static="1"><f a="graph:arr">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></addConnections>
		<reverseConnection public="1" set="method" line="165" static="1"><f a="graph:a:b">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></reverseConnection>
		<findPath public="1" set="method" line="186" static="1"><f a="graph:a:b">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></findPath>
		<isDummy public="1" set="method" line="216" static="1"><f a="v">
	<c path="String"/>
	<e path="Bool"/>
</f></isDummy>
		<id line="217" static="1"><c path="Int"/></id>
		<createDummy public="1" set="method" line="218" static="1"><f a="a:b:lvl">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
</f></createDummy>
		<removeNode public="1" get="inline" set="null" line="220" static="1"><f a="graph:node">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<t path="thx.graph.Node"/>
	<e path="Void"/>
</f></removeNode>
		<addNode public="1" get="inline" set="null" line="221" static="1"><f a="graph:node">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<t path="thx.graph.Node"/>
	<e path="Void"/>
</f></addNode>
		<clone public="1" set="method" line="223" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="Hash"><t path="thx.graph.Node"/></c>
</f></clone>
		<empty public="1" get="inline" set="null" line="237" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<e path="Bool"/>
</f></empty>
		<count public="1" get="inline" set="null" line="238" static="1"><f a="graph">
	<c path="Hash"><t path="thx.graph.Node"/></c>
	<c path="Int"/>
</f></count>
	</class>
	<class path="thx.graph.GreedyCyclePartitioner" params="" file="src/thx/graph/GreedyCyclePartitioner.hx">
		<findMaxPositiveOverNegative params="TNodeData:TEdgeData" set="method" line="81" static="1"><f a="graph">
	<c path="thx.graph.Graph">
		<c path="findMaxPositiveOverNegative.TNodeData"/>
		<c path="findMaxPositiveOverNegative.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="findMaxPositiveOverNegative.TNodeData"/>
		<c path="findMaxPositiveOverNegative.TEdgeData"/>
	</c>
</f></findMaxPositiveOverNegative>
		<partition public="1" params="TNodeData:TEdgeData" set="method" line="11">
			<f a="graph">
				<c path="thx.graph.Graph">
					<c path="partition.TNodeData"/>
					<c path="partition.TEdgeData"/>
				</c>
				<a>
					<right><c path="Array"><c path="thx.graph.GEdge">
	<c path="partition.TNodeData"/>
	<c path="partition.TEdgeData"/>
</c></c></right>
					<left><c path="Array"><c path="thx.graph.GEdge">
	<c path="partition.TNodeData"/>
	<c path="partition.TEdgeData"/>
</c></c></left>
				</a>
			</f>
			<meta/>
		</partition>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.graph.GreedySwitchDecrosser" params="" file="src/thx/graph/GreedySwitchDecrosser.hx">
		<combined public="1" params="TNodeData:TEdgeData" set="method" line="65" static="1"><f a=""><a><decross><f a="layout">
	<c path="thx.graph.GraphLayout">
		<c path="decross.TNodeData"/>
		<c path="decross.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphLayout">
		<c path="decross.TNodeData"/>
		<c path="decross.TEdgeData"/>
	</c>
</f></decross></a></f></combined>
		<best public="1" params="TNodeData:TEdgeData" set="method" line="78" static="1"><f a=""><a><decross><f a="layout">
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</c>
</f></decross></a></f></best>
		<swap params="T" set="method" line="58"><f a="a:pos">
	<c path="Array"><c path="swap.T"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></swap>
		<decrossPair params="TNodeData:TEdgeData" set="method" line="39"><f a="graph:a:b">
	<c path="thx.graph.Graph">
		<c path="decrossPair.TNodeData"/>
		<c path="decrossPair.TEdgeData"/>
	</c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></decrossPair>
		<decross public="1" params="TNodeData:TEdgeData" set="method" line="10"><f a="layout">
	<c path="thx.graph.GraphLayout">
		<c path="decross.TNodeData"/>
		<c path="decross.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphLayout">
		<c path="decross.TNodeData"/>
		<c path="decross.TEdgeData"/>
	</c>
</f></decross>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.graph.GreedySwitch2Decrosser" params="" file="src/thx/graph/GreedySwitch2Decrosser.hx">
		<extends path="thx.graph.GreedySwitchDecrosser"/>
		<decrossTriplet params="TNodeData:TEdgeData" set="method" line="38"><f a="graph:a:b:c">
	<c path="thx.graph.Graph">
		<c path="decrossTriplet.TNodeData"/>
		<c path="decrossTriplet.TEdgeData"/>
	</c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></decrossTriplet>
		<decross public="1" params="TNodeData:TEdgeData" set="method" line="8" override="1"><f a="layout">
	<c path="thx.graph.GraphLayout">
		<c path="decross.TNodeData"/>
		<c path="decross.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphLayout">
		<c path="decross.TNodeData"/>
		<c path="decross.TEdgeData"/>
	</c>
</f></decross>
		<new public="1" set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.graph.HeaviestNodeLayer" params="" file="src/thx/graph/HeaviestNodeLayer.hx">
		<lay public="1" params="TNodeData:TEdgeData" set="method" line="10"><f a="graph">
	<c path="thx.graph.Graph">
		<c path="lay.TNodeData"/>
		<c path="lay.TEdgeData"/>
	</c>
	<c path="Array"><c path="Array"><c path="Int"/></c></c>
</f></lay>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.graph.LongestPathLayer" params="" file="src/thx/graph/LongestPathLayer.hx">
		<distanceToASink params="TNodeData:TEdgeData" set="method" line="31" static="1"><f a="graph:node">
	<c path="thx.graph.Graph">
		<c path="distanceToASink.TNodeData"/>
		<c path="distanceToASink.TEdgeData"/>
	</c>
	<c path="thx.graph.GNode">
		<c path="distanceToASink.TNodeData"/>
		<c path="distanceToASink.TEdgeData"/>
	</c>
	<c path="Int"/>
</f></distanceToASink>
		<lay public="1" params="TNodeData:TEdgeData" set="method" line="10">
			<f a="graph">
				<c path="thx.graph.Graph">
					<c path="lay.TNodeData"/>
					<c path="lay.TEdgeData"/>
				</c>
				<c path="Array"><c path="Array"><c path="Int"/></c></c>
			</f>
			<meta/>
		</lay>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.graph.Node" params="" file="src/thx/graph/Node.hx"><a>
	<vertex><c path="String"/></vertex>
	<edgesp><c path="Array"><c path="String"/></c></edgesp>
	<edgesn><c path="Array"><c path="String"/></c></edgesn>
</a></typedef>
	<class path="thx.graph.OneCycleRemover" params="" file="src/thx/graph/OneCycleRemover.hx">
		<remove public="1" params="TNodeData:TEdgeData" set="method" line="6"><f a="graph">
	<c path="thx.graph.Graph">
		<c path="remove.TNodeData"/>
		<c path="remove.TEdgeData"/>
	</c>
	<c path="Array"><a>
	<weight><c path="Float"/></weight>
	<node><c path="thx.graph.GNode">
	<c path="remove.TNodeData"/>
	<c path="remove.TEdgeData"/>
</c></node>
	<data><c path="remove.TEdgeData"/></data>
</a></c>
</f></remove>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.graph.SugiyamaMethod" params="TNodeData:TEdgeData" file="src/thx/graph/SugiyamaMethod.hx">
		<resolve public="1" set="method" line="24"><f a="graph:?nodef:?edgef">
	<c path="thx.graph.Graph">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</c>
	<f a="">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.SugiyamaMethod.TNodeData"/>
			<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
		</c>
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
	</f>
	<f a="::">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.SugiyamaMethod.TNodeData"/>
			<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.SugiyamaMethod.TNodeData"/>
			<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
		</c>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</c>
</f></resolve>
		<decrosser><t path="thx.graph.Decrosser">
	<c path="thx.graph.SugiyamaMethod.TNodeData"/>
	<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
</t></decrosser>
		<splitter><t path="thx.graph.Splitter">
	<c path="thx.graph.SugiyamaMethod.TNodeData"/>
	<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
</t></splitter>
		<layer><t path="thx.graph.Layer">
	<c path="thx.graph.SugiyamaMethod.TNodeData"/>
	<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
</t></layer>
		<partitioner><t path="thx.graph.Partitioner">
	<c path="thx.graph.SugiyamaMethod.TNodeData"/>
	<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
</t></partitioner>
		<new public="1" set="method" line="15"><f a="?partitioner:?layer:?splitter:?decrosser">
	<t path="thx.graph.Partitioner">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</t>
	<t path="thx.graph.Layer">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</t>
	<t path="thx.graph.Splitter">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</t>
	<t path="thx.graph.Decrosser">
		<c path="thx.graph.SugiyamaMethod.TNodeData"/>
		<c path="thx.graph.SugiyamaMethod.TEdgeData"/>
	</t>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="thx.graph.Partitioner" params="TNodeData:TEdgeData" file="src/thx/graph/SugiyamaMethod.hx" module="thx.graph.SugiyamaMethod"><a><partition set="method"><f a="graph">
	<c path="thx.graph.Graph">
		<c path="thx.graph.Partitioner.TNodeData"/>
		<c path="thx.graph.Partitioner.TEdgeData"/>
	</c>
	<a>
		<right><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Partitioner.TNodeData"/>
	<c path="thx.graph.Partitioner.TEdgeData"/>
</c></c></right>
		<left><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Partitioner.TNodeData"/>
	<c path="thx.graph.Partitioner.TEdgeData"/>
</c></c></left>
	</a>
</f></partition></a></typedef>
	<typedef path="thx.graph.Layer" params="TNodeData:TEdgeData" file="src/thx/graph/SugiyamaMethod.hx" module="thx.graph.SugiyamaMethod"><a><lay set="method"><f a="graph">
	<c path="thx.graph.Graph">
		<c path="thx.graph.Layer.TNodeData"/>
		<c path="thx.graph.Layer.TEdgeData"/>
	</c>
	<c path="Array"><c path="Array"><c path="Int"/></c></c>
</f></lay></a></typedef>
	<typedef path="thx.graph.Splitter" params="TNodeData:TEdgeData" file="src/thx/graph/SugiyamaMethod.hx" module="thx.graph.SugiyamaMethod"><a><split set="method"><f a="layout:splitted:?nodef:?splitf">
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.Splitter.TNodeData"/>
		<c path="thx.graph.Splitter.TEdgeData"/>
	</c>
	<c path="Array"><c path="Array"><c path="thx.graph.GEdge">
	<c path="thx.graph.Splitter.TNodeData"/>
	<c path="thx.graph.Splitter.TEdgeData"/>
</c></c></c>
	<f a="">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.Splitter.TNodeData"/>
			<c path="thx.graph.Splitter.TEdgeData"/>
		</c>
		<c path="thx.graph.Splitter.TNodeData"/>
	</f>
	<f a="::">
		<c path="thx.graph.GEdge">
			<c path="thx.graph.Splitter.TNodeData"/>
			<c path="thx.graph.Splitter.TEdgeData"/>
		</c>
		<c path="thx.graph.GEdge">
			<c path="thx.graph.Splitter.TNodeData"/>
			<c path="thx.graph.Splitter.TEdgeData"/>
		</c>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.Splitter.TNodeData"/>
		<c path="thx.graph.Splitter.TEdgeData"/>
	</c>
</f></split></a></typedef>
	<typedef path="thx.graph.Decrosser" params="TNodeData:TEdgeData" file="src/thx/graph/SugiyamaMethod.hx" module="thx.graph.SugiyamaMethod"><a><decross set="method"><f a="layout">
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.Decrosser.TNodeData"/>
		<c path="thx.graph.Decrosser.TEdgeData"/>
	</c>
	<c path="thx.graph.GraphLayout">
		<c path="thx.graph.Decrosser.TNodeData"/>
		<c path="thx.graph.Decrosser.TEdgeData"/>
	</c>
</f></decross></a></typedef>
	<class path="thx.graph.TwoCycleRemover" params="" file="src/thx/graph/TwoCycleRemover.hx">
		<remove public="1" params="TNodeData:TEdgeData" set="method" line="9"><f a="graph">
	<c path="thx.graph.Graph">
		<c path="remove.TNodeData"/>
		<c path="remove.TEdgeData"/>
	</c>
	<c path="Array"><a>
	<weight><c path="Float"/></weight>
	<tail><c path="thx.graph.GNode">
	<c path="remove.TNodeData"/>
	<c path="remove.TEdgeData"/>
</c></tail>
	<head><c path="thx.graph.GNode">
	<c path="remove.TNodeData"/>
	<c path="remove.TEdgeData"/>
</c></head>
	<data><c path="remove.TEdgeData"/></data>
</a></c>
</f></remove>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.Attribute" params="" file="src/thx/html/Attribute.hx">
		<isFill public="1" get="inline" set="null" line="13" static="1"><f a="el">
	<c path="String"/>
	<e path="Bool"/>
</f></isFill>
		<_fill line="14" static="1"><c path="thx.collection.Set"><c path="String"/></c></_fill>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.xml.NodeFormat" params="" file="src/thx/xml/NodeFormat.hx">
		<formatCData public="1" set="method" line="52"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<formatComment public="1" set="method" line="47"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatProlog public="1" set="method" line="42"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatDocType public="1" set="method" line="37"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatPCData public="1" set="method" line="32"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatCloseElement public="1" set="method" line="27"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatOpenElement public="1" set="method" line="18"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatEmptyElement public="1" set="method" line="9"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<attributeFormat public="1"><c path="thx.xml.AttributeFormat"/></attributeFormat>
		<valueFormat public="1"><c path="thx.xml.ValueFormat"/></valueFormat>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.HtmlNodeFormat" params="" file="src/thx/html/HtmlNodeFormat.hx">
		<extends path="thx.xml.NodeFormat"/>
		<formatEmptyElement public="1" set="method" line="7" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.CloseSelfHtmlNodeFormat" params="" file="src/thx/html/CloseSelfHtmlNodeFormat.hx">
		<extends path="thx.html.HtmlNodeFormat"/>
		<formatCloseElement public="1" set="method" line="7" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.HtmlHandler" params="" file="src/thx/html/HtmlHandler.hx" interface="1">
		<declaration public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></declaration>
		<doctype public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<comment public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<chars public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></chars>
		<end public="1" set="method"><f a="tag">
	<c path="String"/>
	<e path="Void"/>
</f></end>
		<start public="1" set="method"><f a="tag:attrs:unary">
	<c path="String"/>
	<c path="Array"><t path="thx.html.Attr"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.html.DomHandler" params="" file="src/thx/html/DomHandler.hx">
		<implements path="thx.html.HtmlHandler"/>
		<declaration public="1" set="method" line="43"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></declaration>
		<doctype public="1" set="method" line="39"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<comment public="1" set="method" line="35"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<chars public="1" set="method" line="31"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></chars>
		<end public="1" set="method" line="27"><f a="tag">
	<c path="String"/>
	<e path="Void"/>
</f></end>
		<start public="1" set="method" line="18"><f a="tag:attrs:unary">
	<c path="String"/>
	<c path="Array"><t path="thx.html.Attr"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<current><c path="Xml"/></current>
		<document public="1" set="null"><c path="Xml"/></document>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.html.Element" params="" file="src/thx/html/Element.hx">
		<shouldPreserve public="1" get="inline" set="null" line="15" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Elements whose content should be left untouched (no wrapping, no white-space trimming)</haxe_doc>
		</shouldPreserve>
		<_preserve line="16" static="1"><c path="thx.collection.Set"><c path="String"/></c></_preserve>
		<isEmpty public="1" get="inline" set="null" line="21" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Empty Elements</haxe_doc>
		</isEmpty>
		<_empty line="22" static="1"><c path="thx.collection.Set"><c path="String"/></c></_empty>
		<isBlock public="1" get="inline" set="null" line="27" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Block Elements</haxe_doc>
		</isBlock>
		<_block line="28" static="1"><c path="thx.collection.Set"><c path="String"/></c></_block>
		<isInline public="1" get="inline" set="null" line="33" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Inline Elements</haxe_doc>
		</isInline>
		<_inline line="34" static="1"><c path="thx.collection.Set"><c path="String"/></c></_inline>
		<isBreakElement public="1" get="inline" set="null" line="39" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Break Elements</haxe_doc>
		</isBreakElement>
		<_break line="40" static="1"><c path="thx.collection.Set"><c path="String"/></c></_break>
		<isCloseSelf public="1" get="inline" set="null" line="46" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Elements that you can, intentionally, leave open
	 * (and which close themselves)</haxe_doc>
		</isCloseSelf>
		<_closeSelf line="47" static="1"><c path="thx.collection.Set"><c path="String"/></c></_closeSelf>
		<isSpecial public="1" get="inline" set="null" line="52" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>* Special Elements (can contain anything)</haxe_doc>
		</isSpecial>
		<_special line="53" static="1"><c path="thx.collection.Set"><c path="String"/></c></_special>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.html.Html" params="" file="src/thx/html/Html.hx">
		<getFormatter public="1" set="method" line="13" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<c path="thx.html.XHtmlFormat"/>
</f></getFormatter>
		<getHtml public="1" set="method" line="38" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getHtml>
		<getHead public="1" set="method" line="45" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getHead>
		<getTitle public="1" set="method" line="50" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getTitle>
		<getBody public="1" set="method" line="55" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getBody>
		<createDocument public="1" set="method" line="60" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<c path="Xml"/>
</f></createDocument>
		<getParser public="1" set="method" line="66" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<f a="">
		<c path="String"/>
		<c path="Xml"/>
	</f>
</f></getParser>
		<getTemplate public="1" set="method" line="77" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<c path="String"/>
</f></getTemplate>
		<getTemplateHtml4Strict set="method" line="100" static="1"><f a=""><c path="String"/></f></getTemplateHtml4Strict>
		<getTemplateHtml4Transitional set="method" line="105" static="1"><f a=""><c path="String"/></f></getTemplateHtml4Transitional>
		<getTemplateHtml4Frameset set="method" line="110" static="1"><f a=""><c path="String"/></f></getTemplateHtml4Frameset>
		<getTemplateHtml5 set="method" line="115" static="1"><f a=""><c path="String"/></f></getTemplateHtml5>
		<getTemplateXHtml10Transitional set="method" line="120" static="1"><f a=""><c path="String"/></f></getTemplateXHtml10Transitional>
		<getTemplateXHtml10Strict set="method" line="125" static="1"><f a=""><c path="String"/></f></getTemplateXHtml10Strict>
		<getTemplateXHtml10Frameset set="method" line="130" static="1"><f a=""><c path="String"/></f></getTemplateXHtml10Frameset>
		<getTemplateXHtml11 set="method" line="135" static="1"><f a=""><c path="String"/></f></getTemplateXHtml11>
		<toXml public="1" set="method" line="140" static="1"><f a="html">
	<c path="String"/>
	<c path="Xml"/>
</f></toXml>
		<toXmlString public="1" set="method" line="148" static="1"><f a="html">
	<c path="String"/>
	<c path="String"/>
</f></toXmlString>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.xml.AttributeFormat" params="" file="src/thx/xml/AttributeFormat.hx">
		<formatAttribute public="1" set="method" line="18"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></formatAttribute>
		<formatAttributes public="1" set="method" line="7"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatAttributes>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.HtmlAttributeFormat" params="" file="src/thx/html/HtmlAttributeFormat.hx">
		<extends path="thx.xml.AttributeFormat"/>
		<formatAttribute public="1" set="method" line="7" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></formatAttribute>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.DocumentFormat" params="" file="src/thx/xml/DocumentFormat.hx">
		<isEmpty set="method" line="109"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></isEmpty>
		<formatComment set="method" line="101"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatProlog set="method" line="96"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatDocType set="method" line="91"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatDocument set="method" line="86"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocument>
		<formatCData set="method" line="81"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<formatPCData set="method" line="76"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatChildren set="method" line="68"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatChildren>
		<formatCloseElement set="method" line="63"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatOpenElement set="method" line="58"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatEmptyElement set="method" line="53"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatElement set="method" line="40"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatElement>
		<formatNode public="1" set="method" line="17"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatNode>
		<format public="1" set="method" line="12"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<stripComments public="1"><e path="Bool"/></stripComments>
		<nodeFormat public="1"><c path="thx.xml.NodeFormat"/></nodeFormat>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.HtmlDocumentFormat" params="" file="src/thx/html/HtmlDocumentFormat.hx">
		<extends path="thx.xml.DocumentFormat"/>
		<formatInlineCData set="method" line="260"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineCData>
		<formatInlinePCData set="method" line="255"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlinePCData>
		<formatCData set="method" line="250" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<formatPCData set="method" line="245" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatDocument set="method" line="240" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocument>
		<formatInlineCloseElement set="method" line="235"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineCloseElement>
		<formatInlineOpenElement set="method" line="230"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineOpenElement>
		<formatInlineEmptyElement set="method" line="225"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineEmptyElement>
		<formatCloseElement set="method" line="220" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatOpenElement set="method" line="215" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatEmptyElement set="method" line="210" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatInlineComment set="method" line="202"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineComment>
		<formatComment set="method" line="194" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatProlog set="method" line="189" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatDocType set="method" line="184" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatInlineChildren set="method" line="176"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineChildren>
		<formatChildren set="method" line="168" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatChildren>
		<inlineContent set="method" line="157"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></inlineContent>
		<formatElement set="method" line="107" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatElement>
		<wrapSpecialElementContent set="method" line="94"><f a="content">
	<c path="String"/>
	<c path="String"/>
</f></wrapSpecialElementContent>
		<formatSpecialElement set="method" line="84"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatSpecialElement>
		<contentIsEmpty set="method" line="74"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></contentIsEmpty>
		<formatInlineElement set="method" line="61"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineElement>
		<formatInlineNode public="1" set="method" line="44"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineNode>
		<isEmpty set="method" line="39" override="1"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></isEmpty>
		<format public="1" set="method" line="34" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<indentWrap set="method" line="26"><f a="content">
	<c path="String"/>
	<c path="String"/>
</f></indentWrap>
		<_begin><e path="Bool"/></_begin>
		<_level><c path="Int"/></_level>
		<specialElementContentFormat public="1"><e path="thx.html.SpecialElementContentFormat"/></specialElementContentFormat>
		<wrapColumns public="1"><c path="Int"/></wrapColumns>
		<newline public="1"><c path="String"/></newline>
		<indent public="1"><c path="String"/></indent>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="thx.html.SpecialElementContentFormat" params="" file="src/thx/html/HtmlDocumentFormat.hx" module="thx.html.HtmlDocumentFormat">
		<AsPlainText/>
		<AsCommentedText/>
		<AsCData/>
	</enum>
	<class path="thx.xml.XmlFormat" params="" file="src/thx/xml/XmlFormat.hx">
		<createNodeFormat set="method" line="71"><f a=""><c path="thx.xml.NodeFormat"/></f></createNodeFormat>
		<createDocumentFormat set="method" line="51"><f a=""><c path="thx.xml.DocumentFormat"/></f></createDocumentFormat>
		<createAttributeFormat set="method" line="46"><f a=""><c path="thx.xml.AttributeFormat"/></f></createAttributeFormat>
		<createValueFormat set="method" line="36"><f a=""><c path="thx.xml.ValueFormat"/></f></createValueFormat>
		<format public="1" set="method" line="22"><f a="xml">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<wrapColumns public="1"><t path="Null"><c path="Int"/></t></wrapColumns>
		<normalizeNewlines public="1"><e path="Bool"/></normalizeNewlines>
		<autoformat public="1"><e path="Bool"/></autoformat>
		<stripComments public="1"><t path="Null"><e path="Bool"/></t></stripComments>
		<newline public="1"><t path="Null"><c path="String"/></t></newline>
		<indent public="1"><t path="Null"><c path="String"/></t></indent>
		<new public="1" set="method" line="14"><f a="?autoformat:?indent:?newline">
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.html.XHtmlFormat" params="" file="src/thx/html/XHtmlFormat.hx">
		<extends path="thx.xml.XmlFormat"/>
		<createDocumentFormat set="method" line="8" override="1"><f a=""><c path="thx.xml.DocumentFormat"/></f></createDocumentFormat>
		<new public="1" set="method" line="6"><f a="?autoformat:?indent:?newline">
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.html.HtmlFormat" params="" file="src/thx/html/HtmlFormat.hx">
		<extends path="thx.html.XHtmlFormat"/>
		<createDocumentFormat set="method" line="36" override="1"><f a=""><c path="thx.xml.DocumentFormat"/></f></createDocumentFormat>
		<createNodeFormat set="method" line="28" override="1"><f a=""><c path="thx.xml.NodeFormat"/></f></createNodeFormat>
		<createAttributeFormat set="method" line="20" override="1"><f a=""><c path="thx.xml.AttributeFormat"/></f></createAttributeFormat>
		<specialElementContentFormat public="1"><e path="thx.html.SpecialElementContentFormat"/></specialElementContentFormat>
		<quotesRemoval public="1"><e path="Bool"/></quotesRemoval>
		<useCloseSelf public="1"><e path="Bool"/></useCloseSelf>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.html.Attr" params="" file="src/thx/html/HtmlHandler.hx" module="thx.html.HtmlHandler"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
	<escaped><c path="String"/></escaped>
</a></typedef>
	<class path="thx.html.HtmlParser" params="" file="src/thx/html/HtmlParser.hx">
		<startTag line="17" static="1"><c path="EReg"/></startTag>
		<endTag line="18" static="1"><c path="EReg"/></endTag>
		<attr line="19" static="1"><c path="EReg"/></attr>
		<comment line="20" static="1"><c path="EReg"/></comment>
		<cdata line="21" static="1"><c path="EReg"/></cdata>
		<doctype line="22" static="1"><c path="EReg"/></doctype>
		<declaration line="23" static="1"><c path="EReg"/></declaration>
		<parseEndTag set="method" line="159"><f a="tagName">
	<c path="String"/>
	<e path="Void"/>
</f></parseEndTag>
		<parseStartTag set="method" line="115"><f a="tagName:rest:unary">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></parseStartTag>
		<stacklast get="inline" set="null" line="110"><f a=""><c path="String"/></f></stacklast>
		<process public="1" set="method" line="34"><f a="handler">
	<c path="thx.html.HtmlHandler"/>
	<e path="Void"/>
</f></process>
		<stack><c path="Array"><c path="String"/></c></stack>
		<html><c path="String"/></html>
		<handler><c path="thx.html.HtmlHandler"/></handler>
		<new public="1" set="method" line="27"><f a="html">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* Port of HTML Parser By John Resig (ejohn.org)
* Original code by Erik Arvidsson, Mozilla Public License
* http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
*
* // Use this way:
* var xml : Xml = Html.toXml(htmlString);
*</haxe_doc>
	</class>
	<enum path="thx.html.HtmlVersion" params="" file="src/thx/html/HtmlVersion.hx">
		<XHtml11/>
		<XHtml10Transitional/>
		<XHtml10Strict/>
		<XHtml10Frameset/>
		<Html5/>
		<Html401Transitional/>
		<Html401Strict/>
		<Html401Frameset/>
	</enum>
	<class path="thx.html.TextHandler" params="" file="src/thx/html/TextHandler.hx">
		<implements path="thx.html.HtmlHandler"/>
		<declaration public="1" set="method" line="40"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></declaration>
		<doctype public="1" set="method" line="36"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<comment public="1" set="method" line="32"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<chars public="1" set="method" line="28"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></chars>
		<end public="1" set="method" line="24"><f a="tag">
	<c path="String"/>
	<e path="Void"/>
</f></end>
		<start public="1" set="method" line="16"><f a="tag:attrs:unary">
	<c path="String"/>
	<c path="Array"><t path="thx.html.Attr"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<results public="1" set="null"><c path="String"/></results>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.html.UnquotedHtmlAttributeFormat" params="" file="src/thx/html/UnquotedHtmlAttributeFormat.hx">
		<extends path="thx.xml.AttributeFormat"/>
		<quote set="method" line="22"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<formatAttribute public="1" set="method" line="14" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></formatAttribute>
		<_containsWS><c path="EReg"/></_containsWS>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.ini.Ini" params="" file="src/thx/ini/Ini.hx">
		<encode public="1" set="method" line="13" static="1"><f a="value">
	<a/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="20" static="1"><f a="value">
	<c path="String"/>
	<d/>
</f></decode>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.ini.IniDecoder" params="" file="src/thx/ini/IniDecoder.hx">
		<linesplitter line="16" static="1"><c path="EReg"/></linesplitter>
		<explodeSections set="method" line="59" static="1"><f a="o">
	<a/>
	<a/>
</f></explodeSections>
		<decodeValue set="method" line="137"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decodeValue>
		<dec set="method" line="130"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></dec>
		<decodeLine set="method" line="89"><f a="line">
	<c path="String"/>
	<e path="Void"/>
</f></decodeLine>
		<decodeLines set="method" line="82"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decodeLines>
		<decode public="1" set="method" line="38"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<insection><e path="Bool"/></insection>
		<value><c path="thx.data.ValueHandler"/></value>
		<other><c path="thx.data.IDataHandler"/></other>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<explodesections public="1" set="null"><e path="Bool"/></explodesections>
		<emptytonull public="1" set="null"><e path="Bool"/></emptytonull>
		<new public="1" set="method" line="25"><f a="handler:?explodesections:?emptytonull">
	<c path="thx.data.IDataHandler"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.ini.IniEncoder" params="" file="src/thx/ini/IniEncoder.hx">
		<implements path="thx.data.IDataHandler"/>
		<decoded public="1" line="135" static="1"><c path="Array"><c path="String"/></c></decoded>
		<encoded public="1" line="136" static="1"><c path="Array"><c path="String"/></c></encoded>
		<valueBool public="1" set="method" line="168"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></valueBool>
		<comment public="1" set="method" line="162"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<valueNull public="1" set="method" line="158"><f a=""><e path="Void"/></f></valueNull>
		<valueFloat public="1" set="method" line="154"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></valueFloat>
		<valueInt public="1" set="method" line="150"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></valueInt>
		<quote set="method" line="145"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<enc set="method" line="138"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></enc>
		<valueString public="1" set="method" line="127"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></valueString>
		<valueDate public="1" set="method" line="120"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></valueDate>
		<arrayEnd public="1" set="method" line="115"><f a=""><e path="Void"/></f></arrayEnd>
		<arrayItemEnd public="1" set="method" line="110"><f a=""><e path="Void"/></f></arrayItemEnd>
		<arrayItemStart public="1" set="method" line="102"><f a=""><e path="Void"/></f></arrayItemStart>
		<arrayStart public="1" set="method" line="94"><f a=""><e path="Void"/></f></arrayStart>
		<objectEnd public="1" set="method" line="89"><f a=""><e path="Void"/></f></objectEnd>
		<getSection set="method" line="78"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="Array"><c path="String"/></c></t>
</f></getSection>
		<objectFieldEnd public="1" set="method" line="67"><f a=""><e path="Void"/></f></objectFieldEnd>
		<objectFieldStart public="1" set="method" line="61"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></objectFieldStart>
		<objectStart public="1" set="method" line="55"><f a=""><e path="Void"/></f></objectStart>
		<end public="1" set="method" line="37"><f a=""><e path="Void"/></f></end>
		<start public="1" set="method" line="30"><f a=""><e path="Void"/></f></start>
		<stack><c path="Array"><c path="String"/></c></stack>
		<value><c path="String"/></value>
		<cache><c path="Hash"><c path="Array"><c path="String"/></c></c></cache>
		<inarray><c path="Int"/></inarray>
		<encodedString public="1" set="null"><c path="String"/></encodedString>
		<buf><c path="StringBuf"/></buf>
		<newline public="1" set="null"><c path="String"/></newline>
		<ignorecomments public="1" set="null"><e path="Bool"/></ignorecomments>
		<new public="1" set="method" line="19"><f a="?newline:?ignorecomments">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="thx.json.Geometry" params="" file="src/thx/json/GeoJson.hx" module="thx.json.GeoJson">
		<a>
			<type><c path="String"/></type>
			<properties><t path="Null"><d/></t></properties>
			<id><t path="Null"><c path="String"/></t></id>
			<geometry><t path="Null"><t path="thx.json.Geometry"/></t></geometry>
			<geometries><t path="Null"><c path="Array"><t path="thx.json.Geometry"/></c></t></geometries>
			<features><t path="Null"><c path="Array"><t path="thx.json.Geometry"/></c></t></features>
			<coordinates><t path="Null"><d/></t></coordinates>
			<bbox><t path="Null"><c path="Array"><c path="Float"/></c></t></bbox>
		</a>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</typedef>
	<typedef path="thx.json.GeoJson" params="" file="src/thx/json/GeoJson.hx"><a>
	<type><c path="String"/></type>
	<properties><t path="Null"><d/></t></properties>
	<id><t path="Null"><c path="String"/></t></id>
	<geometry><t path="Null"><t path="thx.json.Geometry"/></t></geometry>
	<geometries><t path="Null"><c path="Array"><t path="thx.json.Geometry"/></c></t></geometries>
	<features><t path="Null"><c path="Array"><t path="thx.json.Geometry"/></c></t></features>
	<crs><t path="Null"><t path="thx.json.CoordinateReferenceSystem"/></t></crs>
	<coordinates><t path="Null"><d/></t></coordinates>
	<bbox><t path="Null"><c path="Array"><c path="Float"/></c></t></bbox>
</a></typedef>
	<typedef path="thx.json.CoordinateReferenceSystem" params="" file="src/thx/json/GeoJson.hx" module="thx.json.GeoJson"><a>
	<type><c path="String"/></type>
	<properties><a>
	<type><t path="Null"><c path="String"/></t></type>
	<name><t path="Null"><c path="String"/></t></name>
	<href><t path="Null"><c path="String"/></t></href>
</a></properties>
</a></typedef>
	<class path="thx.json.Json" params="" file="src/thx/json/Json.hx">
		<nativeEncoder static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nativeEncoder>
		<nativeDecoder static="1"><f a="">
	<c path="String"/>
	<d/>
</f></nativeDecoder>
		<encode public="1" params="T" set="method" line="10" static="1"><f a="value">
	<c path="encode.T"/>
	<c path="String"/>
</f></encode>
		<decode public="1" params="T" set="method" line="19" static="1"><f a="value">
	<c path="String"/>
	<c path="decode.T"/>
</f></decode>
	</class>
	<class path="thx.json.JsonDecoder" params="" file="src/thx/json/JsonDecoder.hx">
		<error set="method" line="355"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></error>
		<parseDigits set="method" line="327"><f a="?atleast">
	<c path="Int"/>
	<c path="String"/>
</f></parseDigits>
		<parseFloat set="method" line="273"><f a=""><e path="Void"/></f></parseFloat>
		<parseHexa set="method" line="258"><f a=""><t path="Null"><c path="Int"/></t></f></parseHexa>
		<_parseString set="method" line="201"><f a=""><c path="String"/></f></_parseString>
		<parseString set="method" line="196"><f a=""><e path="Void"/></f></parseString>
		<parseValue set="method" line="184"><f a=""><e path="Void"/></f></parseValue>
		<parseArray set="method" line="161"><f a=""><e path="Void"/></f></parseArray>
		<parseObject set="method" line="133"><f a=""><e path="Void"/></f></parseObject>
		<expect set="method" line="115"><f a="word">
	<c path="String"/>
	<e path="Bool"/>
</f></expect>
		<readChar set="method" line="101"><f a=""><c path="String"/></f></readChar>
		<parse set="method" line="79"><f a=""><e path="Void"/></f></parse>
		<ignoreWhiteSpace set="method" line="57"><f a=""><e path="Void"/></f></ignoreWhiteSpace>
		<decode public="1" set="method" line="33"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<pos><c path="Int"/></pos>
		<char><c path="String"/></char>
		<src><c path="String"/></src>
		<tabsize><c path="Int"/></tabsize>
		<line><c path="Int"/></line>
		<col><c path="Int"/></col>
		<new public="1" set="method" line="27"><f a="handler:?tabsize">
	<c path="thx.data.IDataHandler"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<enum path="thx.json._JsonDecoder.StreamError" params="" file="src/thx/json/JsonDecoder.hx" private="1" module="thx.json.JsonDecoder"><Eof/></enum>
	<class path="thx.json.JsonEncoder" params="" file="src/thx/json/JsonEncoder.hx">
		<implements path="thx.data.IDataHandler"/>
		<quote set="method" line="98"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<comment public="1" set="method" line="93"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<valueBool public="1" set="method" line="89"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></valueBool>
		<valueNull public="1" set="method" line="85"><f a=""><e path="Void"/></f></valueNull>
		<valueFloat public="1" set="method" line="81"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></valueFloat>
		<valueInt public="1" set="method" line="77"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></valueInt>
		<valueString public="1" set="method" line="73"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></valueString>
		<valueDate public="1" set="method" line="69"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></valueDate>
		<arrayEnd public="1" set="method" line="63"><f a=""><e path="Void"/></f></arrayEnd>
		<arrayItemEnd public="1" set="method" line="62"><f a=""><e path="Void"/></f></arrayItemEnd>
		<arrayItemStart public="1" set="method" line="57"><f a=""><e path="Void"/></f></arrayItemStart>
		<arrayStart public="1" set="method" line="52"><f a=""><e path="Void"/></f></arrayStart>
		<objectEnd public="1" set="method" line="46"><f a=""><e path="Void"/></f></objectEnd>
		<objectFieldEnd public="1" set="method" line="44"><f a=""><e path="Void"/></f></objectFieldEnd>
		<objectFieldStart public="1" set="method" line="38"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></objectFieldStart>
		<objectStart public="1" set="method" line="33"><f a=""><e path="Void"/></f></objectStart>
		<end public="1" set="method" line="27"><f a=""><e path="Void"/></f></end>
		<start public="1" set="method" line="20"><f a=""><e path="Void"/></f></start>
		<count><c path="Array"><c path="Int"/></c></count>
		<lvl><c path="Int"/></lvl>
		<buf><c path="StringBuf"/></buf>
		<encodedString public="1" set="null"><c path="String"/></encodedString>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Kok" params="" file="src/thx/languages/Kok.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Syr" params="" file="src/thx/languages/Syr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.Const" params="" file="src/thx/math/Const.hx">
		<TWO_PI public="1" get="inline" set="null" line="10" static="1"><c path="Float"/></TWO_PI>
		<PI public="1" get="inline" set="null" line="15" static="1">
			<c path="Float"/>
			<haxe_doc>* Math constant pi</haxe_doc>
		</PI>
		<HALF_PI public="1" get="inline" set="null" line="20" static="1">
			<c path="Float"/>
			<haxe_doc>* Math constant pi/2</haxe_doc>
		</HALF_PI>
		<TO_DEGREE public="1" get="inline" set="null" line="25" static="1">
			<c path="Float"/>
			<haxe_doc>* Constant used to convert angle from radians to degrees</haxe_doc>
		</TO_DEGREE>
		<TO_RADIAN public="1" get="inline" set="null" line="30" static="1">
			<c path="Float"/>
			<haxe_doc>* Constant used to convert degrees to radians.</haxe_doc>
		</TO_RADIAN>
		<LN10 public="1" get="inline" set="null" line="32" static="1"><c path="Float"/></LN10>
		<E public="1" get="inline" set="null" line="34" static="1"><c path="Float"/></E>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.Ease" params="" file="src/thx/math/Ease.hx"><mode public="1" set="method" line="7" static="1"><f a="?easemode:?f">
	<e path="thx.math.EaseMode"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></mode></class>
	<enum path="thx.math.EaseMode" params="" file="src/thx/math/EaseMode.hx">
		<EaseOutEaseIn/>
		<EaseOut/>
		<EaseInEaseOut/>
		<EaseIn/>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</enum>
	<class path="thx.math.Equations" params="" file="src/thx/math/Equations.hx">
		<linear public="1" set="method" line="10" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></linear>
		<polynomial public="1" set="method" line="15" static="1"><f a="t:e">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></polynomial>
		<quadratic public="1" set="method" line="20" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></quadratic>
		<cubic public="1" set="method" line="25" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></cubic>
		<sin public="1" set="method" line="30" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<exponential public="1" set="method" line="35" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></exponential>
		<circle public="1" set="method" line="40" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></circle>
		<elastic public="1" set="method" line="45" static="1"><f a="t:?a:?p">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></elastic>
		<elasticf public="1" set="method" line="59" static="1"><f a="?a:?p">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></elasticf>
		<back public="1" set="method" line="74" static="1"><f a="t:?s">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></back>
		<backf public="1" set="method" line="80" static="1"><f a="?s">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></backf>
		<bounce public="1" set="method" line="86" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></bounce>
		<polynomialf public="1" set="method" line="94" static="1"><f a="e">
	<c path="Float"/>
	<f a="t">
		<c path="Float"/>
		<e path="Void"/>
	</f>
</f></polynomialf>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.Random" params="" file="src/thx/math/Random.hx">
		<float public="1" get="inline" set="null" line="30"><f a=""><c path="Float"/></f></float>
		<int public="1" get="inline" set="null" line="19"><f a=""><c path="Int"/></f></int>
		<seed public="1"><c path="Int"/></seed>
		<new public="1" set="method" line="14"><f a="?seed">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* Adapted from Nicolas Cannasse code.
 *
 * @author Franco Ponticelli
 * @author Nicolas Cannasse</haxe_doc>
	</class>
	<class path="thx.math.scale.IScale" params="TDomain:TRange" file="src/thx/math/scale/IScale.hx" interface="1">
		<getRange public="1" set="method"><f a=""><c path="Array"><c path="thx.math.scale.IScale.TRange"/></c></f></getRange>
		<getDomain public="1" set="method"><f a=""><c path="Array"><c path="thx.math.scale.IScale.TDomain"/></c></f></getDomain>
		<scale public="1" set="method"><f a="x:?i">
	<c path="thx.math.scale.IScale.TDomain"/>
	<c path="Int"/>
	<c path="thx.math.scale.IScale.TRange"/>
</f></scale>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.NumericScale" params="This" file="src/thx/math/scale/NumericScale.hx">
		<implements path="thx.math.scale.IScale">
			<c path="Float"/>
			<c path="Float"/>
		</implements>
		<scaleBilinear set="method" line="105" static="1"><f a="domain:range:uninterpolate:interpolate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<f a="::">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<f a="x">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></scaleBilinear>
		<scalePolylinear set="method" line="112" static="1"><f a="domain:range:uninterpolate:interpolate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<f a="::">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<f a="x">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></scalePolylinear>
		<_this get="inline" set="null" line="103"><f a=""><c path="thx.math.scale.NumericScale.This"/></f></_this>
		<transform public="1" set="method" line="94"><f a="scale:t:a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></transform>
		<tickFormat public="1" set="method" line="89"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<ticks public="1" set="method" line="84"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<clamp public="1" set="method" line="78"><f a="v">
	<e path="Bool"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></clamp>
		<getClamp public="1" set="method" line="77"><f a=""><e path="Bool"/></f></getClamp>
		<interpolatef public="1" set="method" line="71"><f a="x">
	<f a="::">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<c path="thx.math.scale.NumericScale.This"/>
</f></interpolatef>
		<getInterpolate public="1" set="method" line="70"><f a=""><f a="::">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></f></getInterpolate>
		<rangeRound public="1" set="method" line="63"><f a="r">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.NumericScale.This"/>
</f></rangeRound>
		<range public="1" set="method" line="57"><f a="r">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.NumericScale.This"/>
</f></range>
		<getRange public="1" set="method" line="56"><f a=""><c path="Array"><c path="Float"/></c></f></getRange>
		<domain public="1" set="method" line="50"><f a="d">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.NumericScale.This"/>
</f></domain>
		<getDomain public="1" set="method" line="49"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<invert public="1" set="method" line="44"><f a="y:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></invert>
		<scale public="1" set="method" line="39"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scale>
		<rescale set="method" line="30"><f a=""><c path="thx.math.scale.NumericScale.This"/></f></rescale>
		<_input><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></_input>
		<_output><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></_output>
		<_clamp><e path="Bool"/></_clamp>
		<f><f a="::">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></f>
		<_range><c path="Array"><c path="Float"/></c></_range>
		<_domain><c path="Array"><c path="Float"/></c></_domain>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.Linear" params="" file="src/thx/math/scale/Linear.hx">
		<extends path="thx.math.scale.NumericScale"><c path="thx.math.scale.Linear"/></extends>
		<tickFormat public="1" set="method" line="56" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<ticks public="1" set="method" line="50" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<tickRange public="1" set="method" line="29"><f a=""><a>
	<stop><c path="Float"/></stop>
	<step><c path="Float"/></step>
	<start><c path="Float"/></start>
</a></f></tickRange>
		<modulo public="1" set="method" line="23"><f a="m">
	<c path="Int"/>
	<c path="thx.math.scale.Linear"/>
</f></modulo>
		<getModulo public="1" set="method" line="22"><f a=""><c path="Float"/></f></getModulo>
		<m><c path="Int"/></m>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * @todo update to version 1.16 (from 1.11)</haxe_doc>
	</class>
	<class path="thx.math.scale.LinearInt" params="" file="src/thx/math/scale/LinearInt.hx">
		<extends path="thx.math.scale.Linear"/>
		<tickFormat public="1" set="method" line="16" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<ticks public="1" set="method" line="10" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.LinearT" params="T" file="src/thx/math/scale/LinearT.hx">
		<implements path="thx.math.scale.IScale">
			<c path="Float"/>
			<c path="thx.math.scale.LinearT.T"/>
		</implements>
		<_f params="T" set="method" line="10" static="1"><f a="_:_:?_">
	<c path="_f.T"/>
	<c path="_f.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="_f.T"/>
	</f>
</f></_f>
		<scaleBilinear params="T" set="method" line="106" static="1"><f a="domain:range:uninterpolate:interpolate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="scaleBilinear.T"/></c>
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<f a="::">
		<c path="scaleBilinear.T"/>
		<c path="scaleBilinear.T"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="scaleBilinear.T"/>
		</f>
	</f>
	<f a="x">
		<c path="Float"/>
		<c path="scaleBilinear.T"/>
	</f>
</f></scaleBilinear>
		<scalePolylinear params="T" set="method" line="113" static="1"><f a="domain:range:uninterpolate:interpolate">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="scalePolylinear.T"/></c>
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<f a="::">
		<c path="scalePolylinear.T"/>
		<c path="scalePolylinear.T"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="scalePolylinear.T"/>
		</f>
	</f>
	<f a="x">
		<c path="Float"/>
		<c path="scalePolylinear.T"/>
	</f>
</f></scalePolylinear>
		<tickFormat public="1" set="method" line="100"><f a="m">
	<c path="Float"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></tickFormat>
		<ticks public="1" set="method" line="94"><f a="m">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
</f></ticks>
		<tickRange set="method" line="73"><f a="m">
	<c path="Float"/>
	<a>
		<stop><c path="Float"/></stop>
		<step><c path="Float"/></step>
		<start><c path="Float"/></start>
	</a>
</f></tickRange>
		<clamp public="1" set="method" line="67"><f a="v">
	<e path="Bool"/>
	<c path="thx.math.scale.LinearT"><c path="thx.math.scale.LinearT.T"/></c>
</f></clamp>
		<getClamp public="1" set="method" line="66"><f a=""><e path="Bool"/></f></getClamp>
		<interpolatef public="1" set="method" line="60"><f a="x">
	<f a="::">
		<c path="thx.math.scale.LinearT.T"/>
		<c path="thx.math.scale.LinearT.T"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="thx.math.scale.LinearT.T"/>
		</f>
	</f>
	<c path="thx.math.scale.LinearT"><c path="thx.math.scale.LinearT.T"/></c>
</f></interpolatef>
		<getInterpolate public="1" set="method" line="59"><f a=""><f a="::">
	<c path="thx.math.scale.LinearT.T"/>
	<c path="thx.math.scale.LinearT.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="thx.math.scale.LinearT.T"/>
	</f>
</f></f></getInterpolate>
		<range public="1" set="method" line="53"><f a="r">
	<c path="Array"><c path="thx.math.scale.LinearT.T"/></c>
	<c path="thx.math.scale.LinearT"><c path="thx.math.scale.LinearT.T"/></c>
</f></range>
		<getRange public="1" set="method" line="52"><f a=""><c path="Array"><c path="thx.math.scale.LinearT.T"/></c></f></getRange>
		<domain public="1" set="method" line="46"><f a="d">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.LinearT"><c path="thx.math.scale.LinearT.T"/></c>
</f></domain>
		<getDomain public="1" set="method" line="45"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<scale public="1" set="method" line="40"><f a="x:?_">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.math.scale.LinearT.T"/>
</f></scale>
		<rescale set="method" line="30"><f a=""><c path="thx.math.scale.LinearT"><c path="thx.math.scale.LinearT.T"/></c></f></rescale>
		<_output><f a="">
	<c path="Float"/>
	<c path="thx.math.scale.LinearT.T"/>
</f></_output>
		<_clamp><e path="Bool"/></_clamp>
		<f><f a="::">
	<c path="thx.math.scale.LinearT.T"/>
	<c path="thx.math.scale.LinearT.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="thx.math.scale.LinearT.T"/>
	</f>
</f></f>
		<_range><c path="Array"><c path="thx.math.scale.LinearT.T"/></c></_range>
		<_domain><c path="Array"><c path="Float"/></c></_domain>
		<new public="1" set="method" line="21"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.LinearTime" params="" file="src/thx/math/scale/LinearTime.hx">
		<extends path="thx.math.scale.Linear"/>
		<guessPeriodicity public="1" set="method" line="23" static="1"><f a="a:b:?disc">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></guessPeriodicity>
		<valids line="40" static="1"><c path="Array"><c path="String"/></c></valids>
		<timeTicks public="1" set="method" line="108"><f a=""><c path="Array"><t path="Null"><c path="Float"/></t></c></f></timeTicks>
		<linearTicks public="1" set="method" line="103"><f a=""><c path="Array"><c path="Float"/></c></f></linearTicks>
		<ticks public="1" set="method" line="95" override="1"><f a=""><c path="Array"><t path="Null"><c path="Float"/></t></c></f></ticks>
		<maxNumberOfTicks public="1" set="method" line="89"><f a="v">
	<c path="Int"/>
	<c path="thx.math.scale.LinearTime"/>
</f></maxNumberOfTicks>
		<getMaxNumberOfTicks public="1" set="method" line="88"><f a=""><c path="Int"/></f></getMaxNumberOfTicks>
		<useTimeTicks public="1" set="method" line="82"><f a="v">
	<e path="Bool"/>
	<c path="thx.math.scale.LinearTime"/>
</f></useTimeTicks>
		<getUseTimeTicks public="1" set="method" line="81"><f a=""><e path="Bool"/></f></getUseTimeTicks>
		<tickFormat public="1" set="method" line="63" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<periodicity public="1" set="method" line="54"><f a="v">
	<c path="String"/>
	<c path="thx.math.scale.LinearTime"/>
</f></periodicity>
		<getPeriodicity public="1" set="method" line="52"><f a=""><c path="String"/></f></getPeriodicity>
		<domain public="1" set="method" line="44" override="1"><f a="d">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Linear"/>
</f></domain>
		<_periodicity><c path="String"/></_periodicity>
		<_maxnumberofticks><c path="Int"/></_maxnumberofticks>
		<_usetimeticks><e path="Bool"/></_usetimeticks>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.Linears" params="" file="src/thx/math/scale/Linears.hx">
		<_default_color line="14" static="1"><c path="thx.color.Hsl"/></_default_color>
		<forString public="1" set="method" line="15" static="1"><f a=""><c path="thx.math.scale.LinearT"><c path="String"/></c></f></forString>
		<forHsl public="1" set="method" line="20" static="1"><f a=""><c path="thx.math.scale.LinearT"><c path="thx.color.Hsl"/></c></f></forHsl>
		<forHslString public="1" set="method" line="25" static="1"><f a=""><c path="thx.math.scale.LinearT"><c path="String"/></c></f></forHslString>
		<forRgb public="1" set="method" line="38" static="1"><f a=""><c path="thx.math.scale.LinearT"><c path="thx.color.Rgb"/></c></f></forRgb>
		<forRgbString public="1" set="method" line="43" static="1"><f a=""><c path="thx.math.scale.LinearT"><c path="String"/></c></f></forRgbString>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.Log" params="" file="src/thx/math/scale/Log.hx">
		<extends path="thx.math.scale.NumericScale"><c path="thx.math.scale.Log"/></extends>
		<_log set="method" line="14" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_log>
		<_logn set="method" line="19" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_logn>
		<_pow set="method" line="24" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_pow>
		<_pown set="method" line="29" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_pown>
		<tickFormat public="1" set="method" line="109" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<ticks public="1" set="method" line="71" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<domain public="1" set="method" line="59" override="1"><f a="d">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Log"/>
</f></domain>
		<getDomain public="1" set="method" line="54" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<invert public="1" set="method" line="49" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></invert>
		<scale public="1" set="method" line="44" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scale>
		<pow><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<log><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<new public="1" set="method" line="37"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * @todo add clamp/clampMin/clampMax</haxe_doc>
	</class>
	<class path="thx.math.scale.Ordinal" params="TDomain:TRange" file="src/thx/math/scale/Ordinal.hx">
		<implements path="thx.math.scale.IScale">
			<c path="thx.math.scale.Ordinal.TDomain"/>
			<c path="thx.math.scale.Ordinal.TRange"/>
		</implements>
		<rangeRoundBands public="1" set="method" line="67"><f a="start:stop:?padding">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TDomain"/>
		<c path="Int"/>
	</c>
</f></rangeRoundBands>
		<rangeBands public="1" set="method" line="58"><f a="start:stop:?padding">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TDomain"/>
		<c path="Float"/>
	</c>
</f></rangeBands>
		<rangePoints public="1" set="method" line="47"><f a="start:stop:?padding">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TDomain"/>
		<c path="Float"/>
	</c>
</f></rangePoints>
		<range public="1" set="method" line="41"><f a="a">
	<c path="Array"><c path="thx.math.scale.Ordinal.TRange"/></c>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TDomain"/>
		<c path="thx.math.scale.Ordinal.TRange"/>
	</c>
</f></range>
		<getRange public="1" set="method" line="40"><f a=""><c path="Array"><c path="thx.math.scale.Ordinal.TRange"/></c></f></getRange>
		<domain public="1" set="method" line="34"><f a="x">
	<c path="Array"><c path="thx.math.scale.Ordinal.TDomain"/></c>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TDomain"/>
		<c path="thx.math.scale.Ordinal.TRange"/>
	</c>
</f></domain>
		<getDomain public="1" set="method" line="33"><f a=""><c path="Array"><c path="thx.math.scale.Ordinal.TDomain"/></c></f></getDomain>
		<scale public="1" set="method" line="22"><f a="x:?_">
	<c path="thx.math.scale.Ordinal.TDomain"/>
	<c path="Int"/>
	<c path="thx.math.scale.Ordinal.TRange"/>
</f></scale>
		<rangeBand public="1" set="null"><c path="Float"/></rangeBand>
		<_range><c path="Array"><c path="thx.math.scale.Ordinal.TRange"/></c></_range>
		<_domain><c path="Array"><c path="thx.math.scale.Ordinal.TDomain"/></c></_domain>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock</haxe_doc>
	</class>
	<class path="thx.math.scale.Pow" params="" file="src/thx/math/scale/Pow.hx">
		<extends path="thx.math.scale.NumericScale"><c path="thx.math.scale.Pow"/></extends>
		<sqrt public="1" set="method" line="82" static="1"><f a=""><c path="thx.math.scale.Pow"/></f></sqrt>
		<_pow set="method" line="87" static="1"><f a="e">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></_pow>
		<_pown set="method" line="92" static="1"><f a="e">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></_pown>
		<exponent public="1" set="method" line="74"><f a="x">
	<c path="Float"/>
	<c path="thx.math.scale.Pow"/>
</f></exponent>
		<getExponent public="1" set="method" line="69"><f a=""><c path="Float"/></f></getExponent>
		<modulo public="1" set="method" line="63"><f a="v">
	<c path="Int"/>
	<c path="thx.math.scale.Pow"/>
</f></modulo>
		<getModulo public="1" set="method" line="62"><f a=""><c path="Float"/></f></getModulo>
		<tickFormat public="1" set="method" line="57" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<ticks public="1" set="method" line="52" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<domain public="1" set="method" line="42" override="1"><f a="d">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Pow"/>
</f></domain>
		<getDomain public="1" set="method" line="37" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<invert public="1" set="method" line="32" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></invert>
		<scale public="1" set="method" line="27" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scale>
		<powb><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></powb>
		<powp><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></powp>
		<_exponent><c path="Float"/></_exponent>
		<tick><c path="thx.math.scale.Linear"/></tick>
		<new public="1" set="method" line="19"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * @todo add clamp/clampMin/clampMax</haxe_doc>
	</class>
	<class path="thx.math.scale.Quantile" params="TRange" file="src/thx/math/scale/Quantile.hx">
		<implements path="thx.math.scale.IScale">
			<c path="Float"/>
			<c path="thx.math.scale.Quantile.TRange"/>
		</implements>
		<getQuantiles public="1" set="method" line="61"><f a=""><f a=""><c path="Array"><c path="Float"/></c></f></f></getQuantiles>
		<range public="1" set="method" line="54"><f a="x">
	<c path="Array"><c path="thx.math.scale.Quantile.TRange"/></c>
	<c path="thx.math.scale.Quantile"><c path="thx.math.scale.Quantile.TRange"/></c>
</f></range>
		<getRange public="1" set="method" line="53"><f a=""><c path="Array"><c path="thx.math.scale.Quantile.TRange"/></c></f></getRange>
		<domain public="1" set="method" line="45"><f a="x">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Quantile"><c path="thx.math.scale.Quantile.TRange"/></c>
</f></domain>
		<getDomain public="1" set="method" line="43"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<scale public="1" set="method" line="37"><f a="v:?_">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.math.scale.Quantile.TRange"/>
</f></scale>
		<rescale set="method" line="21"><f a=""><e path="Void"/></f></rescale>
		<_thresolds><c path="Array"><c path="Float"/></c></_thresolds>
		<_range><c path="Array"><c path="thx.math.scale.Quantile.TRange"/></c></_range>
		<_domain><c path="Array"><c path="Float"/></c></_domain>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.math.scale.Quantize" params="TRange" file="src/thx/math/scale/Quantize.hx">
		<implements path="thx.math.scale.IScale">
			<c path="Float"/>
			<c path="thx.math.scale.Quantize.TRange"/>
		</implements>
		<range public="1" set="method" line="39"><f a="x">
	<c path="Array"><c path="thx.math.scale.Quantize.TRange"/></c>
	<c path="thx.math.scale.Quantize"><c path="thx.math.scale.Quantize.TRange"/></c>
</f></range>
		<getRange public="1" set="method" line="38"><f a=""><c path="Array"><c path="thx.math.scale.Quantize.TRange"/></c></f></getRange>
		<domain public="1" set="method" line="30"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Quantize"><c path="thx.math.scale.Quantize.TRange"/></c>
</f></domain>
		<getDomain public="1" set="method" line="29"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<scale public="1" set="method" line="24"><f a="x:?_">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.math.scale.Quantize.TRange"/>
</f></scale>
		<_range><c path="Array"><c path="thx.math.scale.Quantize.TRange"/></c></_range>
		<i><c path="Float"/></i>
		<kx><c path="Float"/></kx>
		<x1><c path="Float"/></x1>
		<x0><c path="Float"/></x0>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.number.NumberParser" params="" file="src/thx/number/NumberParser.hx">
		<parse public="1" set="method" line="14" static="1"><f a="val:?cul">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="Float"/>
</f></parse>
		<cultureNumberEReg set="method" line="35" static="1"><f a="cul">
	<c path="thx.culture.Culture"/>
	<c path="EReg"/>
</f></cultureNumberEReg>
		<canParse public="1" set="method" line="99" static="1"><f a="val:?cul">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<e path="Bool"/>
</f></canParse>
		<haxe_doc>* ...
 * @author Justin Donaldson</haxe_doc>
	</class>
	<class path="thx.svg.Arc" params="T" file="src/thx/svg/Arc.hx">
		<fromObject public="1" set="method" line="99" static="1"><f a=""><c path="thx.svg.Arc"><a>
	<startAngle><c path="Float"/></startAngle>
	<outerRadius><c path="Float"/></outerRadius>
	<innerRadius><c path="Float"/></innerRadius>
	<endAngle><c path="Float"/></endAngle>
</a></c></f></fromObject>
		<fromAngleObject public="1" set="method" line="109" static="1"><f a=""><c path="thx.svg.Arc"><a>
	<startAngle><c path="Float"/></startAngle>
	<endAngle><c path="Float"/></endAngle>
</a></c></f></fromAngleObject>
		<centroid public="1" set="method" line="92"><f a="?d:?i">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></centroid>
		<shape public="1" set="method" line="54"><f a="?d:?i">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<endAnglef public="1" set="method" line="48"><f a="v">
	<f a=":">
		<c path="thx.svg.Arc.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></endAnglef>
		<endAngle public="1" set="method" line="47"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></endAngle>
		<getEndAngle public="1" set="method" line="46"><f a=""><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getEndAngle>
		<startAnglef public="1" set="method" line="40"><f a="v">
	<f a=":">
		<c path="thx.svg.Arc.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></startAnglef>
		<startAngle public="1" set="method" line="39"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></startAngle>
		<getStartAngle public="1" set="method" line="38"><f a=""><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getStartAngle>
		<outerRadiusf public="1" set="method" line="32"><f a="v">
	<f a=":">
		<c path="thx.svg.Arc.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></outerRadiusf>
		<outerRadius public="1" set="method" line="31"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></outerRadius>
		<getOuterRadius public="1" set="method" line="30"><f a=""><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getOuterRadius>
		<innerRadiusf public="1" set="method" line="24"><f a="v">
	<f a=":">
		<c path="thx.svg.Arc.T"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></innerRadiusf>
		<innerRadius public="1" set="method" line="23"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"><c path="thx.svg.Arc.T"/></c>
</f></innerRadius>
		<getInnerRadius public="1" set="method" line="22"><f a=""><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getInnerRadius>
		<_a1><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_a1>
		<_a0><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_a0>
		<_r1><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_r1>
		<_r0><f a=":">
	<c path="thx.svg.Arc.T"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_r0>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.svg.Area" params="TData" file="src/thx/svg/Area.hx">
		<pointArray public="1" set="method" line="60" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><c path="Array"><c path="Float"/></c></c>
</f></pointArray>
		<pointObject public="1" set="method" line="65" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><a>
	<y1><c path="Float"/></y1>
	<y0><c path="Float"/></y0>
	<x><c path="Float"/></x>
</a></c>
</f></pointObject>
		<pointArray2 public="1" set="method" line="70" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><c path="Array"><c path="Float"/></c></c>
</f></pointArray2>
		<pointObjectXY public="1" set="method" line="75" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></c>
</f></pointObjectXY>
		<y1 public="1" set="method" line="54"><f a="v">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></y1>
		<getY1 public="1" set="method" line="53"><f a=""><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getY1>
		<y0 public="1" set="method" line="47"><f a="v">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></y0>
		<getY0 public="1" set="method" line="46"><f a=""><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getY0>
		<x public="1" set="method" line="40"><f a="v">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></x>
		<getX public="1" set="method" line="39"><f a=""><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getX>
		<interpolator public="1" set="method" line="33"><f a="type">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></interpolator>
		<getInterpolator public="1" set="method" line="32"><f a=""><e path="thx.svg.LineInterpolator"/></f></getInterpolator>
		<shape public="1" set="method" line="22"><f a="?data:?i">
	<c path="Array"><c path="thx.svg.Area.TData"/></c>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<_interpolator><e path="thx.svg.LineInterpolator"/></_interpolator>
		<_y1><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_y1>
		<_y0><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_y0>
		<_x><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_x>
		<new public="1" set="method" line="14"><f a="?x:?y0:?y1:?interpolator">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="thx.svg.LineInterpolator"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.svg.Chord" params="TData:TChord" file="src/thx/svg/Chord.hx">
		<pathObject public="1" set="method" line="127" static="1"><f a=""><c path="thx.svg.Chord">
	<a>
		<target><t path="thx.svg._Chord.ChordType"/></target>
		<startAngle><c path="Float"/></startAngle>
		<source><t path="thx.svg._Chord.ChordType"/></source>
		<radius><c path="Float"/></radius>
		<endAngle><c path="Float"/></endAngle>
	</a>
	<t path="thx.svg._Chord.ChordType"/>
</c></f></pathObject>
		<endAnglef public="1" set="method" line="121"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></endAnglef>
		<endAngle public="1" set="method" line="116"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></endAngle>
		<getEndAngle public="1" set="method" line="115"><f a=""><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getEndAngle>
		<startAnglef public="1" set="method" line="109"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></startAnglef>
		<startAngle public="1" set="method" line="104"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></startAngle>
		<getStartAngle public="1" set="method" line="103"><f a=""><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getStartAngle>
		<radiusf public="1" set="method" line="97"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></radiusf>
		<radius public="1" set="method" line="92"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></radius>
		<getRadius public="1" set="method" line="91"><f a=""><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getRadius>
		<targetf public="1" set="method" line="85"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></targetf>
		<target public="1" set="method" line="80"><f a="v">
	<c path="thx.svg.Chord.TChord"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></target>
		<getTarget public="1" set="method" line="79"><f a=""><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></f></getTarget>
		<sourcef public="1" set="method" line="73"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></sourcef>
		<source public="1" set="method" line="68"><f a="v">
	<c path="thx.svg.Chord.TChord"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></source>
		<getSource public="1" set="method" line="67"><f a=""><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></f></getSource>
		<curve set="method" line="62"><f a="r0:p0:r1:p1">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
</f></curve>
		<arc set="method" line="57"><f a="r:p">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
</f></arc>
		<equals set="method" line="52"><f a="a:b">
	<a>
		<a1 set="null"><c path="Float"/></a1>
		<a0 set="null"><c path="Float"/></a0>
	</a>
	<a>
		<a1 set="null"><c path="Float"/></a1>
		<a0 set="null"><c path="Float"/></a0>
	</a>
	<e path="Bool"/>
</f></equals>
		<subgroup set="method" line="37"><f a="f:d:i">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<a>
		<r><c path="Float"/></r>
		<p1><c path="Array"><c path="Float"/></c></p1>
		<p0><c path="Array"><c path="Float"/></c></p0>
		<a1><c path="Float"/></a1>
		<a0><c path="Float"/></a0>
	</a>
</f></subgroup>
		<shape public="1" set="method" line="24"><f a="d:i">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<_endAngle><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_endAngle>
		<_startAngle><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_startAngle>
		<_radius><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_radius>
		<_target><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></_target>
		<_source><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></_source>
		<new public="1" set="method" line="15"><f a="source:target:radius:startAngle:endAngle">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="thx.svg._Chord.ChordType" params="" file="src/thx/svg/Chord.hx" private="1" module="thx.svg.Chord"><a>
	<startAngle><c path="Float"/></startAngle>
	<radius><c path="Float"/></radius>
	<endAngle><c path="Float"/></endAngle>
</a></typedef>
	<class path="thx.svg.Diagonal" params="T" file="src/thx/svg/Diagonal.hx">
		<diagonalProjection public="1" set="method" line="46" static="1"><f a="d:?_">
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></diagonalProjection>
		<forObject public="1" set="method" line="51" static="1"><f a=""><c path="thx.svg.Diagonal"><a>
	<y1><c path="Float"/></y1>
	<y0><c path="Float"/></y0>
	<x1><c path="Float"/></x1>
	<x0><c path="Float"/></x0>
</a></c></f></forObject>
		<forArray public="1" set="method" line="58" static="1"><f a=""><c path="thx.svg.Diagonal"><c path="Array"><c path="Float"/></c></c></f></forArray>
		<projection public="1" set="method" line="40"><f a="x">
	<f a=":">
		<c path="Array"><c path="Float"/></c>
		<c path="Int"/>
		<c path="Array"><c path="Float"/></c>
	</f>
	<c path="thx.svg.Diagonal"><c path="thx.svg.Diagonal.T"/></c>
</f></projection>
		<getProjection public="1" set="method" line="39"><f a=""><f a=":">
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></f></getProjection>
		<targetf public="1" set="method" line="33"><f a="x">
	<f a=":">
		<c path="thx.svg.Diagonal.T"/>
		<c path="Int"/>
		<c path="Array"><c path="Float"/></c>
	</f>
	<c path="thx.svg.Diagonal"><c path="thx.svg.Diagonal.T"/></c>
</f></targetf>
		<getTarget public="1" set="method" line="32"><f a=""><f a=":">
	<c path="thx.svg.Diagonal.T"/>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></f></getTarget>
		<sourcef public="1" set="method" line="26"><f a="x">
	<f a=":">
		<c path="thx.svg.Diagonal.T"/>
		<c path="Int"/>
		<c path="Array"><c path="Float"/></c>
	</f>
	<c path="thx.svg.Diagonal"><c path="thx.svg.Diagonal.T"/></c>
</f></sourcef>
		<getSource public="1" set="method" line="25"><f a=""><f a=":">
	<c path="thx.svg.Diagonal.T"/>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></f></getSource>
		<diagonal public="1" set="method" line="15"><f a="d:?i">
	<c path="thx.svg.Diagonal.T"/>
	<c path="Int"/>
	<c path="String"/>
</f></diagonal>
		<_projection><f a=":">
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></_projection>
		<_target><f a=":">
	<c path="thx.svg.Diagonal.T"/>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></_target>
		<_source><f a=":">
	<c path="thx.svg.Diagonal.T"/>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></_source>
		<new public="1" set="method" line="10"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.svg.Line" params="TData" file="src/thx/svg/Line.hx">
		<pointArray public="1" set="method" line="51" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Line"><c path="Array"><c path="Float"/></c></c>
</f></pointArray>
		<pointObject public="1" set="method" line="56" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Line"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></c>
</f></pointObject>
		<y public="1" set="method" line="45"><f a="v">
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Line"><c path="thx.svg.Line.TData"/></c>
</f></y>
		<getY public="1" set="method" line="43"><f a=""><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getY>
		<x public="1" set="method" line="37"><f a="v">
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Line"><c path="thx.svg.Line.TData"/></c>
</f></x>
		<getX public="1" set="method" line="35"><f a=""><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getX>
		<interpolator public="1" set="method" line="29"><f a="type">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Line"><c path="thx.svg.Line.TData"/></c>
</f></interpolator>
		<getInterpolator public="1" set="method" line="28"><f a=""><e path="thx.svg.LineInterpolator"/></f></getInterpolator>
		<shape public="1" set="method" line="23"><f a="?data:?i">
	<c path="Array"><c path="thx.svg.Line.TData"/></c>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<_interpolator><e path="thx.svg.LineInterpolator"/></_interpolator>
		<_y><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_y>
		<_x><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_x>
		<new public="1" set="method" line="16"><f a="x:y:?interpolator">
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="thx.svg.LineInterpolator"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 * @todo complete line functions</haxe_doc>
	</class>
	<class path="thx.svg.LineInternals" params="" file="src/thx/svg/LineInternals.hx">
		<arcOffset public="1" line="12" static="1"><c path="Float"/></arcOffset>
		<arcMax public="1" line="13" static="1"><c path="Float"/></arcMax>
		<linePoints public="1" params="TData" set="method" line="15" static="1"><f a="data:x:y">
	<c path="Array"><c path="linePoints.TData"/></c>
	<f a=":">
		<c path="linePoints.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="linePoints.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
</f></linePoints>
		<interpolatePoints public="1" set="method" line="29" static="1"><f a="points:type">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<e path="thx.svg.LineInterpolator"/>
	<c path="String"/>
</f></interpolatePoints>
		<_lineBasisBezier1 line="166" static="1"><c path="Array"><c path="Float"/></c></_lineBasisBezier1>
		<_lineBasisBezier2 line="167" static="1"><c path="Array"><c path="Float"/></c></_lineBasisBezier2>
		<_lineBasisBezier3 line="168" static="1"><c path="Array"><c path="Float"/></c></_lineBasisBezier3>
		<_lineDot4 set="method" line="170" static="1"><f a="a:b">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
</f></_lineDot4>
		<_lineBasisBezier set="method" line="174" static="1"><f a="path:x:y">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="Void"/>
</f></_lineBasisBezier>
		<_lineSlope set="method" line="185" static="1"><f a="p0:p1">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
</f></_lineSlope>
		<_lineFiniteDifferences set="method" line="190" static="1"><f a="points">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Array"><c path="Float"/></c>
</f></_lineFiniteDifferences>
		<_lineMonotoneTangents set="method" line="206" static="1"><f a="points">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
</f></_lineMonotoneTangents>
		<_lineHermite set="method" line="248" static="1"><f a="points:tangents">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="String"/>
</f></_lineHermite>
		<_lineCardinalTangents set="method" line="293" static="1"><f a="points:tension">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Float"/>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
</f></_lineCardinalTangents>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<enum path="thx.svg.LineInterpolator" params="" file="src/thx/svg/LineInterpolator.hx">
		<StepBefore/>
		<StepAfter/>
		<Step/>
		<Monotone/>
		<Linear/>
		<CardinalOpen a="?tension"><c path="Float"/></CardinalOpen>
		<CardinalClosed a="?tension"><c path="Float"/></CardinalClosed>
		<Cardinal a="?tension"><c path="Float"/></Cardinal>
		<BasisOpen/>
		<BasisClosed/>
		<Basis/>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</enum>
	<class path="thx.svg.LineInterpolators" params="" file="src/thx/svg/LineInterpolators.hx">
		<parse public="1" set="method" line="11" static="1"><f a="s:?sep">
	<c path="String"/>
	<c path="String"/>
	<e path="thx.svg.LineInterpolator"/>
</f></parse>
		<argument set="method" line="43" static="1"><f a="s">
	<c path="String"/>
	<t path="Null"><c path="Float"/></t>
</f></argument>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.svg.PathGeoJson" params="" file="src/thx/svg/PathGeoJson.hx">
		<circle set="method" line="58" static="1"><f a="r">
	<c path="Float"/>
	<c path="String"/>
</f></circle>
		<bounds public="1" set="method" line="66" static="1"><f a="d">
	<t path="thx.json.Geometry"/>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
</f></bounds>
		<applyBounds set="method" line="82" static="1"><f a="d:f">
	<t path="thx.json.Geometry"/>
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></applyBounds>
		<setProjection set="method" line="53"><f a="projection">
	<c path="thx.geo.IProjection"/>
	<c path="thx.geo.IProjection"/>
</f></setProjection>
		<setPointRadius set="method" line="46"><f a="r">
	<c path="Float"/>
	<c path="Float"/>
</f></setPointRadius>
		<area public="1" set="method" line="41"><f a="d:?_">
	<t path="thx.json.Geometry"/>
	<unknown/>
	<c path="Float"/>
</f></area>
		<centroid public="1" set="method" line="36"><f a="d:?_">
	<t path="thx.json.Geometry"/>
	<unknown/>
	<c path="Array"><c path="Float"/></c>
</f></centroid>
		<path public="1" set="method" line="31"><f a="d:?_">
	<t path="thx.json.Geometry"/>
	<unknown/>
	<c path="String"/>
</f></path>
		<areaTypes><c path="thx.svg.AreaTypes"/></areaTypes>
		<centroidTypes><c path="thx.svg.CentroidTypes"/></centroidTypes>
		<pathTypes><c path="thx.svg.PathTypes"/></pathTypes>
		<pathCircle public="1"><c path="String"/></pathCircle>
		<projection public="1" set="setProjection"><c path="thx.geo.IProjection"/></projection>
		<pointRadius public="1" set="setPointRadius"><c path="Float"/></pointRadius>
		<new public="1" set="method" line="22"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.svg.PathTypes" params="" file="src/thx/svg/PathGeoJson.hx" module="thx.svg.PathGeoJson">
		<project set="method" line="233"><f a="coords">
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
</f></project>
		<geometryCollection public="1" set="method" line="225"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></geometryCollection>
		<multiPolygon public="1" set="method" line="205"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></multiPolygon>
		<polygon public="1" set="method" line="188"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></polygon>
		<multiLineString public="1" set="method" line="171"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></multiLineString>
		<lineString public="1" set="method" line="162"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></lineString>
		<multiPoint public="1" set="method" line="153"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></multiPoint>
		<point public="1" set="method" line="148"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></point>
		<feature public="1" set="method" line="143"><f a="f">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></feature>
		<featureCollection public="1" set="method" line="134"><f a="f">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></featureCollection>
		<path public="1" set="method" line="126"><f a="geo">
	<t path="thx.json.Geometry"/>
	<c path="String"/>
</f></path>
		<geo><c path="thx.svg.PathGeoJson"/></geo>
		<new public="1" set="method" line="121"><f a="geo">
	<c path="thx.svg.PathGeoJson"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.svg.AreaTypes" params="" file="src/thx/svg/PathGeoJson.hx" module="thx.svg.PathGeoJson">
		<project set="method" line="297"><f a="d:_">
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<parea set="method" line="296"><f a="coords">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Float"/>
</f></parea>
		<polygonArea set="method" line="288"><f a="coords">
	<c path="Array"><c path="Array"><c path="Array"><c path="Float"/></c></c></c>
	<c path="Float"/>
</f></polygonArea>
		<geometryCollection public="1" set="method" line="280"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></geometryCollection>
		<multiPolygon public="1" set="method" line="271"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></multiPolygon>
		<polygon public="1" set="method" line="269"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></polygon>
		<multiLineString public="1" set="method" line="268"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></multiLineString>
		<lineString public="1" set="method" line="267"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></lineString>
		<multiPoint public="1" set="method" line="266"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></multiPoint>
		<point public="1" set="method" line="265"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></point>
		<feature public="1" set="method" line="260"><f a="f">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></feature>
		<featureCollection public="1" set="method" line="252"><f a="f">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></featureCollection>
		<area public="1" set="method" line="244"><f a="geo">
	<t path="thx.json.Geometry"/>
	<c path="Float"/>
</f></area>
		<geo><c path="thx.svg.PathGeoJson"/></geo>
		<new public="1" set="method" line="239"><f a="geo">
	<c path="thx.svg.PathGeoJson"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.svg.CentroidTypes" params="" file="src/thx/svg/PathGeoJson.hx" module="thx.svg.PathGeoJson">
		<project set="method" line="368"><f a="d:?_">
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
</f></project>
		<polygonCentroid set="method" line="350"><f a="coordinates">
	<c path="Array"><c path="Array"><c path="Array"><c path="Float"/></c></c></c>
	<c path="Array"><c path="Float"/></c>
</f></polygonCentroid>
		<multiPolygon public="1" set="method" line="332"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Array"><c path="Float"/></c>
</f></multiPolygon>
		<polygon public="1" set="method" line="326"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Array"><c path="Float"/></c>
</f></polygon>
		<feature public="1" set="method" line="324"><f a="f">
	<t path="thx.json.Geometry"/>
	<c path="Array"><c path="Float"/></c>
</f></feature>
		<point public="1" set="method" line="322"><f a="o">
	<t path="thx.json.Geometry"/>
	<c path="Array"><c path="Float"/></c>
</f></point>
		<centroid public="1" set="method" line="308"><f a="geo">
	<t path="thx.json.Geometry"/>
	<c path="Array"><c path="Float"/></c>
</f></centroid>
		<geo><c path="thx.svg.PathGeoJson"/></geo>
		<new public="1" set="method" line="303"><f a="geo">
	<c path="thx.svg.PathGeoJson"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.svg.Symbol" params="" file="src/thx/svg/Symbol.hx">
		<sqrt3 line="11" static="1"><c path="Float"/></sqrt3>
		<tan30 line="12" static="1"><c path="Float"/></tan30>
		<triangleDown public="1" set="method" line="14" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></triangleDown>
		<triangleUp public="1" set="method" line="24" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></triangleUp>
		<square public="1" set="method" line="34" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></square>
		<diamond public="1" set="method" line="44" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></diamond>
		<cross public="1" set="method" line="55" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></cross>
		<circle public="1" set="method" line="73" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></circle>
		<arrowUp public="1" set="method" line="82" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></arrowUp>
		<arrowDown public="1" set="method" line="95" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></arrowDown>
		<arrowDownWide public="1" set="method" line="108" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></arrowDownWide>
		<arrowRight public="1" set="method" line="121" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></arrowRight>
		<arrowLeft public="1" set="method" line="134" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></arrowLeft>
		<star public="1" set="method" line="147" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></star>
		<haxe_doc>* Based on D3.js by Michael Bostock
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.text.ERegs" params="" file="src/thx/text/ERegs.hx">
		<_escapePattern line="5" static="1"><c path="EReg"/></_escapePattern>
		<escapeERegChars public="1" set="method" line="6" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeERegChars>
	</class>
	<class path="thx.text.Inflections" params="" file="src/thx/text/Inflections.hx">
		<pluralize public="1" set="method" line="38" static="1"><f a="singular">
	<c path="String"/>
	<c path="String"/>
</f></pluralize>
		<singularize public="1" set="method" line="43" static="1"><f a="plural">
	<c path="String"/>
	<c path="String"/>
</f></singularize>
		<process set="method" line="48" static="1"><f a="word:rules">
	<c path="String"/>
	<c path="Array"><a>
	<replace><c path="String"/></replace>
	<pattern><c path="EReg"/></pattern>
</a></c>
	<c path="String"/>
</f></process>
		<uncountable_words line="58" static="1"><c path="Array"><c path="String"/></c></uncountable_words>
		<plural_rules line="60" static="1"><c path="Array"><a>
	<replace><c path="String"/></replace>
	<pattern><c path="EReg"/></pattern>
</a></c></plural_rules>
		<singular_rules line="83" static="1"><c path="Array"><a>
	<replace><c path="String"/></replace>
	<pattern><c path="EReg"/></pattern>
</a></c></singular_rules>
		<haxe_doc>Based on the work of Ryan Schuft as reported below.
@author Franco Ponticelli

Copyright (c) 2007 Ryan Schuft (ryan.schuft@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

This code is based in part on the work done in Ruby to support
infection as part of Ruby on Rails in the ActiveSupport's Inflector
and Inflections classes.  It was initally ported to Javascript by
Ryan Schuft (ryan.schuft@gmail.com).

The code is available at http://code.google.com/p/inflection-js/</haxe_doc>
	</class>
	<class path="thx.text.Paths" params="" file="src/thx/text/Paths.hx">
		<base public="1" set="method" line="10" static="1"><f a="path:?suffix">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></base>
		<dir public="1" set="method" line="27" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></dir>
		<ext public="1" set="method" line="43" static="1"><f a="path">
	<c path="String"/>
	<t path="Null"><c path="String"/></t>
</f></ext>
		<removeExt public="1" set="method" line="48" static="1"><f a="filename">
	<c path="String"/>
	<c path="String"/>
</f></removeExt>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.translation.ITranslation" params="" file="src/thx/translation/ITranslation.hx" interface="1">
		<plural public="1" set="method"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></plural>
		<singular public="1" set="method"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></singular>
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
	</class>
	<class path="thx.translation.DictionaryTranslation" params="" file="src/thx/translation/DictionaryTranslation.hx">
		<implements path="thx.translation.ITranslation"/>
		<setDomain set="method" line="92"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setDomain>
		<getDomain set="method" line="86"><f a=""><c path="String"/></f></getDomain>
		<plural public="1" set="method" line="69"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></plural>
		<singular public="1" set="method" line="58"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></singular>
		<addPlural public="1" set="method" line="50"><f a="ids:idp:texts:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<e path="Void"/>
</f></addPlural>
		<addSingular public="1" set="method" line="43"><f a="id:text:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></addSingular>
		<addDomain public="1" set="method" line="24"><f a="?domain:?info">
	<c path="String"/>
	<c path="thx.culture.Info"/>
	<e path="Void"/>
</f></addDomain>
		<_domainsp><c path="Hash"><c path="Hash"><c path="Array"><c path="String"/></c></c></c></_domainsp>
		<_domainss><c path="Hash"><c path="Hash"><c path="String"/></c></c></_domainss>
		<_infos><c path="Hash"><c path="thx.culture.Info"/></c></_infos>
		<_domain><c path="String"/></_domain>
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
		<new public="1" set="method" line="16"><f a="?domain:?info">
	<c path="String"/>
	<c path="thx.culture.Info"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.translation.EmptyTranslation" params="" file="src/thx/translation/EmptyTranslation.hx">
		<implements path="thx.translation.ITranslation"/>
		<setDomain set="method" line="33"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setDomain>
		<getDomain set="method" line="29"><f a=""><c path="String"/></f></getDomain>
		<plural public="1" set="method" line="21"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></plural>
		<singular public="1" set="method" line="16"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></singular>
		<_domain><c path="String"/></_domain>
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.translation.PluralForms" params="" file="src/thx/translation/PluralForms.hx">
		<pluralRules public="1" line="10" static="1"><c path="Array"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></c></pluralRules>
		<pluralForms public="1" line="28" static="1"><c path="Array"><c path="Int"/></c></pluralForms>
		<pluralRulesDescriptions public="1" line="30" static="1"><c path="Array"><c path="String"/></c></pluralRulesDescriptions>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.type.Metas" params="" file="src/thx/type/Metas.hx"><getFieldInfo public="1" set="method" line="7" static="1"><f a="cls:field">
	<c path="Class"><d/></c>
	<c path="String"/>
	<unknown/>
</f></getFieldInfo></class>
	<class path="thx.type.Rttis" params="" file="src/thx/type/Rttis.hx">
		<typeName public="1" set="method" line="8" static="1"><f a="type:opt">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<c path="String"/>
</f></typeName>
		<typePath public="1" set="method" line="59" static="1"><f a="type">
	<e path="haxe.rtti.CType"/>
	<t path="haxe.rtti.Path"/>
</f></typePath>
		<methodArgumentTypes public="1" set="method" line="70" static="1"><f a="cls:method">
	<c path="Class"><d/></c>
	<c path="String"/>
	<t path="Null"><c path="Array"><c path="String"/></c></t>
</f></methodArgumentTypes>
		<methodArguments public="1" set="method" line="82" static="1"><f a="field">
	<t path="haxe.rtti.ClassField"/>
	<c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
</f></methodArguments>
		<methodReturnType public="1" set="method" line="93" static="1"><f a="field">
	<t path="haxe.rtti.ClassField"/>
	<e path="haxe.rtti.CType"/>
</f></methodReturnType>
		<argumentAcceptNull public="1" set="method" line="104" static="1"><f a="arg">
	<a>
		<t><e path="haxe.rtti.CType"/></t>
		<opt><e path="Bool"/></opt>
		<name><c path="String"/></name>
	</a>
	<e path="Bool"/>
</f></argumentAcceptNull>
		<getClassFields public="1" set="method" line="117" static="1"><f a="cls">
	<c path="Class"><d/></c>
	<c path="Hash"><t path="haxe.rtti.ClassField"/></c>
</f></getClassFields>
		<typeParametersMap public="1" set="method" line="122" static="1"><f a="cls:?hash">
	<c path="Class"><d/></c>
	<c path="Hash"><e path="haxe.rtti.CType"/></c>
	<c path="Hash"><e path="haxe.rtti.CType"/></c>
</f></typeParametersMap>
		<unifyFields public="1" set="method" line="141" static="1"><f a="cls:?h">
	<t path="haxe.rtti.Classdef"/>
	<c path="Hash"><t path="haxe.rtti.ClassField"/></c>
	<c path="Hash"><t path="haxe.rtti.ClassField"/></c>
</f></unifyFields>
		<hasInfo public="1" set="method" line="164" static="1"><f a="cls">
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></hasInfo>
		<_cache line="169" static="1"><c path="Hash"><t path="haxe.rtti.Classdef"/></c></_cache>
		<getClassDef public="1" set="method" line="170" static="1"><f a="cls">
	<c path="Class"><d/></c>
	<t path="Null"><t path="haxe.rtti.Classdef"/></t>
</f></getClassDef>
		<isMethod public="1" set="method" line="189" static="1"><f a="field">
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></isMethod>
	</class>
	<class path="thx.util.Imports" params="" file="src/thx/util/Imports.hx"><haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc></class>
	<class path="thx.util.MacroVersion" params="" file="src/thx/util/MacroVersion.hx"><haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc></class>
	<enum path="thx.util.Result" params="" file="src/thx/util/Result.hx">
		<Ok/>
		<Failure a="messages"><c path="Array"><c path="thx.util.Message"/></c></Failure>
	</enum>
	<class path="thx.util.Results" params="" file="src/thx/util/Results.hx">
		<toString public="1" set="method" line="12" static="1"><f a="value:?glue">
	<e path="thx.util.Result"/>
	<c path="String"/>
	<c path="String"/>
</f></toString>
		<failure public="1" get="inline" set="null" line="26" static="1"><f a="msg:?params:?param:?pos">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="thx.util.Result"/>
</f></failure>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.util.TypeLocator" params="" file="src/thx/util/TypeLocator.hx">
		<get public="1" params="T" set="method" line="42"><f a="cls">
	<c path="Class"><c path="get.T"/></c>
	<t path="Null"><c path="get.T"/></t>
</f></get>
		<unbinded public="1" params="T" set="dynamic" line="37"><f a="cls">
	<c path="Class"><c path="unbinded.T"/></c>
	<t path="Null"><c path="unbinded.T"/></t>
</f></unbinded>
		<memoize public="1" params="T" set="method" line="27"><f a="cls:f">
	<c path="Class"><c path="memoize.T"/></c>
	<f a=""><c path="memoize.T"/></f>
	<c path="thx.util.TypeLocator"/>
</f></memoize>
		<bind public="1" params="T" set="method" line="21"><f a="cls:f">
	<c path="Class"><c path="bind.T"/></c>
	<f a=""><c path="bind.T"/></f>
	<c path="thx.util.TypeLocator"/>
</f></bind>
		<instance public="1" params="T" set="method" line="16"><f a="cls:o">
	<c path="Class"><c path="instance.T"/></c>
	<c path="instance.T"/>
	<c path="thx.util.TypeLocator"/>
</f></instance>
		<_binders><c path="Hash"><f a=""><d/></f></c></_binders>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.util.Version" params="" file="src/thx/util/Version.hx">
		<fromString public="1" set="method" line="27" static="1"><f a="s">
	<c path="String"/>
	<c path="thx.util.Version"/>
</f></fromString>
		<incrementMajor public="1" set="method" line="55"><f a=""><c path="thx.util.Version"/></f></incrementMajor>
		<incrementMinor public="1" set="method" line="50"><f a=""><c path="thx.util.Version"/></f></incrementMinor>
		<incrementMaintenance public="1" set="method" line="45"><f a=""><c path="thx.util.Version"/></f></incrementMaintenance>
		<incrementBuild public="1" set="method" line="40"><f a=""><c path="thx.util.Version"/></f></incrementBuild>
		<toString public="1" set="method" line="25"><f a=""><c path="String"/></f></toString>
		<fullVersion public="1" set="method" line="23"><f a=""><c path="String"/></f></fullVersion>
		<build public="1" set="null"><c path="Int"/></build>
		<maintenance public="1" set="null"><c path="Int"/></maintenance>
		<minor public="1" set="null"><c path="Int"/></minor>
		<major public="1" set="null"><c path="Int"/></major>
		<new public="1" set="method" line="15"><f a="major:minor:maintenance:build">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.IValidator" params="T" file="src/thx/validation/IValidator.hx" interface="1">
		<isValid public="1" set="method"><f a="value">
	<c path="thx.validation.IValidator.T"/>
	<e path="Bool"/>
</f></isValid>
		<validate public="1" set="method"><f a="value">
	<c path="thx.validation.IValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.Validator" params="T" file="src/thx/validation/Validator.hx">
		<implements path="thx.validation.IValidator"><c path="thx.validation.Validator.T"/></implements>
		<isValid public="1" set="method" line="16"><f a="value">
	<c path="thx.validation.Validator.T"/>
	<e path="Bool"/>
</f></isValid>
		<validate public="1" set="method" line="11"><f a="value">
	<c path="thx.validation.Validator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.CustomValidator" params="T" file="src/thx/validation/CustomValidator.hx">
		<extends path="thx.validation.Validator"><c path="thx.validation.CustomValidator.T"/></extends>
		<clear public="1" set="method" line="34"><f a=""><e path="Void"/></f></clear>
		<add public="1" set="method" line="29"><f a="handler">
	<f a="">
		<c path="thx.validation.CustomValidator.T"/>
		<c path="thx.util.Message"/>
	</f>
	<e path="Void"/>
</f></add>
		<validate public="1" set="method" line="18" override="1"><f a="value">
	<c path="thx.validation.CustomValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<validators><c path="Array"><f a="">
	<c path="thx.validation.CustomValidator.T"/>
	<c path="thx.util.Message"/>
</f></c></validators>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.DateRangeValidator" params="" file="src/thx/validation/DateRangeValidator.hx">
		<extends path="thx.validation.Validator"><c path="Date"/></extends>
		<validate public="1" set="method" line="25" override="1"><f a="value">
	<c path="Date"/>
	<e path="thx.util.Result"/>
</f></validate>
		<maxInclusive public="1"><e path="Bool"/></maxInclusive>
		<minInclusive public="1"><e path="Bool"/></minInclusive>
		<max public="1"><t path="Null"><c path="Date"/></t></max>
		<min public="1"><t path="Null"><c path="Date"/></t></min>
		<new public="1" set="method" line="17"><f a="?min:?max:?mininclusive:?maxinclusive">
	<c path="Date"/>
	<c path="Date"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.EmailValidator" params="" file="src/thx/validation/EmailValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<_reEmail line="13" static="1"><c path="EReg"/></_reEmail>
		<_reEmailDomain line="14" static="1"><c path="EReg"/></_reEmailDomain>
		<validate public="1" set="method" line="22" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<validateDomain public="1"><e path="Bool"/></validateDomain>
		<new public="1" set="method" line="17"><f a="?validatedomain">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.IncrementValidator" params="" file="src/thx/validation/IncrementValidator.hx">
		<extends path="thx.validation.Validator"><c path="Float"/></extends>
		<validate public="1" set="method" line="21" override="1"><f a="value">
	<c path="Float"/>
	<e path="thx.util.Result"/>
</f></validate>
		<increment public="1"><c path="Float"/></increment>
		<new public="1" set="method" line="14"><f a="increment">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="thx.validation.Option" params="T" file="src/thx/validation/Option.hx">
		<a>
			<value><c path="thx.validation.Option.T"/></value>
			<label><c path="String"/></label>
		</a>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</typedef>
	<class path="thx.validation.OptionValidator" params="T" file="src/thx/validation/OptionValidator.hx">
		<extends path="thx.validation.Validator"><c path="thx.validation.OptionValidator.T"/></extends>
		<validate public="1" set="method" line="57" override="1"><f a="value">
	<c path="thx.validation.OptionValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<descriptions public="1" set="method" line="44"><f a=""><c path="Array"><c path="String"/></c></f></descriptions>
		<labels public="1" set="method" line="36"><f a=""><c path="Array"><c path="String"/></c></f></labels>
		<valueExists public="1" set="method" line="29"><f a="v">
	<c path="thx.validation.OptionValidator.T"/>
	<e path="Bool"/>
</f></valueExists>
		<showOptionsInFailureMessage public="1"><e path="Bool"/></showOptionsInFailureMessage>
		<options public="1"><c path="Array"><t path="thx.validation.Option"><c path="thx.validation.OptionValidator.T"/></t></c></options>
		<new public="1" set="method" line="15"><f a="?options:?it:?showOptionsInFailureMessage">
	<t path="Iterable"><t path="thx.validation.Option"><c path="thx.validation.OptionValidator.T"/></t></t>
	<t path="Iterable"><c path="thx.validation.OptionValidator.T"/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.PatternValidator" params="" file="src/thx/validation/PatternValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<validate public="1" set="method" line="21" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<failureMessage public="1"><c path="String"/></failureMessage>
		<pattern public="1"><c path="EReg"/></pattern>
		<new public="1" set="method" line="15"><f a="pattern:?failureMessage">
	<c path="EReg"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.RangeValidator" params="T" file="src/thx/validation/RangeValidator.hx">
		<extends path="thx.validation.Validator"><c path="thx.validation.RangeValidator.T"/></extends>
		<validate public="1" set="method" line="26" override="1"><f a="value">
	<c path="thx.validation.RangeValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<maxInclusive public="1"><e path="Bool"/></maxInclusive>
		<minInclusive public="1"><e path="Bool"/></minInclusive>
		<max public="1"><t path="Null"><c path="Float"/></t></max>
		<min public="1"><t path="Null"><c path="Float"/></t></min>
		<new public="1" set="method" line="18"><f a="?min:?max:?mininclusive:?maxinclusive">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.SingleLineValidator" params="" file="src/thx/validation/SingleLineValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<_re line="12" static="1"><c path="EReg"/></_re>
		<validate public="1" set="method" line="15" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.StringLengthValidator" params="" file="src/thx/validation/StringLengthValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<validate public="1" set="method" line="21" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<maxLength public="1"><t path="Null"><c path="Int"/></t></maxLength>
		<minLength public="1"><c path="Int"/></minLength>
		<new public="1" set="method" line="15"><f a="?minlength:?maxlength">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.validation.UrlValidator" params="" file="src/thx/validation/UrlValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<_reUrl line="11" static="1"><c path="EReg"/></_reUrl>
		<validate public="1" set="method" line="15" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
	<class path="thx.xml.AutoDocumentFormat" params="" file="src/thx/xml/AutoDocumentFormat.hx">
		<extends path="thx.xml.DocumentFormat"/>
		<formatCData set="method" line="86" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<formatPCData set="method" line="81" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatDocument set="method" line="76" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocument>
		<formatChildren set="method" line="68" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatChildren>
		<formatCloseElement set="method" line="63" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatOpenElement set="method" line="58" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatEmptyElement set="method" line="53" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatComment set="method" line="45" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatProlog set="method" line="40" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatDocType set="method" line="35" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<format public="1" set="method" line="30" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<indentWrap set="method" line="25"><f a="content">
	<c path="String"/>
	<c path="String"/>
</f></indentWrap>
		<_begin><e path="Bool"/></_begin>
		<_level><c path="Int"/></_level>
		<wrapColumns public="1"><c path="Int"/></wrapColumns>
		<newline public="1"><c path="String"/></newline>
		<indent public="1"><c path="String"/></indent>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.ValueFormat" params="" file="src/thx/xml/ValueFormat.hx">
		<format public="1" set="method" line="7"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></format>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.NormalizeNewlineValueFormat" params="" file="src/thx/xml/NormalizeNewlineValueFormat.hx">
		<extends path="thx.xml.ValueFormat"/>
		<format public="1" set="method" line="14" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></format>
		<_newline><c path="String"/></_newline>
		<_newLineReplace><c path="EReg"/></_newLineReplace>
		<new public="1" set="method" line="7"><f a="?newline">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.xml.NormalizeWhitespaceValueFormat" params="" file="src/thx/xml/NormalizeWhitespaceValueFormat.hx">
		<extends path="thx.xml.ValueFormat"/>
		<format public="1" set="method" line="15" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></format>
		<_wsTestEnd><c path="EReg"/></_wsTestEnd>
		<_wsTestStart><c path="EReg"/></_wsTestStart>
		<_wsReplace><c path="EReg"/></_wsReplace>
		<new public="1" set="method" line="9"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.XmlWriter" params="" file="src/thx/xml/XmlWriter.hx">
		<_t get="inline" set="null" line="100"><f a=""><c path="Xml"/></f></_t>
		<toString public="1" set="method" line="95"><f a=""><c path="String"/></f></toString>
		<close public="1" set="method" line="82"><f a=""><c path="thx.xml.XmlWriter"/></f></close>
		<comment public="1" set="method" line="76"><f a="s">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></comment>
		<cdata public="1" set="method" line="70"><f a="s">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></cdata>
		<text public="1" set="method" line="64"><f a="s">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></text>
		<attrIf public="1" set="method" line="57"><f a="?cond:name:value">
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></attrIf>
		<appendTo public="1" set="method" line="48"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></appendTo>
		<attr public="1" set="method" line="42"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></attr>
		<open public="1" set="method" line="34"><f a="tag">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></open>
		<tag public="1" set="method" line="27"><f a="name">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></tag>
		<xml public="1" set="method" line="22"><f a=""><c path="Xml"/></f></xml>
		<_current><c path="Xml"/></_current>
		<_stack><c path="Array"><c path="Xml"/></c></_stack>
		<new public="1" set="method" line="14"><f a="?xml">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Franco Ponticelli</haxe_doc>
	</class>
</haxe>