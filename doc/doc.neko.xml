<haxe>
	<class path="thx.culture.Info" params="" file="src/thx/culture/Info.hx">
		<name public="1" set="null"><c path="String"/></name>
		<native public="1" set="null"><c path="String"/></native>
		<english public="1" set="null"><c path="String"/></english>
		<iso2 public="1" set="null"><c path="String"/></iso2>
		<iso3 public="1" set="null"><c path="String"/></iso3>
		<pluralRule public="1" set="null"><c path="Int"/></pluralRule>
		<toString public="1" set="method" line="17"><f a=""><c path="String"/></f></toString>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.culture.Culture" params="" file="src/thx/culture/Culture.hx">
		<extends path="thx.culture.Info"/>
		<cultures get="getCultures" set="null" static="1"><c path="Hash"><c path="thx.culture.Culture"/></c></cultures>
		<getCultures set="method" line="39" static="1"><f a=""><c path="Hash"><c path="thx.culture.Culture"/></c></f></getCultures>
		<get public="1" set="method" line="46" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
</f></get>
		<names public="1" set="method" line="51" static="1"><f a=""><t path="Iterator"><c path="String"/></t></f></names>
		<_defaultCulture static="1"><c path="thx.culture.Culture"/></_defaultCulture>
		<defaultCulture public="1" get="getDefaultCulture" set="setDefaultCulture" static="1"><c path="thx.culture.Culture"/></defaultCulture>
		<getDefaultCulture set="method" line="59" static="1"><f a=""><c path="thx.culture.Culture"/></f></getDefaultCulture>
		<setDefaultCulture set="method" line="67" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.Culture"/>
</f></setDefaultCulture>
		<add public="1" set="method" line="72" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<e path="Void"/>
</f></add>
		<loadAll public="1" set="method" line="81" static="1"><f a=""><e path="Void"/></f></loadAll>
		<language public="1" set="null"><c path="thx.culture.Language"/></language>
		<date public="1" set="null"><c path="thx.culture.core.DateTimeInfo"/></date>
		<englishCurrency public="1" set="null"><c path="String"/></englishCurrency>
		<nativeCurrency public="1" set="null"><c path="String"/></nativeCurrency>
		<currencySymbol public="1" set="null"><c path="String"/></currencySymbol>
		<currencyIso public="1" set="null"><c path="String"/></currencyIso>
		<englishRegion public="1" set="null"><c path="String"/></englishRegion>
		<nativeRegion public="1" set="null"><c path="String"/></nativeRegion>
		<isMetric public="1" set="null"><e path="Bool"/></isMetric>
		<digits public="1" set="null"><t path="Null"><c path="Array"><c path="String"/></c></t></digits>
		<signNeg public="1" set="null"><c path="String"/></signNeg>
		<signPos public="1" set="null"><c path="String"/></signPos>
		<symbolNaN public="1" set="null"><c path="String"/></symbolNaN>
		<symbolPercent public="1" set="null"><c path="String"/></symbolPercent>
		<symbolPermille public="1" set="null"><c path="String"/></symbolPermille>
		<symbolNegInf public="1" set="null"><c path="String"/></symbolNegInf>
		<symbolPosInf public="1" set="null"><c path="String"/></symbolPosInf>
		<number public="1" set="null"><c path="thx.culture.core.NumberInfo"/></number>
		<currency public="1" set="null"><c path="thx.culture.core.NumberInfo"/></currency>
		<percent public="1" set="null"><c path="thx.culture.core.NumberInfo"/></percent>
		<haxe_doc>
* @todo add lazy loading
</haxe_doc>
	</class>
	<class path="thx.cultures.FrBE" params="" file="src/thx/cultures/FrBE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.collections.HashList" params="T" file="src/thx/collections/HashList.hx">
		<length public="1" set="null"><c path="Int"/></length>
		<set public="1" set="method" line="19"><f a="key:value">
	<c path="String"/>
	<c path="thx.collections.HashList.T"/>
	<e path="Void"/>
</f></set>
		<setAt public="1" set="method" line="29"><f a="index:key:value">
	<c path="Int"/>
	<c path="String"/>
	<c path="thx.collections.HashList.T"/>
	<e path="Void"/>
</f></setAt>
		<get public="1" set="method" line="37"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="thx.collections.HashList.T"/></t>
</f></get>
		<getAt public="1" set="method" line="42"><f a="index">
	<c path="Int"/>
	<t path="Null"><c path="thx.collections.HashList.T"/></t>
</f></getAt>
		<indexOf public="1" set="method" line="47"><f a="key">
	<c path="String"/>
	<c path="Int"/>
</f></indexOf>
		<exists public="1" set="method" line="56"><f a="key">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="61"><f a="key">
	<c path="String"/>
	<c path="thx.collections.HashList.T"/>
</f></remove>
		<removeAt public="1" set="method" line="71"><f a="index">
	<c path="Int"/>
	<c path="thx.collections.HashList.T"/>
</f></removeAt>
		<keyAt public="1" set="method" line="82"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></keyAt>
		<keys public="1" set="method" line="87"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<iterator public="1" set="method" line="92"><f a=""><t path="Iterator"><c path="thx.collections.HashList.T"/></t></f></iterator>
		<clear public="1" set="method" line="97"><f a=""><e path="Void"/></f></clear>
		<array public="1" set="method" line="104"><f a=""><c path="Array"><c path="thx.collections.HashList.T"/></c></f></array>
		<toString public="1" set="method" line="112"><f a=""><c path="String"/></f></toString>
		<__keys><c path="Array"><c path="String"/></c></__keys>
		<__hash><c path="Hash"><c path="thx.collections.HashList.T"/></c></__hash>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.util.Message" params="" file="src/thx/util/Message.hx">
		<message public="1" set="null"><c path="String"/></message>
		<params public="1" set="null"><c path="Array"><d/></c></params>
		<toString public="1" set="method" line="26"><f a=""><c path="String"/></f></toString>
		<translate public="1" set="method" line="31"><f a="translator">
	<f a="">
		<c path="String"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></translate>
		<new public="1" set="method" line="15"><f a="message:?params:?param">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.error.Error" params="" file="src/thx/error/Error.hx">
		<extends path="thx.util.Message"/>
		<pos public="1" set="null"><t path="haxe.PosInfos"/></pos>
		<inner public="1" set="null"><c path="thx.error.Error"/></inner>
		<setInner public="1" set="method" line="22"><f a="inner">
	<c path="thx.error.Error"/>
	<c path="thx.error.Error"/>
</f></setInner>
		<toString public="1" set="method" line="28" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="16"><f a="message:?params:?param:?pos">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.error.NullArgument" params="" file="src/thx/error/NullArgument.hx">
		<extends path="thx.error.Error"/>
		<throwIfNull public="1" get="inline" set="null" line="16" static="1"><f a="value:name:?posInfo">
	<d/>
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></throwIfNull>
		<new public="1" set="method" line="11"><f a="argumentName:?posInfo">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.ZhSG" params="" file="src/thx/cultures/ZhSG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.macro.Macros" params="" file="src/thx/macro/Macros.hx">
		<stringOfExpr public="1" set="method" line="10" static="1"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></stringOfExpr>
		<stringOfExprDef public="1" set="method" line="15" static="1"><f a="exp">
	<e path="haxe.macro.ExprDef"/>
	<c path="String"/>
</f></stringOfExprDef>
		<wrap params="T" set="method" line="54" static="1"><f a="elements:handler:?prefix:?suffix:?separator">
	<c path="Array"><c path="wrap.T"/></c>
	<f a="">
		<c path="wrap.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrap>
		<stringOfBinop public="1" set="method" line="68" static="1"><f a="b">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></stringOfBinop>
		<stringOfConstant public="1" set="method" line="97" static="1"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></stringOfConstant>
		<stringOfUnop public="1" set="method" line="107" static="1"><f a="o">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></stringOfUnop>
		<stringOfTypePath public="1" set="method" line="119" static="1"><f a="t">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></stringOfTypePath>
		<stringOfComplexType public="1" set="method" line="126" static="1"><f a="t">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></stringOfComplexType>
		<stringOfTypeParam public="1" set="method" line="138" static="1"><f a="p">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></stringOfTypeParam>
		<stringOfFunction public="1" set="method" line="147" static="1"><f a="f">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></stringOfFunction>
		<stringOfFunctionArg public="1" set="method" line="152" static="1"><f a="a">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></stringOfFunctionArg>
		<stringOfField public="1" set="method" line="161" static="1"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></stringOfField>
		<stringOfFieldType public="1" set="method" line="166" static="1"><f a="f:name">
	<e path="haxe.macro.FieldType"/>
	<c path="String"/>
	<c path="String"/>
</f></stringOfFieldType>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.culture.Language" params="" file="src/thx/culture/Language.hx">
		<extends path="thx.culture.Info"/>
		<languages get="getLanguages" set="null" static="1"><c path="Hash"><c path="thx.culture.Language"/></c></languages>
		<getLanguages set="method" line="9" static="1"><f a=""><c path="Hash"><c path="thx.culture.Language"/></c></f></getLanguages>
		<get public="1" set="method" line="16" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.culture.Language"/>
</f></get>
		<names public="1" set="method" line="20" static="1"><f a=""><t path="Iterator"><c path="String"/></t></f></names>
		<add public="1" set="method" line="24" static="1"><f a="language">
	<c path="thx.culture.Language"/>
	<e path="Void"/>
</f></add>
		<haxe_doc>
* @todo add lazy loading
</haxe_doc>
	</class>
	<class path="thx.languages.Mr" params="" file="src/thx/languages/Mr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fo" params="" file="src/thx/languages/Fo.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArYE" params="" file="src/thx/cultures/ArYE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.macro.Context" params="" file="C:\Projects\haxe/std/haxe/macro/Context.hx">
		<error public="1" set="method" line="37" static="1">
			<f a="msg:pos">
				<c path="String"/>
				<e path="haxe.macro.Position"/>
				<d/>
			</f>
			<haxe_doc>
		Display a compilation error at the given position in code
	</haxe_doc>
		</error>
		<warning public="1" set="method" line="44" static="1">
			<f a="msg:pos">
				<c path="String"/>
				<e path="haxe.macro.Position"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Display a compilation warning at the given position in code
	</haxe_doc>
		</warning>
		<resolvePath public="1" set="method" line="51" static="1">
			<f a="file">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Resolve a filename based on current classpath.
	</haxe_doc>
		</resolvePath>
		<getClassPath public="1" set="method" line="58" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>
		Return the current classpath
	</haxe_doc>
		</getClassPath>
		<currentPos public="1" set="method" line="69" static="1">
			<f a=""><e path="haxe.macro.Position"/></f>
			<haxe_doc>
		Returns the position at which the macro is called
	</haxe_doc>
		</currentPos>
		<getLocalClass public="1" set="method" line="76" static="1">
			<f a=""><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></f>
			<haxe_doc>
		Returns the current class in which the macro is called
	</haxe_doc>
		</getLocalClass>
		<defined public="1" set="method" line="88" static="1">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells is the given compiler directive has been defined with -D
	</haxe_doc>
		</defined>
		<getType public="1" set="method" line="95" static="1">
			<f a="name">
				<c path="String"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>
		Resolve a type from its name.
	</haxe_doc>
		</getType>
		<getModule public="1" set="method" line="102" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Array"><e path="haxe.macro.Type"/></c>
			</f>
			<haxe_doc>
		Return the list of types defined in the given compilation unit module
	</haxe_doc>
		</getModule>
		<parse public="1" set="method" line="109" static="1">
			<f a="expr:pos">
				<c path="String"/>
				<e path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>
		Parse an expression.
	</haxe_doc>
		</parse>
		<signature public="1" set="method" line="116" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Quickly build an hashed MD5 signature for any given value
	</haxe_doc>
		</signature>
		<onGenerate public="1" set="method" line="123" static="1">
			<f a="callb">
				<f a="">
					<c path="Array"><e path="haxe.macro.Type"/></c>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a callback function that will return all the types compiled before they get generated.
	</haxe_doc>
		</onGenerate>
		<typeof public="1" set="method" line="130" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>
		Evaluate the type a given expression would have in the context of the current macro call.
	</haxe_doc>
		</typeof>
		<follow public="1" set="method" line="137" static="1">
			<f a="t">
				<e path="haxe.macro.Type"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>
		Follow all typedefs to reach the actual real type
	</haxe_doc>
		</follow>
		<getPosInfos public="1" set="method" line="144" static="1">
			<f a="p">
				<e path="haxe.macro.Position"/>
				<a>
					<min><c path="Int"/></min>
					<max><c path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>
		Get the informations stored into a given position.
	</haxe_doc>
		</getPosInfos>
		<makePosition public="1" set="method" line="153" static="1">
			<f a="inf">
				<a>
					<min><c path="Int"/></min>
					<max><c path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<e path="haxe.macro.Position"/>
			</f>
			<haxe_doc>
		Build a position with the given informations.
	</haxe_doc>
		</makePosition>
		<addResource public="1" set="method" line="160" static="1">
			<f a="name:data">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<unknown/>
			</f>
			<haxe_doc>
		Add or modify a resource that will be accessible with haxe.Resource api.
	</haxe_doc>
		</addResource>
		<load set="method" line="164" static="1"><f a="f:nargs">
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></load>
		<haxe_doc>
	This is an API that can be used by macros implementations.
</haxe_doc>
	</class>
	<class path="thx.xml.DocumentFormat" params="" file="src/thx/xml/DocumentFormat.hx">
		<nodeFormat public="1"><c path="thx.xml.NodeFormat"/></nodeFormat>
		<stripComments public="1"><e path="Bool"/></stripComments>
		<format public="1" set="method" line="12"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<formatNode public="1" set="method" line="17"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatNode>
		<formatElement set="method" line="40"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatElement>
		<formatEmptyElement set="method" line="53"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatOpenElement set="method" line="58"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatCloseElement set="method" line="63"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatChildren set="method" line="68"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatChildren>
		<formatPCData set="method" line="76"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatCData set="method" line="81"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<formatDocument set="method" line="86"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocument>
		<formatDocType set="method" line="91"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatProlog set="method" line="96"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatComment set="method" line="101"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<isEmpty set="method" line="109"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></isEmpty>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Hash" params="T" file="C:\Projects\haxe/std/neko/_std/Hash.hx">
		<h><d/></h>
		<set public="1" get="inline" set="null" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="56">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="62">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="thx.color.Rgb" params="" file="src/thx/color/Rgb.hx">
		<fromFloats public="1" set="method" line="54" static="1"><f a="r:g:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.color.Rgb"/>
</f></fromFloats>
		<fromInt public="1" set="method" line="62" static="1"><f a="v">
	<c path="Int"/>
	<c path="thx.color.Rgb"/>
</f></fromInt>
		<equals public="1" set="method" line="67" static="1"><f a="a:b">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="72" static="1"><f a="color:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></darker>
		<interpolate public="1" set="method" line="81" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="90" static="1"><f a="a:b:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolatef>
		<contrast public="1" set="method" line="98" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></contrast>
		<contrastBW public="1" set="method" line="107" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></contrastBW>
		<blue public="1" set="null"><c path="Int"/></blue>
		<green public="1" set="null"><c path="Int"/></green>
		<red public="1" set="null"><c path="Int"/></red>
		<int public="1" set="method" line="32"><f a=""><c path="Int"/></f></int>
		<hex public="1" set="method" line="37"><f a="?prefix">
	<c path="String"/>
	<c path="String"/>
</f></hex>
		<toCss public="1" get="inline" set="null" line="42"><f a=""><c path="String"/></f></toCss>
		<toRgbString public="1" set="method" line="44"><f a=""><c path="String"/></f></toRgbString>
		<toString public="1" set="method" line="49"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="25">
			<f a="r:g:b">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 *
	 * @param r	an Int value between 0 and 255 for the red channel
	 * @param g	an Int value between 0 and 255 for the green channel
	 * @param b	an Int value between 0 and 255 for the blue channel
	 </haxe_doc>
		</new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.color.NamedColors" params="" file="src/thx/color/NamedColors.hx">
		<aliceblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></aliceblue>
		<antiquewhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></antiquewhite>
		<aqua public="1" set="null" static="1"><c path="thx.color.Rgb"/></aqua>
		<aquamarine public="1" set="null" static="1"><c path="thx.color.Rgb"/></aquamarine>
		<azure public="1" set="null" static="1"><c path="thx.color.Rgb"/></azure>
		<beige public="1" set="null" static="1"><c path="thx.color.Rgb"/></beige>
		<bisque public="1" set="null" static="1"><c path="thx.color.Rgb"/></bisque>
		<black public="1" set="null" static="1"><c path="thx.color.Rgb"/></black>
		<blanchedalmond public="1" set="null" static="1"><c path="thx.color.Rgb"/></blanchedalmond>
		<blue public="1" set="null" static="1"><c path="thx.color.Rgb"/></blue>
		<blueviolet public="1" set="null" static="1"><c path="thx.color.Rgb"/></blueviolet>
		<brown public="1" set="null" static="1"><c path="thx.color.Rgb"/></brown>
		<burlywood public="1" set="null" static="1"><c path="thx.color.Rgb"/></burlywood>
		<cadetblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></cadetblue>
		<chartreuse public="1" set="null" static="1"><c path="thx.color.Rgb"/></chartreuse>
		<chocolate public="1" set="null" static="1"><c path="thx.color.Rgb"/></chocolate>
		<coral public="1" set="null" static="1"><c path="thx.color.Rgb"/></coral>
		<cornflowerblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></cornflowerblue>
		<cornsilk public="1" set="null" static="1"><c path="thx.color.Rgb"/></cornsilk>
		<crimson public="1" set="null" static="1"><c path="thx.color.Rgb"/></crimson>
		<cyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></cyan>
		<darkblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkblue>
		<darkcyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkcyan>
		<darkgoldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgoldenrod>
		<darkgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgray>
		<darkgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgreen>
		<darkgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgrey>
		<darkkhaki public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkkhaki>
		<darkmagenta public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkmagenta>
		<darkolivegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkolivegreen>
		<darkorange public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkorange>
		<darkorchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkorchid>
		<darkred public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkred>
		<darksalmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></darksalmon>
		<darkseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkseagreen>
		<darkslateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslateblue>
		<darkslategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslategray>
		<darkslategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslategrey>
		<darkturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkturquoise>
		<darkviolet public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkviolet>
		<deeppink public="1" set="null" static="1"><c path="thx.color.Rgb"/></deeppink>
		<deepskyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></deepskyblue>
		<dimgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></dimgray>
		<dimgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></dimgrey>
		<dodgerblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></dodgerblue>
		<firebrick public="1" set="null" static="1"><c path="thx.color.Rgb"/></firebrick>
		<floralwhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></floralwhite>
		<forestgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></forestgreen>
		<fuchsia public="1" set="null" static="1"><c path="thx.color.Rgb"/></fuchsia>
		<gainsboro public="1" set="null" static="1"><c path="thx.color.Rgb"/></gainsboro>
		<ghostwhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></ghostwhite>
		<gold public="1" set="null" static="1"><c path="thx.color.Rgb"/></gold>
		<goldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></goldenrod>
		<gray public="1" set="null" static="1"><c path="thx.color.Rgb"/></gray>
		<green public="1" set="null" static="1"><c path="thx.color.Rgb"/></green>
		<greenyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></greenyellow>
		<grey public="1" set="null" static="1"><c path="thx.color.Rgb"/></grey>
		<honeydew public="1" set="null" static="1"><c path="thx.color.Rgb"/></honeydew>
		<hotpink public="1" set="null" static="1"><c path="thx.color.Rgb"/></hotpink>
		<indianred public="1" set="null" static="1"><c path="thx.color.Rgb"/></indianred>
		<indigo public="1" set="null" static="1"><c path="thx.color.Rgb"/></indigo>
		<ivory public="1" set="null" static="1"><c path="thx.color.Rgb"/></ivory>
		<khaki public="1" set="null" static="1"><c path="thx.color.Rgb"/></khaki>
		<lavender public="1" set="null" static="1"><c path="thx.color.Rgb"/></lavender>
		<lavenderblush public="1" set="null" static="1"><c path="thx.color.Rgb"/></lavenderblush>
		<lawngreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lawngreen>
		<lemonchiffon public="1" set="null" static="1"><c path="thx.color.Rgb"/></lemonchiffon>
		<lightblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightblue>
		<lightcoral public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightcoral>
		<lightcyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightcyan>
		<lightgoldenrodyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgoldenrodyellow>
		<lightgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgray>
		<lightgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgreen>
		<lightgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgrey>
		<lightpink public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightpink>
		<lightsalmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightsalmon>
		<lightseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightseagreen>
		<lightskyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightskyblue>
		<lightslategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightslategray>
		<lightslategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightslategrey>
		<lightsteelblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightsteelblue>
		<lightyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightyellow>
		<lime public="1" set="null" static="1"><c path="thx.color.Rgb"/></lime>
		<limegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></limegreen>
		<linen public="1" set="null" static="1"><c path="thx.color.Rgb"/></linen>
		<magenta public="1" set="null" static="1"><c path="thx.color.Rgb"/></magenta>
		<maroon public="1" set="null" static="1"><c path="thx.color.Rgb"/></maroon>
		<mediumaquamarine public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumaquamarine>
		<mediumblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumblue>
		<mediumorchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumorchid>
		<mediumpurple public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumpurple>
		<mediumseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumseagreen>
		<mediumslateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumslateblue>
		<mediumspringgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumspringgreen>
		<mediumturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumturquoise>
		<mediumvioletred public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumvioletred>
		<midnightblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></midnightblue>
		<mintcream public="1" set="null" static="1"><c path="thx.color.Rgb"/></mintcream>
		<mistyrose public="1" set="null" static="1"><c path="thx.color.Rgb"/></mistyrose>
		<moccasin public="1" set="null" static="1"><c path="thx.color.Rgb"/></moccasin>
		<navajowhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></navajowhite>
		<navy public="1" set="null" static="1"><c path="thx.color.Rgb"/></navy>
		<oldlace public="1" set="null" static="1"><c path="thx.color.Rgb"/></oldlace>
		<olive public="1" set="null" static="1"><c path="thx.color.Rgb"/></olive>
		<olivedrab public="1" set="null" static="1"><c path="thx.color.Rgb"/></olivedrab>
		<orange public="1" set="null" static="1"><c path="thx.color.Rgb"/></orange>
		<orangered public="1" set="null" static="1"><c path="thx.color.Rgb"/></orangered>
		<orchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></orchid>
		<palegoldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></palegoldenrod>
		<palegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></palegreen>
		<paleturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></paleturquoise>
		<palevioletred public="1" set="null" static="1"><c path="thx.color.Rgb"/></palevioletred>
		<papayawhip public="1" set="null" static="1"><c path="thx.color.Rgb"/></papayawhip>
		<peachpuff public="1" set="null" static="1"><c path="thx.color.Rgb"/></peachpuff>
		<peru public="1" set="null" static="1"><c path="thx.color.Rgb"/></peru>
		<pink public="1" set="null" static="1"><c path="thx.color.Rgb"/></pink>
		<plum public="1" set="null" static="1"><c path="thx.color.Rgb"/></plum>
		<powderblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></powderblue>
		<purple public="1" set="null" static="1"><c path="thx.color.Rgb"/></purple>
		<red public="1" set="null" static="1"><c path="thx.color.Rgb"/></red>
		<rosybrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></rosybrown>
		<royalblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></royalblue>
		<saddlebrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></saddlebrown>
		<salmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></salmon>
		<sandybrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></sandybrown>
		<seagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></seagreen>
		<seashell public="1" set="null" static="1"><c path="thx.color.Rgb"/></seashell>
		<sienna public="1" set="null" static="1"><c path="thx.color.Rgb"/></sienna>
		<silver public="1" set="null" static="1"><c path="thx.color.Rgb"/></silver>
		<skyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></skyblue>
		<slateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></slateblue>
		<slategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></slategray>
		<slategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></slategrey>
		<snow public="1" set="null" static="1"><c path="thx.color.Rgb"/></snow>
		<springgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></springgreen>
		<steelblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></steelblue>
		<tan public="1" set="null" static="1"><c path="thx.color.Rgb"/></tan>
		<teal public="1" set="null" static="1"><c path="thx.color.Rgb"/></teal>
		<thistle public="1" set="null" static="1"><c path="thx.color.Rgb"/></thistle>
		<tomato public="1" set="null" static="1"><c path="thx.color.Rgb"/></tomato>
		<turquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></turquoise>
		<violet public="1" set="null" static="1"><c path="thx.color.Rgb"/></violet>
		<wheat public="1" set="null" static="1"><c path="thx.color.Rgb"/></wheat>
		<white public="1" set="null" static="1"><c path="thx.color.Rgb"/></white>
		<whitesmoke public="1" set="null" static="1"><c path="thx.color.Rgb"/></whitesmoke>
		<yellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></yellow>
		<yellowgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></yellowgreen>
		<byName public="1" set="null" static="1"><c path="Hash"><c path="thx.color.Rgb"/></c></byName>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EnSG" params="" file="src/thx/cultures/EnSG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Mk" params="" file="src/thx/languages/Mk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ko" params="" file="src/thx/languages/Ko.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Is" params="" file="src/thx/languages/Is.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnGB" params="" file="src/thx/cultures/EnGB.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="IntHash" params="T" file="C:\Projects\haxe/std/neko/_std/IntHash.hx">
		<h><d/></h>
		<set public="1" get="inline" set="null" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="56">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="62">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="thx.cultures.FiFI" params="" file="src/thx/cultures/FiFI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.XmlFormat" params="" file="src/thx/xml/XmlFormat.hx">
		<indent public="1"><t path="Null"><c path="String"/></t></indent>
		<newline public="1"><t path="Null"><c path="String"/></t></newline>
		<stripComments public="1"><t path="Null"><e path="Bool"/></t></stripComments>
		<autoformat public="1"><e path="Bool"/></autoformat>
		<normalizeNewlines public="1"><e path="Bool"/></normalizeNewlines>
		<wrapColumns public="1"><t path="Null"><c path="Int"/></t></wrapColumns>
		<format public="1" set="method" line="22"><f a="xml">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<createValueFormat set="method" line="36"><f a=""><c path="thx.xml.ValueFormat"/></f></createValueFormat>
		<createAttributeFormat set="method" line="46"><f a=""><c path="thx.xml.AttributeFormat"/></f></createAttributeFormat>
		<createDocumentFormat set="method" line="51"><f a=""><c path="thx.xml.DocumentFormat"/></f></createDocumentFormat>
		<createNodeFormat set="method" line="71"><f a=""><c path="thx.xml.NodeFormat"/></f></createNodeFormat>
		<new public="1" set="method" line="14"><f a="?autoformat:?indent:?newline">
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.html.XHtmlFormat" params="" file="src/thx/html/XHtmlFormat.hx">
		<extends path="thx.xml.XmlFormat"/>
		<createDocumentFormat set="method" line="8" override="1"><f a=""><c path="thx.xml.DocumentFormat"/></f></createDocumentFormat>
		<new public="1" set="method" line="6"><f a="?autoformat:?indent:?newline">
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.html.HtmlFormat" params="" file="src/thx/html/HtmlFormat.hx">
		<extends path="thx.html.XHtmlFormat"/>
		<useCloseSelf public="1"><e path="Bool"/></useCloseSelf>
		<quotesRemoval public="1"><e path="Bool"/></quotesRemoval>
		<specialElementContentFormat public="1"><e path="thx.html.SpecialElementContentFormat"/></specialElementContentFormat>
		<createAttributeFormat set="method" line="20" override="1"><f a=""><c path="thx.xml.AttributeFormat"/></f></createAttributeFormat>
		<createNodeFormat set="method" line="28" override="1"><f a=""><c path="thx.xml.NodeFormat"/></f></createNodeFormat>
		<createDocumentFormat set="method" line="36" override="1"><f a=""><c path="thx.xml.DocumentFormat"/></f></createDocumentFormat>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HeIL" params="" file="src/thx/cultures/HeIL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.scale.NumericScale" params="This" file="src/thx/math/scale/NumericScale.hx">
		<x0><c path="Float"/></x0>
		<x1><c path="Float"/></x1>
		<y0><c path="Float"/></y0>
		<y1><c path="Float"/></y1>
		<kx><c path="Float"/></kx>
		<ky><c path="Float"/></ky>
		<f><f a="::">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></f>
		<i><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></i>
		<_clamp><e path="Bool"/></_clamp>
		<_clampmin><c path="Float"/></_clampmin>
		<_clampmax><c path="Float"/></_clampmax>
		<scale public="1" set="method" line="34"><f a="x:?_">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scale>
		<invert public="1" set="method" line="40"><f a="y:?_">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></invert>
		<getDomain public="1" set="method" line="42"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<domain public="1" set="method" line="43"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></domain>
		<getRange public="1" set="method" line="51"><f a=""><c path="Array"><c path="Float"/></c></f></getRange>
		<range public="1" set="method" line="52"><f a="y0:y1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></range>
		<rangeRound public="1" set="method" line="60"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></rangeRound>
		<getInterpolate public="1" set="method" line="68"><f a=""><f a="::">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></f></getInterpolate>
		<interpolatef public="1" set="method" line="69"><f a="x">
	<f a="::">
		<c path="Float"/>
		<c path="Float"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
	</f>
	<c path="thx.math.scale.NumericScale.This"/>
</f></interpolatef>
		<getClamp public="1" set="method" line="75"><f a=""><e path="Bool"/></f></getClamp>
		<clamp public="1" set="method" line="76"><f a="v">
	<e path="Bool"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></clamp>
		<getClampMin public="1" set="method" line="82"><f a=""><c path="Float"/></f></getClampMin>
		<clampMin public="1" set="method" line="83"><f a="v">
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></clampMin>
		<getClampMax public="1" set="method" line="89"><f a=""><c path="Float"/></f></getClampMax>
		<clampMax public="1" set="method" line="90"><f a="v">
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></clampMax>
		<ticks public="1" set="method" line="96"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<tickFormat public="1" set="method" line="101"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<transform public="1" set="method" line="106"><f a="scale:t:a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.NumericScale.This"/>
</f></transform>
		<_this get="inline" set="null" line="115"><f a=""><c path="thx.math.scale.NumericScale.This"/></f></_this>
		<new public="1" set="method" line="24"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.math.scale.Log" params="" file="src/thx/math/scale/Log.hx">
		<extends path="thx.math.scale.NumericScale"><c path="thx.math.scale.Log"/></extends>
		<_log set="method" line="15" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_log>
		<_logn set="method" line="20" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_logn>
		<_pow set="method" line="25" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_pow>
		<_pown set="method" line="30" static="1"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></_pown>
		<log><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<pow><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<scale public="1" set="method" line="45" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scale>
		<invert public="1" set="method" line="50" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></invert>
		<getDomain public="1" set="method" line="55" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<domain public="1" set="method" line="60" override="1"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Log"/>
</f></domain>
		<ticks public="1" set="method" line="72" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<tickFormatf public="1" set="method" line="110"><f a=""><f a="d">
	<c path="Float"/>
	<c path="String"/>
</f></f></tickFormatf>
		<new public="1" set="method" line="38"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 * @todo change implementation so that Linear, LinearTime, LinearString Log and Pow share a base class
 * @todo add clamp/clampMin/clampMax
 </haxe_doc>
	</class>
	<class path="thx.cultures.ArIQ" params="" file="src/thx/cultures/ArIQ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SvSE" params="" file="src/thx/cultures/SvSE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neko.Lib" params="" file="C:\Projects\haxe/std/neko/Lib.hx">
		<load public="1" set="method" line="32" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<d/>
			</f>
			<haxe_doc>
		Load and return a Neko primitive from a NDLL library.
	</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="36" static="1"><f a="lib:prim:nargs">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></loadLazy>
		<print public="1" set="method" line="47" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print the specified value on the default output.
	</haxe_doc>
		</print>
		<println public="1" set="method" line="54" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print the specified value on the default output followed by a newline character.
	</haxe_doc>
		</println>
		<rethrow public="1" set="method" line="62" static="1">
			<f a="e">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Rethrow an exception. This is useful when manually filtering an exception in order
		to keep the previous exception stack.
	</haxe_doc>
		</rethrow>
		<serialize public="1" set="method" line="70" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Serialize using native Neko serialization. This will return a Binary string that can be
		stored for long term usage. The serialized data is optimized for speed and not for size.
	</haxe_doc>
		</serialize>
		<unserialize public="1" set="method" line="77" static="1">
			<f a="s">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Unserialize a string using native Neko serialization. See [serialize].
	</haxe_doc>
		</unserialize>
		<localUnserialize public="1" set="method" line="88" static="1">
			<f a="s">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Unserialize a string using native Neko serialization. See [serialize].
		This function assume that all the serialized data was serialized with current
		module, even if the module name was different. This can happen if you are unserializing
		some data into mod_neko that was serialized on a different server using a different
		file path.
	</haxe_doc>
		</localUnserialize>
		<nekoToHaxe public="1" set="method" line="98" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Converts a Neko value to its haXe equivalent. Used for wrapping String and Arrays raw values into haXe Objects.
	</haxe_doc>
		</nekoToHaxe>
		<haxeToNeko public="1" set="method" line="130" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Converts a Neko value to its haXe equivalent. Used to unwrap String and Arrays Objects into raw Neko values.
	</haxe_doc>
		</haxeToNeko>
		<getClasses public="1" set="method" line="165" static="1">
			<f a=""><d/></f>
			<haxe_doc>
		Returns an object containing all compiled packages and classes.
	</haxe_doc>
		</getClasses>
		<stringReference public="1" get="inline" set="null" line="172" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a string referencing the data contains in bytes.
	</haxe_doc>
		</stringReference>
		<bytesReference public="1" get="inline" set="null" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>
		Returns bytes referencing the content of a string.
	</haxe_doc>
		</bytesReference>
		<__serialize line="183" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></__serialize>
		<__unserialize line="184" static="1"><f a=":">
	<unknown/>
	<a>
		<loadprim><f a="p:n">
	<unknown/>
	<unknown/>
	<unknown/>
</f></loadprim>
		<loadmodule><f a="m:l">
	<unknown/>
	<unknown/>
	<unknown/>
</f></loadmodule>
	</a>
	<unknown/>
</f></__unserialize>
	</class>
	<class path="neko.Utf8" params="" file="C:\Projects\haxe/std/neko/Utf8.hx">
		<encode public="1" set="method" line="43" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="55" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<iter public="1" set="method" line="73" static="1"><f a="s:chars">
	<c path="String"/>
	<f a="">
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></iter>
		<charCodeAt public="1" set="method" line="77" static="1"><f a="s:index">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
</f></charCodeAt>
		<validate public="1" set="method" line="81" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></validate>
		<length public="1" set="method" line="85" static="1"><f a="s">
	<c path="String"/>
	<c path="Int"/>
</f></length>
		<compare public="1" set="method" line="89" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></compare>
		<sub public="1" set="method" line="93" static="1"><f a="s:pos:len">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></sub>
		<utf8_buf_alloc line="97" static="1"><f a="">
	<c path="Int"/>
	<e path="Void"/>
</f></utf8_buf_alloc>
		<utf8_buf_add line="98" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<unknown/>
</f></utf8_buf_add>
		<utf8_buf_content line="99" static="1"><f a="">
	<e path="Void"/>
	<c path="String"/>
</f></utf8_buf_content>
		<utf8_buf_length line="100" static="1"><unknown/></utf8_buf_length>
		<utf8_iter line="101" static="1"><f a=":">
	<c path="String"/>
	<f a="c">
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<unknown/>
</f></utf8_iter>
		<utf8_get line="103" static="1"><f a=":">
	<unknown/>
	<c path="Int"/>
	<c path="Int"/>
</f></utf8_get>
		<utf8_validate line="104" static="1"><f a="">
	<unknown/>
	<e path="Bool"/>
</f></utf8_validate>
		<utf8_length line="105" static="1"><f a="">
	<unknown/>
	<c path="Int"/>
</f></utf8_length>
		<utf8_compare line="106" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<c path="Int"/>
</f></utf8_compare>
		<utf8_sub line="107" static="1"><f a="::">
	<unknown/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></utf8_sub>
		<__b><e path="Void"/></__b>
		<addChar public="1" set="method" line="35"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></addChar>
		<toString public="1" set="method" line="39"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a="?size">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.translation.ITranslation" params="" file="src/thx/translation/ITranslation.hx" interface="1">
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
		<_ public="1" set="method"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_>
		<__ public="1" set="method"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></__>
	</class>
	<class path="thx.translation.DictionaryTranslation" params="" file="src/thx/translation/DictionaryTranslation.hx">
		<implements path="thx.translation.ITranslation"/>
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
		<_domain><c path="String"/></_domain>
		<_infos><c path="Hash"><c path="thx.culture.Info"/></c></_infos>
		<_domainss><c path="Hash"><c path="Hash"><c path="String"/></c></c></_domainss>
		<_domainsp><c path="Hash"><c path="Hash"><c path="Array"><c path="String"/></c></c></c></_domainsp>
		<addDomain public="1" set="method" line="27"><f a="?domain:?info">
	<c path="String"/>
	<c path="thx.culture.Info"/>
	<e path="Void"/>
</f></addDomain>
		<addSingular public="1" set="method" line="46"><f a="id:text:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></addSingular>
		<addPlural public="1" set="method" line="53"><f a="ids:idp:texts:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<e path="Void"/>
</f></addPlural>
		<_ public="1" set="method" line="61"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_>
		<__ public="1" set="method" line="72"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></__>
		<getDomain set="method" line="89"><f a=""><c path="String"/></f></getDomain>
		<setDomain set="method" line="95"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setDomain>
		<new public="1" set="method" line="16"><f a="?domain:?info">
	<c path="String"/>
	<c path="thx.culture.Info"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Input" params="" file="C:\Projects\haxe/std/haxe/io/Input.hx">
		<_float_of_bytes line="260" static="1"><f a=":">
	<unknown/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_float_of_bytes>
		<_double_of_bytes line="261" static="1"><f a=":">
	<unknown/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_double_of_bytes>
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="35"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="44"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="65"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="68"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readAll public="1" set="method" line="75"><f a="?bufsize">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="96"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="104"><f a="nbytes">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="116"><f a="end">
	<c path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="124"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="141"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="155"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="169"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="176"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="185"><f a=""><c path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="191"><f a=""><c path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="201"><f a=""><c path="Int"/></f></readUInt24>
		<readInt31 public="1" set="method" line="208"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="225"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="234"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<readString public="1" set="method" line="249"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>
	An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.
</haxe_doc>
	</class>
	<class path="neko.io.FileInput" params="" file="C:\Projects\haxe/std/neko/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<file_eof line="79" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<e path="Bool"/>
</f></file_eof>
		<file_read line="81" static="1"><f a=":::">
	<e path="neko.io.FileHandle"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></file_read>
		<file_read_char line="82" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<c path="Int"/>
</f></file_read_char>
		<file_close line="84" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<unknown/>
</f></file_close>
		<file_seek line="85" static="1"><f a="::">
	<e path="neko.io.FileHandle"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></file_seek>
		<file_tell line="86" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<c path="Int"/>
</f></file_tell>
		<__f><e path="neko.io.FileHandle"/></__f>
		<readByte public="1" set="method" line="39" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="50" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="61" override="1"><f a=""><e path="Void"/></f></close>
		<seek public="1" set="method" line="66"><f a="p:pos">
	<c path="Int"/>
	<e path="neko.io.FileSeek"/>
	<e path="Void"/>
</f></seek>
		<tell public="1" set="method" line="70"><f a=""><c path="Int"/></f></tell>
		<eof public="1" set="method" line="75"><f a=""><e path="Bool"/></f></eof>
		<new public="1" set="method" line="35"><f a="f">
	<e path="neko.io.FileHandle"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Use [neko.io.File.read] to create a [FileInput]
</haxe_doc>
	</class>
	<class path="thx.cultures.EsPY" params="" file="src/thx/cultures/EsPY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsPE" params="" file="src/thx/cultures/EsPE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.IValidator" params="T" file="src/thx/validation/IValidator.hx" interface="1">
		<validate public="1" set="method"><f a="value">
	<c path="thx.validation.IValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<isValid public="1" set="method"><f a="value">
	<c path="thx.validation.IValidator.T"/>
	<e path="Bool"/>
</f></isValid>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.validation.Validator" params="T" file="src/thx/validation/Validator.hx">
		<implements path="thx.validation.IValidator"><c path="thx.validation.Validator.T"/></implements>
		<validate public="1" set="method" line="11"><f a="value">
	<c path="thx.validation.Validator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<isValid public="1" set="method" line="16"><f a="value">
	<c path="thx.validation.Validator.T"/>
	<e path="Bool"/>
</f></isValid>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.validation.CustomValidator" params="T" file="src/thx/validation/CustomValidator.hx">
		<extends path="thx.validation.Validator"><c path="thx.validation.CustomValidator.T"/></extends>
		<validators><c path="Array"><f a="">
	<c path="thx.validation.CustomValidator.T"/>
	<c path="thx.util.Message"/>
</f></c></validators>
		<validate public="1" set="method" line="18" override="1"><f a="value">
	<c path="thx.validation.CustomValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<add public="1" set="method" line="29"><f a="handler">
	<f a="">
		<c path="thx.validation.CustomValidator.T"/>
		<c path="thx.util.Message"/>
	</f>
	<e path="Void"/>
</f></add>
		<clear public="1" set="method" line="34"><f a=""><e path="Void"/></f></clear>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.ZhHK" params="" file="src/thx/cultures/ZhHK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrCA" params="" file="src/thx/cultures/FrCA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Id" params="" file="src/thx/languages/Id.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.El" params="" file="src/thx/languages/El.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="EReg" params="" file="C:\Projects\haxe/std/neko/_std/EReg.hx">
		<regexp_new_options line="157" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></regexp_new_options>
		<regexp_match line="158" static="1"><f a=":::">
	<d/>
	<unknown/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></regexp_match>
		<regexp_matched line="159" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<c path="String"/>
</f></regexp_matched>
		<regexp_matched_pos line="160" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<a>
		<pos><c path="Int"/></pos>
		<len><c path="Int"/></len>
	</a>
</f></regexp_matched_pos>
		<r><d/></r>
		<last><c path="String"/></last>
		<global><e path="Bool"/></global>
		<match public="1" set="method" line="40">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="49">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="54">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="59">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="65">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="69">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="93">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="144">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="32"><f a="r:opt">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="Dates" params="" file="src/Dates.hx">
		<format public="1" set="method" line="13" static="1"><f a="d:?param:?params:?culture">
	<c path="Date"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="18" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="d">
		<c path="Date"/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" get="inline" set="null" line="75" static="1"><f a="f:a:b:?equation">
	<c path="Float"/>
	<c path="Date"/>
	<c path="Date"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Date"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="80" static="1"><f a="a:b:?equation">
	<c path="Date"/>
	<c path="Date"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="v">
		<c path="Float"/>
		<c path="Date"/>
	</f>
</f></interpolatef>
		<snap public="1" set="method" line="86" static="1"><f a="time:period">
	<c path="Float"/>
	<c path="String"/>
	<c path="Float"/>
</f></snap>
		<snapToWeekDay public="1" set="method" line="111" static="1"><f a="time:day">
	<c path="Float"/>
	<c path="String"/>
	<c path="Float"/>
</f></snapToWeekDay>
		<_reparse line="138" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="139" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="144" static="1"><f a="s">
	<c path="String"/>
	<c path="Date"/>
</f></parse>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.validation.DateRangeValidator" params="" file="src/thx/validation/DateRangeValidator.hx">
		<extends path="thx.validation.Validator"><c path="Date"/></extends>
		<min public="1"><t path="Null"><c path="Date"/></t></min>
		<max public="1"><t path="Null"><c path="Date"/></t></max>
		<minInclusive public="1"><e path="Bool"/></minInclusive>
		<maxInclusive public="1"><e path="Bool"/></maxInclusive>
		<validate public="1" set="method" line="25" override="1"><f a="value">
	<c path="Date"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="17"><f a="?min:?max:?mininclusive:?maxinclusive">
	<c path="Date"/>
	<c path="Date"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.languages.Sk" params="" file="src/thx/languages/Sk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AzLatnAZ" params="" file="src/thx/cultures/AzLatnAZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArSA" params="" file="src/thx/cultures/ArSA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsSV" params="" file="src/thx/cultures/EsSV.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.RwRW" params="" file="src/thx/cultures/RwRW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="45" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NlNL" params="" file="src/thx/cultures/NlNL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ItIT" params="" file="src/thx/cultures/ItIT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.Ease" params="" file="src/thx/math/Ease.hx"><mode public="1" set="method" line="7" static="1"><f a="?easemode:?f">
	<e path="thx.math.EaseMode"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></mode></class>
	<class path="thx.cultures.EsAR" params="" file="src/thx/cultures/EsAR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="DynamicsT" params="" file="src/DynamicsT.hx">
		<toHash public="1" params="T" set="method" line="8" static="1"><f a="ob">
	<d><c path="toHash.T"/></d>
	<c path="Hash"><c path="toHash.T"/></c>
</f></toHash>
		<copyToHash public="1" params="T" set="method" line="14" static="1"><f a="ob:hash">
	<d><c path="copyToHash.T"/></d>
	<c path="Hash"><c path="copyToHash.T"/></c>
	<c path="Hash"><c path="copyToHash.T"/></c>
</f></copyToHash>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.TeIN" params="" file="src/thx/cultures/TeIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.culture.FormatNumber" params="" file="src/thx/culture/FormatNumber.hx">
		<decimal public="1" set="method" line="6" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></decimal>
		<percent public="1" set="method" line="11" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></percent>
		<permille public="1" set="method" line="16" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></permille>
		<currency public="1" set="method" line="21" static="1"><f a="v:?symbol:?decimals:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></currency>
		<int public="1" set="method" line="26" static="1"><f a="v:?culture">
	<c path="Float"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></int>
		<digits public="1" set="method" line="36" static="1">
			<f a="v:?culture">
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	* Transforms a string of digit from the international format (0...9) to the locale format.
	* Be sure to include only characters in the 0...9 range.
	</haxe_doc>
		</digits>
		<crunch set="method" line="42" static="1"><f a="v:decimals:info:negative:positive:culture:symbol:replace">
	<c path="Float"/>
	<t path="Null"><c path="Int"/></t>
	<c path="thx.culture.core.NumberInfo"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></crunch>
		<processDigits set="method" line="54" static="1"><f a="s:digits">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></processDigits>
		<value set="method" line="62" static="1"><f a="v:info:decimals:digits">
	<c path="Float"/>
	<c path="thx.culture.core.NumberInfo"/>
	<c path="Int"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></value>
	</class>
	<class path="thx.cultures.SiLK" params="" file="src/thx/cultures/SiLK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.CsCZ" params="" file="src/thx/cultures/CsCZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neko.io.Path" params="" file="C:\Projects\haxe/std/neko/io/Path.hx">
		<withoutExtension public="1" set="method" line="60" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></withoutExtension>
		<withoutDirectory public="1" set="method" line="66" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></withoutDirectory>
		<directory public="1" set="method" line="72" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></directory>
		<extension public="1" set="method" line="79" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></extension>
		<withExtension public="1" set="method" line="86" static="1"><f a="path:ext">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></withExtension>
		<ext public="1"><c path="String"/></ext>
		<dir public="1"><c path="String"/></dir>
		<file public="1"><c path="String"/></file>
		<backslash public="1"><e path="Bool"/></backslash>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="34"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.xml.XmlWriter" params="" file="src/thx/xml/XmlWriter.hx">
		<_stack><c path="Array"><c path="Xml"/></c></_stack>
		<_current><c path="Xml"/></_current>
		<xml public="1" set="method" line="22"><f a=""><c path="Xml"/></f></xml>
		<tag public="1" set="method" line="27"><f a="name">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></tag>
		<open public="1" set="method" line="34"><f a="tag">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></open>
		<attr public="1" set="method" line="42"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></attr>
		<appendTo public="1" set="method" line="48"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></appendTo>
		<attrIf public="1" set="method" line="57"><f a="?cond:name:value">
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></attrIf>
		<text public="1" set="method" line="64"><f a="s">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></text>
		<cdata public="1" set="method" line="70"><f a="s">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></cdata>
		<comment public="1" set="method" line="76"><f a="s">
	<c path="String"/>
	<c path="thx.xml.XmlWriter"/>
</f></comment>
		<close public="1" set="method" line="82"><f a=""><c path="thx.xml.XmlWriter"/></f></close>
		<toString public="1" set="method" line="95"><f a=""><c path="String"/></f></toString>
		<_t get="inline" set="null" line="100"><f a=""><c path="Xml"/></f></_t>
		<new public="1" set="method" line="14"><f a="?xml">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EsUY" params="" file="src/thx/cultures/EsUY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PtBR" params="" file="src/thx/cultures/PtBR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrLatnCS" params="" file="src/thx/cultures/SrLatnCS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neko.NativeArray" params="T" file="C:\Projects\haxe/std/neko/NativeArray.hx">
		<alloc public="1" params="T" get="inline" set="null" line="29" static="1"><f a="length">
	<c path="Int"/>
	<c path="neko.NativeArray"><c path="alloc.T"/></c>
</f></alloc>
		<blit public="1" params="T" get="inline" set="null" line="33" static="1"><f a="dst:dstPos:src:srcPos:length">
	<c path="neko.NativeArray"><c path="blit.T"/></c>
	<c path="Int"/>
	<c path="neko.NativeArray"><c path="blit.T"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></blit>
		<ofArrayCopy public="1" params="T" get="inline" set="null" line="37" static="1"><f a="a">
	<c path="Array"><c path="ofArrayCopy.T"/></c>
	<c path="neko.NativeArray"><c path="ofArrayCopy.T"/></c>
</f></ofArrayCopy>
		<ofArrayRef public="1" params="T" get="inline" set="null" line="41" static="1"><f a="a">
	<c path="Array"><c path="ofArrayRef.T"/></c>
	<c path="neko.NativeArray"><c path="ofArrayRef.T"/></c>
</f></ofArrayRef>
		<sub public="1" params="T" get="inline" set="null" line="45" static="1"><f a="a:pos:len">
	<c path="neko.NativeArray"><c path="sub.T"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="neko.NativeArray"><c path="sub.T"/></c>
</f></sub>
		<toArray public="1" params="T" get="inline" set="null" line="49" static="1"><f a="a">
	<c path="neko.NativeArray"><c path="toArray.T"/></c>
	<c path="Array"><c path="toArray.T"/></c>
</f></toArray>
		<length public="1" get="inline" set="null" line="53" static="1"><f a="a">
	<c path="neko.NativeArray"><d/></c>
	<c path="Int"/>
</f></length>
	</class>
	<class path="Float" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<enum path="Bool" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<class path="Class" params="T" file="C:\Projects\haxe/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="Enum" params="T" file="C:\Projects\haxe/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<enum path="Void" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="neko.Boot" params="" file="C:\Projects\haxe/std/neko/Boot.hx">
		<__tmp_str set="method" line="29" static="1"><f a=""><c path="String"/></f></__tmp_str>
		<__enum_str set="method" line="33" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></__enum_str>
		<__interfLoop set="method" line="55" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="70" static="1"><f a="o:cl">
	<a>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><t path="#Dynamic"/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
		<__class__ set="null"><unknown/></__class__>
	</a>
	<t path="#Dynamic"/>
	<e path="Bool"/>
</f></__instanceof>
		<__serialize set="method" line="88" static="1"><f a="o">
	<a>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><c path="Int"/></length></a></__ename__></a></__enum__>
		<__class__ set="null"><a><__name__ set="null"><a><length set="null"><c path="Int"/></length></a></__name__></a></__class__>
	</a>
	<c path="Array"><unknown/></c>
</f></__serialize>
		<__tagserialize set="method" line="108" static="1"><f a="o">
	<a>
		<tag set="null"><unknown/></tag>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><c path="Int"/></length></a></__ename__></a></__enum__>
	</a>
	<c path="Array"><unknown/></c>
</f></__tagserialize>
		<__unserialize set="method" line="117" static="1"><f a="v">
	<c path="Array"><unknown/></c>
	<unknown/>
</f></__unserialize>
		<__init set="method" line="140" static="1"><f a=""><e path="Void"/></f></__init>
	</class>
	<class path="Std" params="" file="C:\Projects\haxe/std/neko/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="52" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="59" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="thx.languages.Sw" params="" file="src/thx/languages/Sw.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Pl" params="" file="src/thx/languages/Pl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Lt" params="" file="src/thx/languages/Lt.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsEC" params="" file="src/thx/cultures/EsEC.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UrPK" params="" file="src/thx/cultures/UrPK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KoKR" params="" file="src/thx/cultures/KoKR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.ValueFormat" params="" file="src/thx/xml/ValueFormat.hx">
		<format public="1" set="method" line="7"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></format>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.NormalizeWhitespaceValueFormat" params="" file="src/thx/xml/NormalizeWhitespaceValueFormat.hx">
		<extends path="thx.xml.ValueFormat"/>
		<_wsReplace><c path="EReg"/></_wsReplace>
		<_wsTestStart><c path="EReg"/></_wsTestStart>
		<_wsTestEnd><c path="EReg"/></_wsTestEnd>
		<format public="1" set="method" line="15" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></format>
		<new public="1" set="method" line="9"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TaIN" params="" file="src/thx/cultures/TaIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.JaJP" params="" file="src/thx/cultures/JaJP.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.io.Path" params="" file="src/thx/sys/io/Path.hx"><c path="neko.io.Path"/></typedef>
	<class path="thx.cultures.PsAF" params="" file="src/thx/cultures/PsAF.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="53" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.culture.FormatParams" params="" file="src/thx/culture/FormatParams.hx">
		<cleanQuotes public="1" set="method" line="12" static="1"><f a="p">
	<c path="String"/>
	<c path="String"/>
</f></cleanQuotes>
		<params public="1" set="method" line="24" static="1"><f a="p:ps:alt">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></params>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.HaLatnNG" params="" file="src/thx/cultures/HaLatnNG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="43" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArOM" params="" file="src/thx/cultures/ArOM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NbNO" params="" file="src/thx/cultures/NbNO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.type.Metas" params="" file="src/thx/type/Metas.hx"><getFieldInfo public="1" set="method" line="7" static="1"><f a="cls:field">
	<c path="Class"><d/></c>
	<c path="String"/>
	<unknown/>
</f></getFieldInfo></class>
	<class path="thx.csv.Csv" params="" file="src/thx/csv/Csv.hx">
		<encode public="1" set="method" line="12" static="1"><f a="value:?delimiter:?nulltoempty:?newline">
	<c path="Array"><c path="Array"><d/></c></c>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="19" static="1"><f a="value">
	<c path="String"/>
	<c path="Array"><c path="Array"><d/></c></c>
</f></decode>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="neko.FileStat" params="" file="C:\Projects\haxe/std/neko/FileSystem.hx" module="neko.FileSystem"><a>
	<uid><c path="Int"/></uid>
	<size><c path="Int"/></size>
	<rdev><c path="Int"/></rdev>
	<nlink><c path="Int"/></nlink>
	<mtime><c path="Date"/></mtime>
	<mode><c path="Int"/></mode>
	<ino><c path="Int"/></ino>
	<gid><c path="Int"/></gid>
	<dev><c path="Int"/></dev>
	<ctime><c path="Date"/></ctime>
	<atime><c path="Date"/></atime>
</a></typedef>
	<enum path="neko.FileKind" params="" file="C:\Projects\haxe/std/neko/FileSystem.hx" module="neko.FileSystem">
		<kother a="k"><c path="String"/></kother>
		<kfile/>
		<kdir/>
	</enum>
	<class path="neko.FileSystem" params="" file="C:\Projects\haxe/std/neko/FileSystem.hx">
		<exists public="1" set="method" line="49" static="1"><f a="path">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<rename public="1" set="method" line="53" static="1"><f a="path:newpath">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></rename>
		<stat public="1" set="method" line="57" static="1"><f a="path">
	<c path="String"/>
	<t path="neko.FileStat"/>
</f></stat>
		<fullPath public="1" set="method" line="65" static="1"><f a="relpath">
	<c path="String"/>
	<c path="String"/>
</f></fullPath>
		<kind public="1" set="method" line="69" static="1"><f a="path">
	<c path="String"/>
	<e path="neko.FileKind"/>
</f></kind>
		<isDirectory public="1" set="method" line="78" static="1"><f a="path">
	<c path="String"/>
	<e path="Bool"/>
</f></isDirectory>
		<createDirectory public="1" set="method" line="82" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></createDirectory>
		<deleteFile public="1" set="method" line="86" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></deleteFile>
		<deleteDirectory public="1" set="method" line="90" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></deleteDirectory>
		<readDirectory public="1" set="method" line="94" static="1"><f a="path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></readDirectory>
		<sys_exists line="104" static="1"><f a="">
	<unknown/>
	<e path="Bool"/>
</f></sys_exists>
		<file_delete line="105" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></file_delete>
		<sys_rename line="106" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></sys_rename>
		<sys_stat line="107" static="1"><f a="">
	<unknown/>
	<t path="neko.FileStat"/>
</f></sys_stat>
		<sys_file_type line="108" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></sys_file_type>
		<sys_create_dir line="109" static="1"><f a=":">
	<unknown/>
	<c path="Int"/>
	<unknown/>
</f></sys_create_dir>
		<sys_remove_dir line="110" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></sys_remove_dir>
		<sys_read_dir line="111" static="1"><f a="">
	<unknown/>
	<c path="Array"><d/></c>
</f></sys_read_dir>
		<file_full_path line="112" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></file_full_path>
	</class>
	<class path="thx.languages.Sa" params="" file="src/thx/languages/Sa.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.WoSN" params="" file="src/thx/cultures/WoSN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.svg.Chord" params="TData:TChord" file="src/thx/svg/Chord.hx">
		<pathObject public="1" set="method" line="127" static="1"><f a=""><c path="thx.svg.Chord">
	<a>
		<target><t path="thx.svg._Chord.ChordType"/></target>
		<startAngle><c path="Float"/></startAngle>
		<source><t path="thx.svg._Chord.ChordType"/></source>
		<radius><c path="Float"/></radius>
		<endAngle><c path="Float"/></endAngle>
	</a>
	<t path="thx.svg._Chord.ChordType"/>
</c></f></pathObject>
		<_source><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></_source>
		<_target><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></_target>
		<_radius><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_radius>
		<_startAngle><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_startAngle>
		<_endAngle><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_endAngle>
		<shape public="1" set="method" line="24"><f a="d:i">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<subgroup set="method" line="37"><f a="f:d:i">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<a>
		<r><c path="Float"/></r>
		<p1><c path="Array"><c path="Float"/></c></p1>
		<p0><c path="Array"><c path="Float"/></c></p0>
		<a1><c path="Float"/></a1>
		<a0><c path="Float"/></a0>
	</a>
</f></subgroup>
		<equals set="method" line="52"><f a="a:b">
	<a>
		<a1 set="null"><c path="Float"/></a1>
		<a0 set="null"><c path="Float"/></a0>
	</a>
	<a>
		<a1 set="null"><c path="Float"/></a1>
		<a0 set="null"><c path="Float"/></a0>
	</a>
	<e path="Bool"/>
</f></equals>
		<arc set="method" line="57"><f a="r:p">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
</f></arc>
		<curve set="method" line="62"><f a="r0:p0:r1:p1">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
</f></curve>
		<getSource public="1" set="method" line="67"><f a=""><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></f></getSource>
		<source public="1" set="method" line="68"><f a="v">
	<c path="thx.svg.Chord.TChord"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></source>
		<sourcef public="1" set="method" line="73"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></sourcef>
		<getTarget public="1" set="method" line="79"><f a=""><f a=":">
	<c path="thx.svg.Chord.TData"/>
	<c path="Int"/>
	<c path="thx.svg.Chord.TChord"/>
</f></f></getTarget>
		<target public="1" set="method" line="80"><f a="v">
	<c path="thx.svg.Chord.TChord"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></target>
		<targetf public="1" set="method" line="85"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></targetf>
		<getRadius public="1" set="method" line="91"><f a=""><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getRadius>
		<radius public="1" set="method" line="92"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></radius>
		<radiusf public="1" set="method" line="97"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></radiusf>
		<getStartAngle public="1" set="method" line="103"><f a=""><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getStartAngle>
		<startAngle public="1" set="method" line="104"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></startAngle>
		<startAnglef public="1" set="method" line="109"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></startAnglef>
		<getEndAngle public="1" set="method" line="115"><f a=""><f a=":">
	<c path="thx.svg.Chord.TChord"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getEndAngle>
		<endAngle public="1" set="method" line="116"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></endAngle>
		<endAnglef public="1" set="method" line="121"><f a="v">
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Chord">
		<c path="thx.svg.Chord.TData"/>
		<c path="thx.svg.Chord.TChord"/>
	</c>
</f></endAnglef>
		<new public="1" set="method" line="15"><f a="source:target:radius:startAngle:endAngle">
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TData"/>
		<c path="Int"/>
		<c path="thx.svg.Chord.TChord"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Chord.TChord"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="thx.svg._Chord.ChordType" params="" file="src/thx/svg/Chord.hx" private="1" module="thx.svg.Chord"><a>
	<startAngle><c path="Float"/></startAngle>
	<radius><c path="Float"/></radius>
	<endAngle><c path="Float"/></endAngle>
</a></typedef>
	<class path="thx.cultures.DeCH" params="" file="src/thx/cultures/DeCH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.culture.core.DateTimeInfo" params="" file="src/thx/culture/core/DateTimeInfo.hx">
		<months public="1" set="null"><c path="Array"><c path="String"/></c></months>
		<abbrMonths public="1" set="null"><c path="Array"><c path="String"/></c></abbrMonths>
		<days public="1" set="null"><c path="Array"><c path="String"/></c></days>
		<abbrDays public="1" set="null"><c path="Array"><c path="String"/></c></abbrDays>
		<shortDays public="1" set="null"><c path="Array"><c path="String"/></c></shortDays>
		<am public="1" set="null"><c path="String"/></am>
		<pm public="1" set="null"><c path="String"/></pm>
		<separatorDate public="1" set="null"><c path="String"/></separatorDate>
		<separatorTime public="1" set="null"><c path="String"/></separatorTime>
		<firstWeekDay public="1" set="null"><c path="Int"/></firstWeekDay>
		<patternYearMonth public="1" set="null"><c path="String"/></patternYearMonth>
		<patternMonthDay public="1" set="null"><c path="String"/></patternMonthDay>
		<patternDate public="1" set="null"><c path="String"/></patternDate>
		<patternDateShort public="1" set="null"><c path="String"/></patternDateShort>
		<patternDateRfc public="1" set="null"><c path="String"/></patternDateRfc>
		<patternDateTime public="1" set="null"><c path="String"/></patternDateTime>
		<patternUniversal public="1" set="null"><c path="String"/></patternUniversal>
		<patternSortable public="1" set="null"><c path="String"/></patternSortable>
		<patternTime public="1" set="null"><c path="String"/></patternTime>
		<patternTimeShort public="1" set="null"><c path="String"/></patternTimeShort>
		<new public="1" set="method" line="25"><f a="months:abbrMonths:days:abbrDays:shortDays:am:pm:separatorDate:separatorTime:firstWeekDay:patternYearMonth:patternMonthDay:patternDate:patternDateShort:patternDateRfc:patternDateTime:patternUniversal:patternSortable:patternTime:patternTimeShort">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.cultures.SrCyrlRS" params="" file="src/thx/cultures/SrCyrlRS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UzCyrlUZ" params="" file="src/thx/cultures/UzCyrlUZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.scale.Quantile" params="" file="src/thx/math/scale/Quantile.hx">
		<_domain><c path="Array"><c path="Float"/></c></_domain>
		<_range><c path="Array"><c path="Float"/></c></_range>
		<_thresolds><c path="Array"><c path="Float"/></c></_thresolds>
		<rescale set="method" line="21"><f a=""><e path="Void"/></f></rescale>
		<_quantile set="method" line="32"><f a="value">
	<c path="Float"/>
	<c path="Int"/>
</f></_quantile>
		<scaleMap public="1" set="method" line="53"><f a="x:i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scaleMap>
		<scale public="1" set="method" line="55"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></scale>
		<getDomain public="1" set="method" line="60"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<domain public="1" set="method" line="62"><f a="x">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Quantile"/>
</f></domain>
		<getRange public="1" set="method" line="70"><f a=""><c path="Array"><c path="Float"/></c></f></getRange>
		<range public="1" set="method" line="72"><f a="x">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Quantile"/>
</f></range>
		<getQuantiles public="1" set="method" line="79"><f a=""><f a=""><c path="Array"><c path="Float"/></c></f></f></getQuantiles>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.BaRU" params="" file="src/thx/cultures/BaRU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeAT" params="" file="src/thx/cultures/DeAT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PlPL" params="" file="src/thx/cultures/PlPL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.io.FileOutput" params="" file="src/thx/sys/io/FileOutput.hx"><c path="neko.io.FileOutput"/></typedef>
	<class path="thx.text.ERegs" params="" file="src/thx/text/ERegs.hx">
		<_escapePattern line="5" static="1"><c path="EReg"/></_escapePattern>
		<escapeERegChars public="1" set="method" line="6" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeERegChars>
	</class>
	<class path="thx.util.Imports" params="" file="src/thx/util/Imports.hx"><haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc></class>
	<class path="thx.languages.Syr" params="" file="src/thx/languages/Syr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.translation.PluralForms" params="" file="src/thx/translation/PluralForms.hx">
		<pluralRules public="1" line="10" static="1"><c path="Array"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></c></pluralRules>
		<pluralForms public="1" line="28" static="1"><c path="Array"><c path="Int"/></c></pluralForms>
		<pluralRulesDescriptions public="1" line="30" static="1"><c path="Array"><c path="String"/></c></pluralRulesDescriptions>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.KkKZ" params="" file="src/thx/cultures/KkKZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PaIN" params="" file="src/thx/cultures/PaIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hy" params="" file="src/thx/languages/Hy.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.En" params="" file="src/thx/languages/En.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.validation.Option" params="T" file="src/thx/validation/Option.hx">
		<a>
			<value><c path="thx.validation.Option.T"/></value>
			<label><c path="String"/></label>
		</a>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</typedef>
	<class path="haxe.Int32" params="" file="C:\Projects\haxe/std/neko/_std/haxe/Int32.hx">
		<make public="1" get="inline" set="null" line="29" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="33" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ofInt>
		<toInt public="1" get="inline" set="null" line="37" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toInt>
		<toNativeInt public="1" get="inline" set="null" line="41" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toNativeInt>
		<add public="1" get="inline" set="null" line="45" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></add>
		<sub public="1" get="inline" set="null" line="49" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></sub>
		<mul public="1" get="inline" set="null" line="53" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mul>
		<div public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></div>
		<mod public="1" get="inline" set="null" line="61" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="65" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="69" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="73" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="77" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></and>
		<or public="1" get="inline" set="null" line="81" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></or>
		<xor public="1" get="inline" set="null" line="85" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="89" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></neg>
		<isNeg public="1" get="inline" set="null" line="93" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isNeg>
		<isZero public="1" get="inline" set="null" line="97" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isZero>
		<complement public="1" get="inline" set="null" line="101" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></complement>
		<compare public="1" get="inline" set="null" line="105" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></compare>
		<ucompare public="1" set="method" line="109" static="1">
			<f a="a:b">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Compare two Int32 in unsigned mode.
	</haxe_doc>
		</ucompare>
	</class>
	<class path="thx.cultures.KyKG" params="" file="src/thx/cultures/KyKG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MsMY" params="" file="src/thx/cultures/MsMY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.NodeFormat" params="" file="src/thx/xml/NodeFormat.hx">
		<valueFormat public="1"><c path="thx.xml.ValueFormat"/></valueFormat>
		<attributeFormat public="1"><c path="thx.xml.AttributeFormat"/></attributeFormat>
		<formatEmptyElement public="1" set="method" line="9"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatOpenElement public="1" set="method" line="18"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatCloseElement public="1" set="method" line="27"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatPCData public="1" set="method" line="32"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatDocType public="1" set="method" line="37"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatProlog public="1" set="method" line="42"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatComment public="1" set="method" line="47"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatCData public="1" set="method" line="52"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.HtmlNodeFormat" params="" file="src/thx/html/HtmlNodeFormat.hx">
		<extends path="thx.xml.NodeFormat"/>
		<formatEmptyElement public="1" set="method" line="7" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.CoFR" params="" file="src/thx/cultures/CoFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hr" params="" file="src/thx/languages/Hr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IsIS" params="" file="src/thx/cultures/IsIS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.StringLengthValidator" params="" file="src/thx/validation/StringLengthValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<minLength public="1"><c path="Int"/></minLength>
		<maxLength public="1"><t path="Null"><c path="Int"/></t></maxLength>
		<validate public="1" set="method" line="21" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="15"><f a="?minlength:?maxlength">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.ElGR" params="" file="src/thx/cultures/ElGR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KnIN" params="" file="src/thx/cultures/KnIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.util.TypeServiceLocator" params="" file="src/thx/util/TypeServiceLocator.hx">
		<_binders><c path="Hash"><f a=""><d/></f></c></_binders>
		<instance public="1" params="T" set="method" line="16"><f a="cls:o">
	<c path="Class"><c path="instance.T"/></c>
	<c path="instance.T"/>
	<c path="thx.util.TypeServiceLocator"/>
</f></instance>
		<bind public="1" params="T" set="method" line="21"><f a="cls:f">
	<c path="Class"><c path="bind.T"/></c>
	<f a=""><c path="bind.T"/></f>
	<c path="thx.util.TypeServiceLocator"/>
</f></bind>
		<memoize public="1" params="T" set="method" line="27"><f a="cls:f">
	<c path="Class"><c path="memoize.T"/></c>
	<f a=""><c path="memoize.T"/></f>
	<c path="thx.util.TypeServiceLocator"/>
</f></memoize>
		<unbinded public="1" set="dynamic" line="37"><f a="cls">
	<c path="Class"><d/></c>
	<t path="Null"><c path="get.T"/></t>
</f></unbinded>
		<get public="1" params="T" set="method" line="42"><f a="cls">
	<c path="Class"><c path="get.T"/></c>
	<t path="Null"><c path="get.T"/></t>
</f></get>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.FrMC" params="" file="src/thx/cultures/FrMC.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsCR" params="" file="src/thx/cultures/EsCR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx">
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TMono/>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><e path="Bool"/></isPublic>
	<expr><t path="Null"><e path="haxe.macro.TypedExpr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><e path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<index><c path="Int"/></index>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<constructs><c path="Hash"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<remove set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></remove>
	<has set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></has>
	<get set="method"><f a=""><c path="Array"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></f></get>
	<add set="method"><f a="name:params:pos">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<e path="haxe.macro.Position"/>
	<e path="Void"/>
</f></add>
</a></typedef>
	<enum path="haxe.macro.FieldKind" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccResolve/>
		<AccRequire a="r"><c path="String"/></AccRequire>
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccInline/>
		<AccCall a="m"><c path="String"/></AccCall>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethMacro/>
		<MethInline/>
		<MethDynamic/>
	</enum>
	<enum path="haxe.macro.TypedExpr" params="" file="C:\Projects\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"/>
	<class path="thx.cultures.TrTR" params="" file="src/thx/cultures/TrTR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsNI" params="" file="src/thx/cultures/EsNI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="List" params="T" file="C:\Projects\haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<class path="neko.db.Manager" params="T" file="C:\Projects\haxe/std/neko/db/Manager.hx">
		<cnx public="1" set="setConnection" static="1"><c path="neko.db.Connection"/></cnx>
		<object_cache line="48" static="1"><c path="Hash"><c path="neko.db.Object"/></c></object_cache>
		<init_list line="49" static="1"><c path="List"><c path="neko.db.Manager"><c path="neko.db.Object"/></c></c></init_list>
		<cache_field line="50" static="1"><c path="String"/></cache_field>
		<no_update line="51" static="1"><d/></no_update>
		<LOCKS line="52" static="1"><c path="Array"><c path="String"/></c></LOCKS>
		<KEYWORDS line="53" static="1"><c path="Hash"><e path="Bool"/></c></KEYWORDS>
		<setConnection set="method" line="62" static="1"><f a="c">
	<c path="neko.db.Connection"/>
	<c path="neko.db.Connection"/>
</f></setConnection>
		<initialize public="1" set="method" line="445" static="1"><f a=""><e path="Void"/></f></initialize>
		<cleanup public="1" set="method" line="456" static="1"><f a=""><e path="Void"/></f></cleanup>
		<table_name><c path="String"/></table_name>
		<table_fields><c path="List"><c path="String"/></c></table_fields>
		<table_keys><c path="Array"><c path="String"/></c></table_keys>
		<class_proto><a><prototype><d/></prototype></a></class_proto>
		<lock_mode><c path="Int"/></lock_mode>
		<get public="1" set="method" line="119"><f a="id:?lock">
	<c path="Int"/>
	<e path="Bool"/>
	<c path="neko.db.Manager.T"/>
</f></get>
		<getWithKeys public="1" set="method" line="141"><f a="keys:?lock">
	<a/>
	<e path="Bool"/>
	<c path="neko.db.Manager.T"/>
</f></getWithKeys>
		<delete public="1" set="method" line="157"><f a="x">
	<a/>
	<e path="Void"/>
</f></delete>
		<search public="1" set="method" line="166"><f a="x:?lock">
	<a/>
	<e path="Bool"/>
	<c path="List"><c path="neko.db.Manager.T"/></c>
</f></search>
		<addCondition set="method" line="179"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<e path="Void"/>
</f></addCondition>
		<all public="1" set="method" line="200"><f a="?lock">
	<e path="Bool"/>
	<c path="List"><c path="neko.db.Manager.T"/></c>
</f></all>
		<count public="1" set="method" line="206"><f a="?x">
	<a/>
	<c path="Int"/>
</f></count>
		<quote public="1" set="method" line="215"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<result public="1" set="method" line="219"><f a="sql">
	<c path="String"/>
	<d/>
</f></result>
		<results public="1" params="T" set="method" line="223"><f a="sql">
	<c path="String"/>
	<c path="List"><c path="results.T"/></c>
</f></results>
		<doInsert set="method" line="229"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></doInsert>
		<doUpdate set="method" line="262"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></doUpdate>
		<doDelete set="method" line="291"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></doDelete>
		<doSync set="method" line="302"><f a="i">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></doSync>
		<objectToString set="method" line="318"><f a="it">
	<c path="neko.db.Manager.T"/>
	<c path="String"/>
</f></objectToString>
		<cacheObject set="method" line="343"><f a="x:lock">
	<c path="neko.db.Manager.T"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></cacheObject>
		<make set="method" line="351"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></make>
		<unmake set="method" line="354"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></unmake>
		<quoteField set="method" line="357"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
		<addKeys set="method" line="361"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<e path="Void"/>
</f></addKeys>
		<execute set="method" line="377"><f a="sql">
	<c path="String"/>
	<c path="neko.db.ResultSet"/>
</f></execute>
		<select set="method" line="381"><f a="cond">
	<c path="String"/>
	<c path="String"/>
</f></select>
		<selectReadOnly set="method" line="391"><f a="cond">
	<c path="String"/>
	<c path="String"/>
</f></selectReadOnly>
		<object public="1" set="method" line="400"><f a="sql:lock">
	<c path="String"/>
	<e path="Bool"/>
	<c path="neko.db.Manager.T"/>
</f></object>
		<objects public="1" set="method" line="412"><f a="sql:lock">
	<c path="String"/>
	<e path="Bool"/>
	<c path="List"><c path="neko.db.Manager.T"/></c>
</f></objects>
		<getLockMode get="inline" set="null" line="431"><f a=""><c path="String"/></f></getLockMode>
		<setLockMode public="1" set="method" line="435"><f a="exclusive:readShared">
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setLockMode>
		<dbClass public="1" set="method" line="439"><f a=""><c path="Class"><d/></c></f></dbClass>
		<initRelation set="method" line="460"><f a="r">
	<a>
		<prop><c path="String"/></prop>
		<manager><c path="neko.db.Manager"><c path="neko.db.Object"/></c></manager>
		<lock><e path="Bool"/></lock>
		<key><c path="String"/></key>
	</a>
	<e path="Void"/>
</f></initRelation>
		<makeCacheKey set="method" line="499"><f a="x">
	<c path="neko.db.Manager.T"/>
	<c path="String"/>
</f></makeCacheKey>
		<addToCache set="method" line="518"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></addToCache>
		<removeFromCache set="method" line="522"><f a="x">
	<c path="neko.db.Manager.T"/>
	<e path="Void"/>
</f></removeFromCache>
		<getFromCacheKey set="method" line="526"><f a="key">
	<c path="String"/>
	<c path="neko.db.Manager.T"/>
</f></getFromCacheKey>
		<getFromCache set="method" line="530"><f a="x:lock">
	<c path="neko.db.Manager.T"/>
	<e path="Bool"/>
	<c path="neko.db.Manager.T"/>
</f></getFromCache>
		<new public="1" set="method" line="83"><f a="classval">
	<c path="Class"><c path="neko.db.Manager.T"/></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	SPOD Manager : the persistent object database manager. See the tutorial on
	haXe website to learn how to use SPOD.
</haxe_doc>
	</class>
	<class path="String" params="" file="C:\Projects\haxe/std/neko/_std/String.hx">
		<__is_String static="1"><e path="Bool"/></__is_String>
		<__split line="29" static="1"><d/></__split>
		<fromCharCode public="1" set="method" line="180" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<charAt public="1" set="method" line="46">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="58">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="64">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="73">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="88">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method" line="104">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toLowerCase public="1" set="method" line="130">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="146">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toString public="1" set="method" line="162">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<__compare set="method" line="168"><f a="o">
	<c path="String"/>
	<c path="Int"/>
</f></__compare>
		<__add set="method" line="172"><f a="s">
	<d/>
	<c path="String"/>
</f></__add>
		<__radd set="method" line="176"><f a="s">
	<d/>
	<c path="String"/>
</f></__radd>
		<new public="1" set="method" line="37"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="neko.Web" params="" file="C:\Projects\haxe/std/neko/Web.hx">
		<getParams public="1" set="method" line="36" static="1">
			<f a=""><c path="Hash"><c path="String"/></c></f>
			<haxe_doc>
		Returns the GET and POST parameters.
	</haxe_doc>
		</getParams>
		<getParamValues public="1" set="method" line="53" static="1">
			<f a="param">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns an Array of Strings built using GET / POST values.
		If you have in your URL the parameters [a[]=foo;a[]=hello;a[5]=bar;a[3]=baz] then
		[neko.Web.getParamValues("a")] will return [["foo","hello",null,"baz",null,"bar"]]
	</haxe_doc>
		</getParamValues>
		<getHostName public="1" set="method" line="80" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the local server host name
	</haxe_doc>
		</getHostName>
		<getClientIP public="1" set="method" line="87" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Surprisingly returns the client IP address.
	</haxe_doc>
		</getClientIP>
		<getURI public="1" set="method" line="94" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the original request URL (before any server internal redirections)
	</haxe_doc>
		</getURI>
		<redirect public="1" set="method" line="101" static="1">
			<f a="url">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Tell the client to redirect to the given url ("Location" header)
	</haxe_doc>
		</redirect>
		<setHeader public="1" set="method" line="109" static="1">
			<f a="h:v">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an output header value. If some data have been printed, the headers have
		already been sent so this will raise an exception.
	</haxe_doc>
		</setHeader>
		<setReturnCode public="1" set="method" line="116" static="1">
			<f a="r">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the HTTP return code. Same remark as setHeader.
	</haxe_doc>
		</setReturnCode>
		<getClientHeader public="1" set="method" line="123" static="1">
			<f a="k">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Retrieve a client header value sent with the request.
	</haxe_doc>
		</getClientHeader>
		<getClientHeaders public="1" set="method" line="133" static="1">
			<f a=""><c path="List"><a>
	<value><c path="String"/></value>
	<header><c path="String"/></header>
</a></c></f>
			<haxe_doc>
		Retrieve all the client headers.
	</haxe_doc>
		</getClientHeaders>
		<getParamsString public="1" set="method" line="146" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns all the GET parameters String
	</haxe_doc>
		</getParamsString>
		<getPostData public="1" set="method" line="159" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns all the POST data. POST Data is always parsed as
		being application/x-www-form-urlencoded and is stored into
		the getParams hashtable. POST Data is maximimized to 256K
		unless the content type is multipart/form-data. In that
		case, you will have to use [getMultipart] or [parseMultipart]
		methods.
	</haxe_doc>
		</getPostData>
		<getCookies public="1" set="method" line="170" static="1">
			<f a=""><c path="Hash"><c path="String"/></c></f>
			<haxe_doc>
		Returns an hashtable of all Cookies sent by the client.
		Modifying the hashtable will not modify the cookie, use setCookie instead.
	</haxe_doc>
		</getCookies>
		<setCookie public="1" set="method" line="186" static="1">
			<f a="key:value:?expire:?domain:?path:?secure">
				<c path="String"/>
				<c path="String"/>
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a Cookie value in the HTTP headers. Same remark as setHeader.
	</haxe_doc>
		</setCookie>
		<addPair set="method" line="197" static="1"><f a="buf:name:value">
	<c path="StringBuf"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></addPair>
		<getAuthorization public="1" set="method" line="207" static="1">
			<f a=""><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></f>
			<haxe_doc>
		Returns an object with the authorization sent by the client (Basic scheme only).
	</haxe_doc>
		</getAuthorization>
		<getCwd public="1" set="method" line="225" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Get the current script directory in the local filesystem.
	</haxe_doc>
		</getCwd>
		<cacheModule public="1" set="method" line="233" static="1">
			<f a="f">
				<f a=""><e path="Void"/></f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the main entry point function used to handle requests.
		Setting it back to null will disable code caching.
	</haxe_doc>
		</cacheModule>
		<getMultipart public="1" set="method" line="241" static="1">
			<f a="maxSize">
				<c path="Int"/>
				<c path="Hash"><c path="String"/></c>
			</f>
			<haxe_doc>
		Get the multipart parameters as an hashtable. The data
		cannot exceed the maximum size specified.
	</haxe_doc>
		</getMultipart>
		<parseMultipart public="1" set="method" line="270" static="1">
			<f a="onPart:onData">
				<f a=":">
					<c path="String"/>
					<c path="String"/>
					<e path="Void"/>
				</f>
				<f a="::">
					<c path="haxe.io.Bytes"/>
					<c path="Int"/>
					<c path="Int"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Parse the multipart data. Call [onPart] when a new part is found
		with the part name and the filename if present
		and [onData] when some part data is readed. You can this way
		directly save the data on hard drive in the case of a file upload.
	</haxe_doc>
		</parseMultipart>
		<flush public="1" set="method" line="281" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Flush the data sent to the client. By default on Apache, outgoing data is buffered so
		this can be useful for displaying some long operation progress.
	</haxe_doc>
		</flush>
		<getMethod public="1" set="method" line="288" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Get the HTTP method used by the client. This api requires Neko 1.7.1+
	</haxe_doc>
		</getMethod>
		<logMessage public="1" set="method" line="295" static="1">
			<f a="msg">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Write a message into the web server log file. This api requires Neko 1.7.1+
	</haxe_doc>
		</logMessage>
		<isModNeko public="1" set="null" static="1"><e path="Bool"/></isModNeko>
		<isTora public="1" set="null" static="1"><e path="Bool"/></isTora>
		<_set_main static="1"><d/></_set_main>
		<_get_host_name static="1"><d/></_get_host_name>
		<_get_client_ip static="1"><d/></_get_client_ip>
		<_get_uri static="1"><d/></_get_uri>
		<_cgi_redirect static="1"><d/></_cgi_redirect>
		<_cgi_set_header static="1"><d/></_cgi_set_header>
		<_set_return_code static="1"><d/></_set_return_code>
		<_get_client_header static="1"><d/></_get_client_header>
		<_get_params_string static="1"><d/></_get_params_string>
		<_get_post_data static="1"><d/></_get_post_data>
		<_get_params static="1"><d/></_get_params>
		<_get_cookies static="1"><d/></_get_cookies>
		<_set_cookie static="1"><d/></_set_cookie>
		<_get_cwd static="1"><d/></_get_cwd>
		<_parse_multipart static="1"><d/></_parse_multipart>
		<_flush static="1"><d/></_flush>
		<_get_client_headers static="1"><d/></_get_client_headers>
		<_get_http_method static="1"><d/></_get_http_method>
		<_base_decode line="320" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<c path="String"/>
</f></_base_decode>
		<_log_message static="1"><d/></_log_message>
		<haxe_doc>
	This class is used for accessing the local Web server and the current
	client request and informations.
</haxe_doc>
	</class>
	<class path="thx.languages.ZhHant" params="" file="src/thx/languages/ZhHant.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ViVN" params="" file="src/thx/cultures/ViVN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.OptionValidator" params="T" file="src/thx/validation/OptionValidator.hx">
		<extends path="thx.validation.Validator"><c path="thx.validation.OptionValidator.T"/></extends>
		<options public="1"><c path="Array"><t path="thx.validation.Option"><c path="thx.validation.OptionValidator.T"/></t></c></options>
		<showOptionsInFailureMessage public="1"><e path="Bool"/></showOptionsInFailureMessage>
		<valueExists public="1" set="method" line="29"><f a="v">
	<c path="thx.validation.OptionValidator.T"/>
	<e path="Bool"/>
</f></valueExists>
		<labels public="1" set="method" line="36"><f a=""><c path="Array"><c path="String"/></c></f></labels>
		<descriptions public="1" set="method" line="44"><f a=""><c path="Array"><c path="String"/></c></f></descriptions>
		<validate public="1" set="method" line="57" override="1"><f a="value">
	<c path="thx.validation.OptionValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="15"><f a="?options:?it:?showOptionsInFailureMessage">
	<t path="Iterable"><t path="thx.validation.Option"><c path="thx.validation.OptionValidator.T"/></t></t>
	<t path="Iterable"><c path="thx.validation.OptionValidator.T"/></t>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="thx.sys.io.FileInput" params="" file="src/thx/sys/io/FileInput.hx"><c path="neko.io.FileInput"/></typedef>
	<class path="haxe.io.Bytes" params="" file="C:\Projects\haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="225" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="253" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="292" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="207"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="221"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.math.Const" params="" file="src/thx/math/Const.hx">
		<TWO_PI public="1" get="inline" set="null" line="10" static="1"><c path="Float"/></TWO_PI>
		<PI public="1" get="inline" set="null" line="15" static="1">
			<c path="Float"/>
			<haxe_doc>
	* Math constant pi
	</haxe_doc>
		</PI>
		<HALF_PI public="1" get="inline" set="null" line="20" static="1">
			<c path="Float"/>
			<haxe_doc>
	* Math constant pi/2
	</haxe_doc>
		</HALF_PI>
		<TO_DEGREE public="1" get="inline" set="null" line="25" static="1">
			<c path="Float"/>
			<haxe_doc>
	* Constant used to convert angle from radians to degrees
	</haxe_doc>
		</TO_DEGREE>
		<TO_RADIAN public="1" get="inline" set="null" line="30" static="1">
			<c path="Float"/>
			<haxe_doc>
	* Constant used to convert degrees to radians.
	</haxe_doc>
		</TO_RADIAN>
		<LN10 public="1" get="inline" set="null" line="32" static="1"><c path="Float"/></LN10>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.languages.Kn" params="" file="src/thx/languages/Kn.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NnNO" params="" file="src/thx/cultures/NnNO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Floats" params="" file="src/Floats.hx">
		<normalize public="1" set="method" line="13" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></normalize>
		<clamp public="1" set="method" line="23" static="1"><f a="v:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clamp>
		<clampSym public="1" set="method" line="33" static="1"><f a="v:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clampSym>
		<range public="1" set="method" line="43" static="1"><f a="start:?stop:?step">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
</f></range>
		<sign public="1" get="inline" set="null" line="59" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></sign>
		<abs public="1" get="inline" set="null" line="64" static="1"><f a="a">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" get="inline" set="null" line="69" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" get="inline" set="null" line="74" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<wrap public="1" set="method" line="79" static="1"><f a="v:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></wrap>
		<circularWrap public="1" set="method" line="86" static="1"><f a="v:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></circularWrap>
		<interpolate public="1" set="method" line="94" static="1"><f a="f:?a:?b:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="101" static="1"><f a="?a:?b:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="f">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></interpolatef>
		<ascending public="1" set="method" line="109" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></ascending>
		<descending public="1" set="method" line="110" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></descending>
		<format public="1" set="method" line="112" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="117" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<_reparse line="140" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="141" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="146" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></parse>
		<compare public="1" get="inline" set="null" line="153" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.MkMK" params="" file="src/thx/cultures/MkMK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Lv" params="" file="src/thx/languages/Lv.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Es" params="" file="src/thx/languages/Es.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\Projects\haxe/std/haxe/io/BytesData.hx"><c path="neko.NativeString"/></typedef>
	<class path="thx.cultures.TtRU" params="" file="src/thx/cultures/TtRU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ZhTW" params="" file="src/thx/cultures/ZhTW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neko.db.Object" params="" file="C:\Projects\haxe/std/neko/db/Object.hx">
		<local_manager><a>
	<objectToString set="method"><f a="o">
	<c path="neko.db.Object"/>
	<c path="String"/>
</f></objectToString>
	<doUpdate set="method"><f a="o">
	<c path="neko.db.Object"/>
	<e path="Void"/>
</f></doUpdate>
	<doSync set="method"><f a="o">
	<c path="neko.db.Object"/>
	<e path="Void"/>
</f></doSync>
	<doInsert set="method"><f a="o">
	<c path="neko.db.Object"/>
	<e path="Void"/>
</f></doInsert>
	<doDelete set="method"><f a="o">
	<c path="neko.db.Object"/>
	<e path="Void"/>
</f></doDelete>
</a></local_manager>
		<insert public="1" set="method" line="57"><f a=""><e path="Void"/></f></insert>
		<update public="1" set="dynamic" line="61"><f a=""><e path="Void"/></f></update>
		<sync public="1" set="method" line="65"><f a=""><e path="Void"/></f></sync>
		<delete public="1" set="method" line="69"><f a=""><e path="Void"/></f></delete>
		<toString public="1" set="method" line="73"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="54"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	SPOD Object : the persistent object base type. See the tutorial on haXe
	website to learn how to use SPOD.
</haxe_doc>
	</class>
	<class path="thx.languages.Sr" params="" file="src/thx/languages/Sr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnJM" params="" file="src/thx/cultures/EnJM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FrCH" params="" file="src/thx/cultures/FrCH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="StringTools" params="" file="C:\Projects\haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<_urlEncode line="285" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></_urlEncode>
		<_urlDecode line="286" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></_urlDecode>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<typedef path="thx.sys.Web" params="" file="src/thx/sys/Web.hx">
		<c path="neko.Web"/>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</typedef>
	<class path="thx.cultures.KaGE" params="" file="src/thx/cultures/KaGE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Projects\haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="thx.cultures.FrFR" params="" file="src/thx/cultures/FrFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EuES" params="" file="src/thx/cultures/EuES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Iterables" params="" file="src/Iterables.hx">
		<indexOf public="1" params="T" get="inline" set="null" line="9" static="1"><f a="it:?v:?f">
	<t path="Iterable"><c path="indexOf.T"/></t>
	<c path="indexOf.T"/>
	<f a="">
		<c path="indexOf.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></indexOf>
		<contains public="1" params="T" get="inline" set="null" line="14" static="1"><f a="it:?v:?f">
	<t path="Iterable"><c path="contains.T"/></t>
	<c path="contains.T"/>
	<f a="">
		<c path="contains.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></contains>
		<array public="1" params="T" get="inline" set="null" line="19" static="1"><f a="it">
	<t path="Iterable"><c path="array.T"/></t>
	<c path="Array"><c path="array.T"/></c>
</f></array>
		<map public="1" params="TIn:TOut" get="inline" set="null" line="24" static="1"><f a="it:f">
	<t path="Iterable"><c path="map.TIn"/></t>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<each public="1" params="T" get="inline" set="null" line="29" static="1"><f a="it:f">
	<t path="Iterable"><c path="each.T"/></t>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<reduce public="1" params="TIn:TOut" get="inline" set="null" line="34" static="1"><f a="it:f:initialValue">
	<t path="Iterable"><c path="reduce.TIn"/></t>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<random public="1" params="T" get="inline" set="null" line="39" static="1"><f a="it">
	<t path="Iterable"><c path="random.T"/></t>
	<c path="random.T"/>
</f></random>
		<any public="1" params="T" get="inline" set="null" line="44" static="1"><f a="it:f">
	<t path="Iterable"><c path="any.T"/></t>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" get="inline" set="null" line="49" static="1"><f a="it:f">
	<t path="Iterable"><c path="all.T"/></t>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<last public="1" params="T" get="inline" set="null" line="54" static="1"><f a="it">
	<t path="Iterable"><c path="last.T"/></t>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<first public="1" params="T" get="inline" set="null" line="59" static="1"><f a="it">
	<t path="Iterable"><c path="first.T"/></t>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<order public="1" params="T" get="inline" set="null" line="64" static="1"><f a="it:?f">
	<t path="Iterable"><c path="order.T"/></t>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.BgBG" params="" file="src/thx/cultures/BgBG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.PatternValidator" params="" file="src/thx/validation/PatternValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<pattern public="1"><c path="EReg"/></pattern>
		<failureMessage public="1"><c path="String"/></failureMessage>
		<validate public="1" set="method" line="21" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="15"><f a="pattern:?failureMessage">
	<c path="EReg"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.culture.core.NumberInfo" params="" file="src/thx/culture/core/NumberInfo.hx">
		<decimals public="1" set="null"><c path="Int"/></decimals>
		<decimalsSeparator public="1" set="null"><c path="String"/></decimalsSeparator>
		<groups public="1" set="null"><c path="Array"><c path="Int"/></c></groups>
		<groupsSeparator public="1" set="null"><c path="String"/></groupsSeparator>
		<patternNegative public="1" set="null"><c path="String"/></patternNegative>
		<patternPositive public="1" set="null"><c path="String"/></patternPositive>
		<new public="1" set="method" line="11"><f a="decimals:decimalsSeparator:groups:groupsSeparator:patternNegative:patternPositive">
	<c path="Int"/>
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="C:\Projects\haxe/std/haxe/io/Output.hx">
		<_float_bytes line="247" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_float_bytes>
		<_double_bytes line="248" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_double_bytes>
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="37"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="64"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="67"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="70"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<write public="1" set="method" line="77"><f a="s">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="88"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="96"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="108"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="120"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="126"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="131"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="142"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="147"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt24>
		<writeInt31 public="1" set="method" line="160"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="177"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="192"><f a="x">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="212">
			<f a="nbytes">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.
	</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="215"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="237"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<haxe_doc>
	An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.
</haxe_doc>
	</class>
	<enum path="haxe.macro.Position" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"/>
	<enum path="haxe.macro.Constant" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprRequire" params="T" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="e"><t path="Null"><t path="haxe.macro.Expr"/></t></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="f"><t path="haxe.macro.Function"/></EFunction>
		<EFor a="v:it:expr">
			<c path="String"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub><t path="Null"><c path="String"/></t></sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPConst a="c"><e path="haxe.macro.Constant"/></TPConst>
	</enum>
	<typedef path="haxe.macro.Function" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<name><t path="Null"><c path="String"/></t></name>
	<expr><t path="haxe.macro.Expr"/></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value><t path="Null"><t path="haxe.macro.Expr"/></t></value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.FieldType"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<isPublic><t path="Null"><e path="Bool"/></t></isPublic>
</a></typedef>
	<enum path="haxe.macro.FieldType" params="" file="C:\Projects\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t"><e path="haxe.macro.ComplexType"/></FVar>
		<FProp a="t:get:set">
			<e path="haxe.macro.ComplexType"/>
			<c path="String"/>
			<c path="String"/>
		</FProp>
		<FFun a="args:ret">
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.ComplexType"/>
		</FFun>
	</enum>
	<class path="Dynamics" params="" file="src/Dynamics.hx">
		<format public="1" set="method" line="11" static="1"><f a="v:?param:?params:?nullstring:?culture">
	<d/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="16" static="1"><f a="?param:?params:?nullstring:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<d/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="45" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<d/>
	<d/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<unknown/>
</f></interpolate>
		<interpolatef public="1" set="method" line="50" static="1"><f a="a:b:?equation">
	<d/>
	<d/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<d/>
	</f>
</f></interpolatef>
		<toString public="1" set="method" line="74" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></toString>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.DeLU" params="" file="src/thx/cultures/DeLU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.translation.EmptyTranslation" params="" file="src/thx/translation/EmptyTranslation.hx">
		<implements path="thx.translation.ITranslation"/>
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
		<_domain><c path="String"/></_domain>
		<_ public="1" set="method" line="16"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_>
		<__ public="1" set="method" line="21"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></__>
		<getDomain set="method" line="29"><f a=""><c path="String"/></f></getDomain>
		<setDomain set="method" line="33"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setDomain>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.HtmlHandler" params="" file="src/thx/html/HtmlHandler.hx" interface="1">
		<start public="1" set="method"><f a="tag:attrs:unary">
	<c path="String"/>
	<c path="Array"><t path="thx.html.Attr"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<end public="1" set="method"><f a="tag">
	<c path="String"/>
	<e path="Void"/>
</f></end>
		<chars public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></chars>
		<comment public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<doctype public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<declaration public="1" set="method"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></declaration>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="thx.html.Attr" params="" file="src/thx/html/HtmlHandler.hx" module="thx.html.HtmlHandler"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
	<escaped><c path="String"/></escaped>
</a></typedef>
	<enum path="thx.util.Result" params="" file="src/thx/util/Result.hx">
		<Ok/>
		<Failure a="messages"><c path="Array"><c path="thx.util.Message"/></c></Failure>
	</enum>
	<class path="thx.cultures.ItCH" params="" file="src/thx/cultures/ItCH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ca" params="" file="src/thx/languages/Ca.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Tr" params="" file="src/thx/languages/Tr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.Lib" params="" file="src/thx/sys/Lib.hx">
		<c path="neko.Lib"/>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</typedef>
	<class path="thx.languages.Uz" params="" file="src/thx/languages/Uz.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="thx.html.HtmlVersion" params="" file="src/thx/html/HtmlVersion.hx">
		<XHtml11/>
		<XHtml10Transitional/>
		<XHtml10Strict/>
		<XHtml10Frameset/>
		<Html5/>
		<Html401Transitional/>
		<Html401Strict/>
		<Html401Frameset/>
	</enum>
	<class path="thx.languages.Ro" params="" file="src/thx/languages/Ro.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.json.Json" params="" file="src/thx/json/Json.hx">
		<encode public="1" params="T" set="method" line="8" static="1"><f a="value">
	<c path="encode.T"/>
	<c path="String"/>
</f></encode>
		<decode public="1" params="T" set="method" line="15" static="1"><f a="value">
	<c path="String"/>
	<c path="decode.T"/>
</f></decode>
	</class>
	<class path="thx.cultures.NeNP" params="" file="src/thx/cultures/NeNP.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\Projects\haxe/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<class path="thx.cultures.ThTH" params="" file="src/thx/cultures/ThTH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Strings" params="" file="src/Strings.hx">
		<_re line="14" static="1"><c path="EReg"/></_re>
		<_reSplitWC line="15" static="1"><c path="EReg"/></_reSplitWC>
		<_reReduceWS line="16" static="1"><c path="EReg"/></_reReduceWS>
		<_reStripTags line="18" static="1"><c path="EReg"/></_reStripTags>
		<_reFormat line="21" static="1"><c path="EReg"/></_reFormat>
		<format public="1" set="method" line="104" static="1">
			<f a="pattern:values:?nullstring:?culture">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[
	* Take a string pattern and replaces the placeholders with the value contained in values.
	* The culture parameter is needed for proper localization of numeric and date values.
	* Placeholders follows this schema:
<pre>
{pos[:format][,param]*}
</pre>
	* <em>pos</em> is the position in the array
	* <em>format</em> is a string sequence that identifies a specific value format (see below)
	* <em>param</em> is one or more optional parameters specific to certain format values.
	*
	* <pre>
Numeric Formats
---------------
D (default) Decimal format. The default number of decimals is set by culture. This value can overriden
            using the length parameter.
I           Integer format.
C           Currency format. The default number of decimals is set by culture. This value can overriden
            using the length parameter. The symbol can be overridden appending a string value after C
			Ei. "{0:C,3,USD}" will print something like "USD2.000" instead of "$2.00"
P           Percent format.
M           Permille format.

Date Formats
---------------
D (default) Date format.
DS          Short Date format.
DST         Short date / long time format.
DSTS        Short date / short time format.
DT          Long date / long time format.
DTS         Long date / short time format.
Y           Year format.
YM          Year Month format.
M           Month format.
MN          Month name format.
MS          Short Month name format.
MD          Month Day format.
WD          Week day format.
WDN         Week day name format.
WDS         Short week day name format.
R           RFC Date format.
DT          Date Time format.
U           Universal format.
S           Sortable format.
T           Time format.
TS          Short Time format.
C			Custom, second parameter is the format as described in FormatDate

Boolean Formats
---------------
B			Normal bool (true, false)
N			Numeric representation (1, 0)
R			Replace values with first parameter for true and second for false

String Formats
---------------
S			Normal text.
T           Truncate. First parameter is the length to trim, second is the ellipsis
			(optional parameter, defaults to '...')
PL          Pad left. First parameter is the length, second is filling char
			(optional parameter, defaults to ' ')
PR          Pad right. First parameter is the length, second is filling char
			(optional parameter, defaults to ' ')

List Formats
---------------
J           Joins the elements of the list.
			The first parameter is the format for individual items
			The second parameter is what is shown when the list is empty (defaults to '[]')
			The third is the separator.
            The fourth is the maximum number of values to show (default to nolimit).
			The fifth parameter the ellipsis for not included values (defaults to '...'),
C			Counts the elements in the list
			
TODO:
List Formats
---------------
C           Concats the elements of the list

Other things to do. Nested placeholders
</pre>
	]]></haxe_doc>
		</format>
		<formatf public="1" set="method" line="135" static="1"><f a="pattern:?nullstring:?culture">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<f a="values">
		<c path="Array"><d/></c>
		<c path="String"/>
	</f>
</f></formatf>
		<formatOne public="1" set="method" line="173" static="1"><f a="v:?param:?params:?culture">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></formatOne>
		<formatOnef public="1" set="method" line="178" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="String"/>
		<c path="String"/>
	</f>
</f></formatOnef>
		<upTo public="1" set="method" line="212" static="1"><f a="value:searchFor">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></upTo>
		<startFrom public="1" set="method" line="222" static="1"><f a="value:searchFor">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></startFrom>
		<rtrim public="1" set="method" line="232" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></rtrim>
		<ltrim public="1" set="method" line="250" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></ltrim>
		<trim public="1" get="inline" set="null" line="267" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></trim>
		<ucfirst public="1" get="inline" set="null" line="276" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ucfirst>
		<lcfirst public="1" get="inline" set="null" line="281" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></lcfirst>
		<empty public="1" set="method" line="286" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></empty>
		<isAlphaNum public="1" get="inline" set="null" line="291" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></isAlphaNum>
		<digitsOnly public="1" get="inline" set="null" line="300" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></digitsOnly>
		<ucwords public="1" set="method" line="309" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ucwords>
		<ucwordsws public="1" set="method" line="319" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Like ucwords but uses only white spaces as boundaries
	 * @param	value
	 * @return
	 </haxe_doc>
		</ucwordsws>
		<__upperMatch set="method" line="328" static="1"><f a="re">
	<c path="EReg"/>
	<c path="String"/>
</f></__upperMatch>
		<__ucwordsPattern line="332" static="1"><c path="EReg"/></__ucwordsPattern>
		<__ucwordswsPattern line="334" static="1"><c path="EReg"/></__ucwordswsPattern>
		<__alphaNumPattern line="335" static="1"><c path="EReg"/></__alphaNumPattern>
		<__digitsPattern line="336" static="1"><c path="EReg"/></__digitsPattern>
		<humanize public="1" set="method" line="343" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	*  Replaces undescores with space, finds UC characters, turns them into LC and prepends them with a space.
	*  More than one UC in sequence is left untouched.
	</haxe_doc>
		</humanize>
		<capitalize public="1" set="method" line="349" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></capitalize>
		<succ public="1" set="method" line="355" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></succ>
		<underscore public="1" set="method" line="361" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></underscore>
		<dasherize public="1" set="method" line="370" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></dasherize>
		<repeat public="1" set="method" line="375" static="1"><f a="s:times">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
</f></repeat>
		<wrapColumns public="1" set="method" line="383" static="1"><f a="s:?columns:?indent:?newline">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapColumns>
		<_wrapColumns set="method" line="394" static="1"><f a="s:columns:indent:newline">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_wrapColumns>
		<stripTags public="1" set="method" line="433" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></stripTags>
		<ascending public="1" set="method" line="442" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></ascending>
		<descending public="1" set="method" line="443" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></descending>
		<_reInterpolateNumber line="445" static="1"><c path="EReg"/></_reInterpolateNumber>
		<interpolate public="1" set="method" line="446" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="451" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolatef>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\Projects\haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="33"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	This exception is raised when reading while data is no longer available in the [Input].
</haxe_doc>
	</class>
	<typedef path="thx.sys.db.Manager" params="T" file="src/thx/sys/db/Manager.hx"><c path="neko.db.Manager"><c path="thx.sys.db.Manager.T"/></c></typedef>
	<class path="neko.db.Connection" params="" file="C:\Projects\haxe/std/neko/db/Connection.hx" interface="1">
		<request public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="neko.db.ResultSet"/>
</f></request>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<escape public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<e path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method"><f a=""><c path="Int"/></f></lastInsertId>
		<dbName public="1" set="method"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method"><f a=""><e path="Void"/></f></startTransaction>
		<commit public="1" set="method"><f a=""><e path="Void"/></f></commit>
		<rollback public="1" set="method"><f a=""><e path="Void"/></f></rollback>
	</class>
	<class path="neko.db._Sqlite.SqliteConnection" params="" file="C:\Projects\haxe/std/neko/db/Sqlite.hx" private="1" module="neko.db.Sqlite">
		<implements path="neko.db.Connection"/>
		<_encode line="91" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></_encode>
		<_connect line="92" static="1"><f a="">
	<unknown/>
	<e path="Void"/>
</f></_connect>
		<_close line="93" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></_close>
		<_request line="94" static="1"><f a=":">
	<e path="Void"/>
	<unknown/>
	<e path="Void"/>
</f></_request>
		<_last_id line="95" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></_last_id>
		<c><e path="Void"/></c>
		<close public="1" set="method" line="37"><f a=""><e path="Void"/></f></close>
		<request public="1" set="method" line="41"><f a="s">
	<c path="String"/>
	<c path="neko.db.ResultSet"/>
</f></request>
		<escape public="1" set="method" line="49"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method" line="53"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method" line="59"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<e path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method" line="69"><f a=""><c path="Int"/></f></lastInsertId>
		<dbName public="1" set="method" line="73"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method" line="77"><f a=""><e path="Void"/></f></startTransaction>
		<commit public="1" set="method" line="81"><f a=""><e path="Void"/></f></commit>
		<rollback public="1" set="method" line="86"><f a=""><e path="Void"/></f></rollback>
		<new public="1" set="method" line="33"><f a="file">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neko.db.ResultSet" params="" file="C:\Projects\haxe/std/neko/db/ResultSet.hx" interface="1">
		<length public="1" get="getLength" set="null"><c path="Int"/></length>
		<nfields public="1" get="getNFields" set="null"><c path="Int"/></nfields>
		<hasNext public="1" set="method"><f a=""><e path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<results public="1" set="method"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method"><f a="n">
	<c path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method"><f a="n">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method"><f a=""><t path="Null"><c path="Array"><c path="String"/></c></t></f></getFieldsNames>
	</class>
	<class path="neko.db._Sqlite.SqliteResultSet" params="" file="C:\Projects\haxe/std/neko/db/Sqlite.hx" private="1" module="neko.db.Sqlite">
		<implements path="neko.db.ResultSet"/>
		<result_next line="189" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></result_next>
		<result_get_length line="190" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></result_get_length>
		<result_get_nfields line="191" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></result_get_nfields>
		<result_get line="192" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<c path="String"/>
</f></result_get>
		<result_get_int line="193" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<c path="Int"/>
</f></result_get_int>
		<result_get_float line="194" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<c path="Float"/>
</f></result_get_float>
		<length public="1" get="getLength" set="null"><c path="Int"/></length>
		<nfields public="1" get="getNFields" set="null"><c path="Int"/></nfields>
		<r><e path="Void"/></r>
		<cache><c path="List"><d/></c></cache>
		<getLength set="method" line="112"><f a=""><c path="Int"/></f></getLength>
		<getNFields set="method" line="125"><f a=""><c path="Int"/></f></getNFields>
		<hasNext public="1" set="method" line="129"><f a=""><e path="Bool"/></f></hasNext>
		<next public="1" set="method" line="137"><f a=""><d/></f></next>
		<doNext set="method" line="144"><f a=""><d/></f></doNext>
		<results public="1" set="method" line="162"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method" line="173"><f a="n">
	<c path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method" line="177"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method" line="181"><f a="n">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method" line="185"><f a=""><c path="Array"><c path="String"/></c></f></getFieldsNames>
		<new public="1" set="method" line="106"><f a="r">
	<e path="Void"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neko.db.Sqlite" params="" file="C:\Projects\haxe/std/neko/db/Sqlite.hx"><open public="1" set="method" line="200" static="1"><f a="file">
	<c path="String"/>
	<c path="neko.db.Connection"/>
</f></open></class>
	<class path="thx.json.JsonDecoder" params="" file="src/thx/json/JsonDecoder.hx">
		<col><c path="Int"/></col>
		<line><c path="Int"/></line>
		<tabsize><c path="Int"/></tabsize>
		<rest><c path="String"/></rest>
		<char><c path="String"/></char>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<decode public="1" set="method" line="32"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<ignoreWhiteSpace set="method" line="55"><f a=""><e path="Void"/></f></ignoreWhiteSpace>
		<parse set="method" line="77"><f a=""><e path="Void"/></f></parse>
		<readChar set="method" line="99"><f a=""><c path="String"/></f></readChar>
		<expect set="method" line="115"><f a="word">
	<c path="String"/>
	<e path="Bool"/>
</f></expect>
		<parseObject set="method" line="133"><f a=""><e path="Void"/></f></parseObject>
		<parseArray set="method" line="161"><f a=""><e path="Void"/></f></parseArray>
		<parseValue set="method" line="184"><f a=""><e path="Void"/></f></parseValue>
		<parseString set="method" line="196"><f a=""><e path="Void"/></f></parseString>
		<_parseString set="method" line="201"><f a=""><c path="String"/></f></_parseString>
		<parseHexa set="method" line="258"><f a=""><t path="Null"><c path="Int"/></t></f></parseHexa>
		<parseFloat set="method" line="273"><f a=""><e path="Void"/></f></parseFloat>
		<parseDigits set="method" line="327"><f a="?atleast">
	<c path="Int"/>
	<c path="String"/>
</f></parseDigits>
		<error set="method" line="355"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></error>
		<new public="1" set="method" line="26"><f a="handler:?tabsize">
	<c path="thx.data.IDataHandler"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<enum path="thx.json._JsonDecoder.StreamError" params="" file="src/thx/json/JsonDecoder.hx" private="1" module="thx.json.JsonDecoder"><Eof/></enum>
	<class path="thx.cultures.EnUS" params="" file="src/thx/cultures/EnUS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MnMongCN" params="" file="src/thx/cultures/MnMongCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.db.Sqlite" params="" file="src/thx/sys/db/Sqlite.hx"><c path="neko.db.Sqlite"/></typedef>
	<class path="neko.io.FileOutput" params="" file="C:\Projects\haxe/std/neko/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<file_close line="64" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<unknown/>
</f></file_close>
		<file_seek line="65" static="1"><f a="::">
	<e path="neko.io.FileHandle"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></file_seek>
		<file_tell line="66" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<c path="Int"/>
</f></file_tell>
		<file_flush line="68" static="1"><f a="">
	<e path="neko.io.FileHandle"/>
	<unknown/>
</f></file_flush>
		<file_write line="69" static="1"><f a=":::">
	<e path="neko.io.FileHandle"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></file_write>
		<file_write_char line="70" static="1"><f a=":">
	<e path="neko.io.FileHandle"/>
	<c path="Int"/>
	<unknown/>
</f></file_write_char>
		<__f><e path="neko.io.FileHandle"/></__f>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="43" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="47" override="1"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="51" override="1"><f a=""><e path="Void"/></f></close>
		<seek public="1" set="method" line="56"><f a="p:pos">
	<c path="Int"/>
	<e path="neko.io.FileSeek"/>
	<e path="Void"/>
</f></seek>
		<tell public="1" set="method" line="60"><f a=""><c path="Int"/></f></tell>
		<new public="1" set="method" line="35"><f a="f">
	<e path="neko.io.FileHandle"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Use [neko.io.File.write] to create a [FileOutput]
</haxe_doc>
	</class>
	<class path="thx.cultures.EnIN" params="" file="src/thx/cultures/EnIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SwKE" params="" file="src/thx/cultures/SwKE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsUS" params="" file="src/thx/cultures/EsUS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neko.NativeString" params="" file="C:\Projects\haxe/std/neko/NativeString.hx">
		<ofString public="1" get="inline" set="null" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="neko.NativeString"/>
</f></ofString>
		<toString public="1" get="inline" set="null" line="33" static="1"><f a="s">
	<c path="neko.NativeString"/>
	<c path="String"/>
</f></toString>
		<length public="1" get="inline" set="null" line="37" static="1"><f a="s">
	<c path="neko.NativeString"/>
	<c path="Int"/>
</f></length>
	</class>
	<class path="thx.languages.Kok" params="" file="src/thx/languages/Kok.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.scale.LinearString" params="" file="src/thx/math/scale/LinearString.hx">
		<x0><c path="Float"/></x0>
		<x1><c path="Float"/></x1>
		<y0><c path="String"/></y0>
		<y1><c path="String"/></y1>
		<kx><c path="Float"/></kx>
		<f><f a="::">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></f>
		<i><f a="">
	<c path="Float"/>
	<c path="String"/>
</f></i>
		<scale public="1" set="method" line="26"><f a="x:?_">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></scale>
		<getDomain public="1" set="method" line="28"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<domain public="1" set="method" line="30"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.LinearString"/>
</f></domain>
		<getRange public="1" set="method" line="37"><f a=""><c path="Array"><c path="String"/></c></f></getRange>
		<range public="1" set="method" line="39"><f a="y0:y1">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.math.scale.LinearString"/>
</f></range>
		<getInterpolate public="1" set="method" line="46"><f a=""><f a="::">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></f></getInterpolate>
		<interpolatef public="1" set="method" line="48"><f a="x">
	<f a="::">
		<c path="String"/>
		<c path="String"/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<c path="String"/>
		</f>
	</f>
	<c path="thx.math.scale.LinearString"/>
</f></interpolatef>
		<tickRange set="method" line="54"><f a="m">
	<c path="Float"/>
	<a>
		<stop><c path="Float"/></stop>
		<step><c path="Float"/></step>
		<start><c path="Float"/></start>
	</a>
</f></tickRange>
		<ticks public="1" set="method" line="75"><f a="m">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
</f></ticks>
		<tickFormat public="1" set="method" line="81"><f a="m">
	<c path="Float"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></tickFormat>
		<new public="1" set="method" line="19"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.csv.CsvDecoder" params="" file="src/thx/csv/CsvDecoder.hx">
		<delimiter public="1" set="null"><c path="String"/></delimiter>
		<trimvalues public="1" set="null"><e path="Bool"/></trimvalues>
		<emptytonull public="1" set="null"><e path="Bool"/></emptytonull>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<_s><c path="String"/></_s>
		<_end><c path="EReg"/></_end>
		<decode public="1" set="method" line="30"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<parseLine set="method" line="41"><f a=""><e path="Void"/></f></parseLine>
		<parseValue set="method" line="50"><f a=""><e path="Bool"/></f></parseValue>
		<typeToken set="method" line="81"><f a="s:trim">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></typeToken>
		<new public="1" set="method" line="19"><f a="handler:?delimiter:?trimvalues:?emptytonull">
	<c path="thx.data.IDataHandler"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EsPA" params="" file="src/thx/cultures/EsPA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.RuRU" params="" file="src/thx/cultures/RuRU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsCO" params="" file="src/thx/cultures/EsCO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnMY" params="" file="src/thx/cultures/EnMY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KlGL" params="" file="src/thx/cultures/KlGL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UgCN" params="" file="src/thx/cultures/UgCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IdID" params="" file="src/thx/cultures/IdID.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.LtLT" params="" file="src/thx/cultures/LtLT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.No" params="" file="src/thx/languages/No.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Gl" params="" file="src/thx/languages/Gl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Da" params="" file="src/thx/languages/Da.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Be" params="" file="src/thx/languages/Be.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.AttributeFormat" params="" file="src/thx/xml/AttributeFormat.hx">
		<formatAttributes public="1" set="method" line="7"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatAttributes>
		<formatAttribute public="1" set="method" line="18"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></formatAttribute>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.UnquotedHtmlAttributeFormat" params="" file="src/thx/html/UnquotedHtmlAttributeFormat.hx">
		<extends path="thx.xml.AttributeFormat"/>
		<_containsWS><c path="EReg"/></_containsWS>
		<formatAttribute public="1" set="method" line="14" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></formatAttribute>
		<quote set="method" line="22"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.scale.Linear" params="" file="src/thx/math/scale/Linear.hx">
		<extends path="thx.math.scale.NumericScale"><c path="thx.math.scale.Linear"/></extends>
		<m><c path="Int"/></m>
		<getModulo public="1" set="method" line="21"><f a=""><c path="Float"/></f></getModulo>
		<modulo public="1" set="method" line="22"><f a="m">
	<c path="Int"/>
	<c path="thx.math.scale.Linear"/>
</f></modulo>
		<tickRange public="1" set="method" line="28"><f a=""><a>
	<stop><c path="Float"/></stop>
	<step><c path="Float"/></step>
	<start><c path="Float"/></start>
</a></f></tickRange>
		<ticks public="1" set="method" line="49" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<tickFormat public="1" set="method" line="55" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.BrFR" params="" file="src/thx/cultures/BrFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.db.Connection" params="" file="src/thx/sys/db/Connection.hx"><c path="neko.db.Connection"/></typedef>
	<class path="thx.languages.Uk" params="" file="src/thx/languages/Uk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.AutoDocumentFormat" params="" file="src/thx/xml/AutoDocumentFormat.hx">
		<extends path="thx.xml.DocumentFormat"/>
		<indent public="1"><c path="String"/></indent>
		<newline public="1"><c path="String"/></newline>
		<wrapColumns public="1"><c path="Int"/></wrapColumns>
		<_level><c path="Int"/></_level>
		<_begin><e path="Bool"/></_begin>
		<indentWrap set="method" line="25"><f a="content">
	<c path="String"/>
	<c path="String"/>
</f></indentWrap>
		<format public="1" set="method" line="30" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<formatDocType set="method" line="35" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatProlog set="method" line="40" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatComment set="method" line="45" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatEmptyElement set="method" line="53" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatOpenElement set="method" line="58" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatCloseElement set="method" line="63" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatChildren set="method" line="68" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatChildren>
		<formatDocument set="method" line="76" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocument>
		<formatPCData set="method" line="81" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatCData set="method" line="86" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArJO" params="" file="src/thx/cultures/ArJO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.svg.Shape" params="" file="src/thx/svg/Shape.hx">
		<apply set="method" line="10"><f a="o:?d">
	<a/>
	<d/>
	<e path="Void"/>
</f></apply>
		<shape public="1" set="method" line="27"><f a="?d:?i">
	<d/>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.svg.Arc" params="" file="src/thx/svg/Arc.hx">
		<extends path="thx.svg.Shape"/>
		<r0><c path="Float"/></r0>
		<r1><c path="Float"/></r1>
		<a0><c path="Float"/></a0>
		<a1><c path="Float"/></a1>
		<getInnerRadius public="1" set="method" line="22"><f a=""><c path="Float"/></f></getInnerRadius>
		<innerRadius public="1" set="method" line="23"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"/>
</f></innerRadius>
		<getOuterRadius public="1" set="method" line="29"><f a=""><c path="Float"/></f></getOuterRadius>
		<outerRadius public="1" set="method" line="30"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"/>
</f></outerRadius>
		<getStartAngle public="1" set="method" line="36"><f a=""><c path="Float"/></f></getStartAngle>
		<startAngle public="1" set="method" line="37"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"/>
</f></startAngle>
		<getEndAngle public="1" set="method" line="43"><f a=""><c path="Float"/></f></getEndAngle>
		<endAngle public="1" set="method" line="44"><f a="v">
	<c path="Float"/>
	<c path="thx.svg.Arc"/>
</f></endAngle>
		<shape public="1" set="method" line="50" override="1"><f a="?d:?i">
	<d/>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<centroid public="1" set="method" line="87"><f a=""><c path="Array"><c path="Float"/></c></f></centroid>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.html.HtmlParser" params="" file="src/thx/html/HtmlParser.hx">
		<startTag line="17" static="1"><c path="EReg"/></startTag>
		<endTag line="18" static="1"><c path="EReg"/></endTag>
		<attr line="19" static="1"><c path="EReg"/></attr>
		<comment line="20" static="1"><c path="EReg"/></comment>
		<cdata line="21" static="1"><c path="EReg"/></cdata>
		<doctype line="22" static="1"><c path="EReg"/></doctype>
		<declaration line="23" static="1"><c path="EReg"/></declaration>
		<handler><c path="thx.html.HtmlHandler"/></handler>
		<html><c path="String"/></html>
		<stack><c path="Array"><c path="String"/></c></stack>
		<process public="1" set="method" line="34"><f a="handler">
	<c path="thx.html.HtmlHandler"/>
	<e path="Void"/>
</f></process>
		<stacklast get="inline" set="null" line="110"><f a=""><c path="String"/></f></stacklast>
		<parseStartTag set="method" line="115"><f a="tagName:rest:unary">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></parseStartTag>
		<parseEndTag set="method" line="159"><f a="tagName">
	<c path="String"/>
	<e path="Void"/>
</f></parseEndTag>
		<new public="1" set="method" line="27"><f a="html">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* Port of HTML Parser By John Resig (ejohn.org)
* Original code by Erik Arvidsson, Mozilla Public License
* http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
*
* // Use this way:
* var xml : Xml = Html.toXml(htmlString);
*
</haxe_doc>
	</class>
	<class path="thx.error.AbstractMethod" params="" file="src/thx/error/AbstractMethod.hx">
		<extends path="thx.error.Error"/>
		<new public="1" set="method" line="12"><f a="?posInfo">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.math.scale.Categories" params="" file="src/thx/math/scale/Categories.hx">
		<category10 line="10" static="1"><c path="Array"><c path="String"/></c></category10>
		<cat10 public="1" set="method" line="14" static="1"><f a=""><c path="thx.math.scale.Ordinal">
	<unknown/>
	<c path="String"/>
</c></f></cat10>
		<category20 line="19" static="1"><c path="Array"><c path="String"/></c></category20>
		<cat20 public="1" set="method" line="31" static="1"><f a=""><c path="thx.math.scale.Ordinal">
	<unknown/>
	<c path="String"/>
</c></f></cat20>
		<category20b line="36" static="1"><c path="Array"><c path="String"/></c></category20b>
		<cat20b public="1" set="method" line="43" static="1"><f a=""><c path="thx.math.scale.Ordinal">
	<unknown/>
	<c path="String"/>
</c></f></cat20b>
		<category20c line="48" static="1"><c path="Array"><c path="String"/></c></category20c>
		<cat20c public="1" set="method" line="55" static="1"><f a=""><c path="thx.math.scale.Ordinal">
	<unknown/>
	<c path="String"/>
</c></f></cat20c>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.data.IDataHandler" params="" file="src/thx/data/IDataHandler.hx" interface="1">
		<start public="1" set="method"><f a=""><e path="Void"/></f></start>
		<end public="1" set="method"><f a=""><e path="Void"/></f></end>
		<startObject public="1" set="method"><f a=""><e path="Void"/></f></startObject>
		<startField public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></startField>
		<endField public="1" set="method"><f a=""><e path="Void"/></f></endField>
		<endObject public="1" set="method"><f a=""><e path="Void"/></f></endObject>
		<startArray public="1" set="method"><f a=""><e path="Void"/></f></startArray>
		<startItem public="1" set="method"><f a=""><e path="Void"/></f></startItem>
		<endItem public="1" set="method"><f a=""><e path="Void"/></f></endItem>
		<endArray public="1" set="method"><f a=""><e path="Void"/></f></endArray>
		<date public="1" set="method"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></date>
		<string public="1" set="method"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></string>
		<int public="1" set="method"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></int>
		<float public="1" set="method"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></float>
		<null public="1" set="method"><f a=""><e path="Void"/></f></null>
		<bool public="1" set="method"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></bool>
		<comment public="1" set="method"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.csv.CsvEncoder" params="" file="src/thx/csv/CsvEncoder.hx">
		<implements path="thx.data.IDataHandler"/>
		<delimiter public="1" set="null"><c path="String"/></delimiter>
		<nulltoempty public="1" set="null"><e path="Bool"/></nulltoempty>
		<newline public="1" set="null"><c path="String"/></newline>
		<encodedString public="1" set="null"><c path="String"/></encodedString>
		<re><c path="EReg"/></re>
		<buf><c path="StringBuf"/></buf>
		<lineContext><e path="Bool"/></lineContext>
		<valueContext><e path="Bool"/></valueContext>
		<firstLine><e path="Bool"/></firstLine>
		<firstValue><e path="Bool"/></firstValue>
		<start public="1" set="method" line="35"><f a=""><e path="Void"/></f></start>
		<end public="1" set="method" line="41"><f a=""><e path="Void"/></f></end>
		<startObject public="1" set="method" line="46"><f a=""><e path="Void"/></f></startObject>
		<startField public="1" set="method" line="50"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></startField>
		<endField public="1" set="method" line="51"><f a=""><e path="Void"/></f></endField>
		<endObject public="1" set="method" line="52"><f a=""><e path="Void"/></f></endObject>
		<startArray public="1" set="method" line="54"><f a=""><e path="Void"/></f></startArray>
		<startItem public="1" set="method" line="58"><f a=""><e path="Void"/></f></startItem>
		<endItem public="1" set="method" line="75"><f a=""><e path="Void"/></f></endItem>
		<endArray public="1" set="method" line="79"><f a=""><e path="Void"/></f></endArray>
		<date public="1" set="method" line="85"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></date>
		<string public="1" set="method" line="92"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></string>
		<int public="1" set="method" line="101"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></int>
		<float public="1" set="method" line="105"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></float>
		<null public="1" set="method" line="109"><f a=""><e path="Void"/></f></null>
		<bool public="1" set="method" line="115"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></bool>
		<comment public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<new public="1" set="method" line="27"><f a="?delimiter:?nulltoempty:?newline">
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.collections.Set" params="T" file="src/thx/collections/Set.hx">
		<ofArray public="1" params="T" set="method" line="10" static="1"><f a="arr">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="thx.collections.Set"><c path="ofArray.T"/></c>
</f></ofArray>
		<_v><c path="Array"><c path="thx.collections.Set.T"/></c></_v>
		<add public="1" set="method" line="23"><f a="v">
	<c path="thx.collections.Set.T"/>
	<e path="Void"/>
</f></add>
		<remove public="1" set="method" line="29"><f a="v">
	<c path="thx.collections.Set.T"/>
	<e path="Bool"/>
</f></remove>
		<exists public="1" set="method" line="34"><f a="v">
	<c path="thx.collections.Set.T"/>
	<e path="Bool"/>
</f></exists>
		<iterator public="1" set="method" line="42"><f a=""><t path="Iterator"><t path="Null"><c path="thx.collections.Set.T"/></t></t></f></iterator>
		<array public="1" set="method" line="47"><f a=""><c path="Array"><c path="thx.collections.Set.T"/></c></f></array>
		<toString public="1" set="method" line="52"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="18"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.html.Element" params="" file="src/thx/html/Element.hx">
		<shouldPreserve public="1" get="inline" set="null" line="15" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Elements whose content should be left untouched (no wrapping, no white-space trimming)
	 </haxe_doc>
		</shouldPreserve>
		<_preserve line="16" static="1"><c path="thx.collections.Set"><c path="String"/></c></_preserve>
		<isEmpty public="1" get="inline" set="null" line="21" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Empty Elements
	 </haxe_doc>
		</isEmpty>
		<_empty line="22" static="1"><c path="thx.collections.Set"><c path="String"/></c></_empty>
		<isBlock public="1" get="inline" set="null" line="27" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Block Elements
	 </haxe_doc>
		</isBlock>
		<_block line="28" static="1"><c path="thx.collections.Set"><c path="String"/></c></_block>
		<isInline public="1" get="inline" set="null" line="33" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Inline Elements
	 </haxe_doc>
		</isInline>
		<_inline line="34" static="1"><c path="thx.collections.Set"><c path="String"/></c></_inline>
		<isBreakElement public="1" get="inline" set="null" line="39" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Break Elements
	 </haxe_doc>
		</isBreakElement>
		<_break line="40" static="1"><c path="thx.collections.Set"><c path="String"/></c></_break>
		<isCloseSelf public="1" get="inline" set="null" line="46" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Elements that you can, intentionally, leave open
	 * (and which close themselves)
	 </haxe_doc>
		</isCloseSelf>
		<_closeSelf line="47" static="1"><c path="thx.collections.Set"><c path="String"/></c></_closeSelf>
		<isSpecial public="1" get="inline" set="null" line="52" static="1">
			<f a="el">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Special Elements (can contain anything)
	 </haxe_doc>
		</isSpecial>
		<_special line="53" static="1"><c path="thx.collections.Set"><c path="String"/></c></_special>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.math.scale.Ordinal" params="TData:TRange" file="src/thx/math/scale/Ordinal.hx">
		<_domain><c path="Array"><c path="thx.math.scale.Ordinal.TData"/></c></_domain>
		<_range><c path="Array"><c path="thx.math.scale.Ordinal.TRange"/></c></_range>
		<rangeBand public="1" set="null"><c path="Float"/></rangeBand>
		<scalef public="1" set="method" line="19"><f a=""><f a="x">
	<c path="thx.math.scale.Ordinal.TData"/>
	<c path="thx.math.scale.Ordinal.TRange"/>
</f></f></scalef>
		<scaleMap public="1" set="method" line="24"><f a="x:i">
	<c path="thx.math.scale.Ordinal.TData"/>
	<c path="Int"/>
	<c path="thx.math.scale.Ordinal.TRange"/>
</f></scaleMap>
		<scale public="1" set="method" line="26"><f a="x">
	<c path="thx.math.scale.Ordinal.TData"/>
	<c path="thx.math.scale.Ordinal.TRange"/>
</f></scale>
		<getDomain public="1" set="method" line="37"><f a=""><c path="Array"><c path="thx.math.scale.Ordinal.TData"/></c></f></getDomain>
		<domain public="1" set="method" line="42"><f a="x">
	<c path="Array"><c path="thx.math.scale.Ordinal.TData"/></c>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TData"/>
		<c path="thx.math.scale.Ordinal.TRange"/>
	</c>
</f></domain>
		<getRange public="1" set="method" line="48"><f a=""><c path="Array"><c path="thx.math.scale.Ordinal.TRange"/></c></f></getRange>
		<range public="1" set="method" line="53"><f a="a">
	<c path="Array"><c path="thx.math.scale.Ordinal.TRange"/></c>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TData"/>
		<c path="thx.math.scale.Ordinal.TRange"/>
	</c>
</f></range>
		<rangePoints public="1" set="method" line="59"><f a="start:stop:?padding">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TData"/>
		<c path="Float"/>
	</c>
</f></rangePoints>
		<rangeBands public="1" set="method" line="70"><f a="start:stop:?padding">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TData"/>
		<c path="Float"/>
	</c>
</f></rangeBands>
		<rangeRoundBands public="1" set="method" line="79"><f a="start:stop:?padding">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="thx.math.scale.Ordinal">
		<c path="thx.math.scale.Ordinal.TData"/>
		<c path="Int"/>
	</c>
</f></rangeRoundBands>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="IntIter" params="" file="C:\Projects\haxe/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="thx.cultures.EnTT" params="" file="src/thx/cultures/EnTT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AzCyrlAZ" params="" file="src/thx/cultures/AzCyrlAZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArBH" params="" file="src/thx/cultures/ArBH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.rtti.Meta" params="" file="C:\Projects\haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="35" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given type (class or enum)
	</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="43" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class fields or enum constructors
	</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="51" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class static fields
	</haxe_doc>
		</getFields>
		<haxe_doc>
	An api to access classes and enums metadata at runtime.
</haxe_doc>
	</class>
	<enum path="neko.io.FileHandle" params="" file="C:\Projects\haxe/std/neko/io/File.hx" module="neko.io.File"/>
	<enum path="neko.io.FileSeek" params="" file="C:\Projects\haxe/std/neko/io/File.hx" module="neko.io.File">
		<SeekEnd/>
		<SeekCur/>
		<SeekBegin/>
	</enum>
	<class path="neko.io.File" params="" file="C:\Projects\haxe/std/neko/io/File.hx">
		<getContent public="1" set="method" line="41" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></getContent>
		<getBytes public="1" set="method" line="45" static="1"><f a="path">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<read public="1" set="method" line="49" static="1"><f a="path:?binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="neko.io.FileInput"/>
</f></read>
		<write public="1" set="method" line="53" static="1"><f a="path:?binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="neko.io.FileOutput"/>
</f></write>
		<append public="1" set="method" line="57" static="1"><f a="path:?binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="neko.io.FileOutput"/>
</f></append>
		<copy public="1" set="method" line="61" static="1"><f a="src:dst">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></copy>
		<stdin public="1" set="method" line="69" static="1"><f a=""><c path="neko.io.FileInput"/></f></stdin>
		<stdout public="1" set="method" line="73" static="1"><f a=""><c path="neko.io.FileOutput"/></f></stdout>
		<stderr public="1" set="method" line="77" static="1"><f a=""><c path="neko.io.FileOutput"/></f></stderr>
		<getChar public="1" set="method" line="81" static="1"><f a="echo">
	<e path="Bool"/>
	<c path="Int"/>
</f></getChar>
		<file_stdin line="85" static="1"><f a=""><e path="neko.io.FileHandle"/></f></file_stdin>
		<file_stdout line="86" static="1"><f a=""><e path="neko.io.FileHandle"/></f></file_stdout>
		<file_stderr line="87" static="1"><f a=""><e path="neko.io.FileHandle"/></f></file_stderr>
		<file_contents line="89" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></file_contents>
		<file_open line="90" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></file_open>
		<getch line="92" static="1"><f a="">
	<e path="Bool"/>
	<c path="Int"/>
</f></getch>
		<haxe_doc>
	API for reading and writing to files.
</haxe_doc>
	</class>
	<class path="thx.cultures.HrHR" params="" file="src/thx/cultures/HrHR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.It" params="" file="src/thx/languages/It.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ja" params="" file="src/thx/languages/Ja.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.He" params="" file="src/thx/languages/He.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fi" params="" file="src/thx/languages/Fi.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BoCN" params="" file="src/thx/cultures/BoCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrLatnME" params="" file="src/thx/cultures/SrLatnME.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Th" params="" file="src/thx/languages/Th.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Eu" params="" file="src/thx/languages/Eu.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AsIN" params="" file="src/thx/cultures/AsIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Enums" params="" file="src/Enums.hx">
		<toString public="1" set="method" line="8" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></toString>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.languages.Ta" params="" file="src/thx/languages/Ta.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.TextHandler" params="" file="src/thx/html/TextHandler.hx">
		<implements path="thx.html.HtmlHandler"/>
		<results public="1" set="null"><c path="String"/></results>
		<start public="1" set="method" line="16"><f a="tag:attrs:unary">
	<c path="String"/>
	<c path="Array"><t path="thx.html.Attr"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<end public="1" set="method" line="24"><f a="tag">
	<c path="String"/>
	<e path="Void"/>
</f></end>
		<chars public="1" set="method" line="28"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></chars>
		<comment public="1" set="method" line="32"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<doctype public="1" set="method" line="36"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<declaration public="1" set="method" line="40"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></declaration>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.collections.IntHashList" params="T" file="src/thx/collections/IntHashList.hx">
		<length public="1" set="null"><c path="Int"/></length>
		<set public="1" set="method" line="19"><f a="key:value">
	<c path="Int"/>
	<c path="thx.collections.IntHashList.T"/>
	<e path="Void"/>
</f></set>
		<get public="1" set="method" line="29"><f a="key">
	<c path="Int"/>
	<t path="Null"><c path="thx.collections.IntHashList.T"/></t>
</f></get>
		<getAt public="1" set="method" line="34"><f a="index">
	<c path="Int"/>
	<t path="Null"><c path="thx.collections.IntHashList.T"/></t>
</f></getAt>
		<exists public="1" set="method" line="39"><f a="key">
	<c path="Int"/>
	<e path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="44"><f a="key">
	<c path="Int"/>
	<c path="thx.collections.IntHashList.T"/>
</f></remove>
		<removeAt public="1" set="method" line="54"><f a="index">
	<c path="Int"/>
	<c path="thx.collections.IntHashList.T"/>
</f></removeAt>
		<keys public="1" set="method" line="65"><f a=""><t path="Iterator"><c path="Int"/></t></f></keys>
		<iterator public="1" set="method" line="70"><f a=""><t path="Iterator"><c path="thx.collections.IntHashList.T"/></t></f></iterator>
		<clear public="1" set="method" line="75"><f a=""><e path="Void"/></f></clear>
		<array public="1" set="method" line="82"><f a=""><c path="Array"><c path="thx.collections.IntHashList.T"/></c></f></array>
		<toString public="1" set="method" line="90"><f a=""><c path="String"/></f></toString>
		<__keys><c path="Array"><c path="Int"/></c></__keys>
		<__hash><c path="IntHash"><c path="thx.collections.IntHashList.T"/></c></__hash>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.SrCyrlCS" params="" file="src/thx/cultures/SrCyrlCS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.culture.FormatDate" params="" file="src/thx/culture/FormatDate.hx">
		<format public="1" set="method" line="98" static="1">
			<f a="pattern:date:?culture:?leadingspace">
				<c path="String"/>
				<c path="Date"/>
				<c path="thx.culture.Culture"/>
				<e path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[
	* Returns a formatted date according to the passed pattern and culture. The pattern
	* paramter accepts the following modifiers.
	*
<pre>
    description                                                   example
===========================================================================
%a	The abbreviated weekday name according to the current locale. Wed
%A	The full weekday name according to the current locale.	      Wednesday
%b	The abbreviated month name according to the current locale.	  Jan
%B	The full month name according to the current locale.	      January
%c	The preferred date and time representation for the current locale.
%C	The century number (year/100) as a 2-digit integer.	          19
%d	The day of the month as a decimal number (range 01 to 31).	  07
%D	Equivalent to %m/%d/%y. (This is the USA date format.         06/25/04
    In many countries %d/%m/%y is the standard date format.
    Thus, in an international context, both of these formats are
    ambiguous and should be avoided.)
%e	Like %d, the day of the month as a decimal number, but a      7
    leading zero may be replaced by a leadingspace.
%G	The ISO 8601 year with century as a decimal number. The       2004
    4-digit year corresponding to the ISO week number (see %V).
    This has the same format and value as %y, except that if the
    ISO week number belongs to the previous or next year, that
    year is used instead.
%g	Like %G, but without century, i.e., with a 2-digit year       04
    (00-99).
%h	Equivalent to %b.	                                          Jan
%H	The hour as a decimal number using a 24-hour clock            22
    (range 00 to 23).
%I	The hour as a decimal number using a 12-hour clock            07
    (range 01 to 12).
%j	The day of the year as a decimal number (range 001 to 366).   008
%k	The hour (24-hour clock) as a decimal number (range 0 to 23); 7
    single-digits are optionally prefixed by leadingspace.
    (See also %H.)
%l	The hour (12-hour clock) as a decimal number (range 1 to 12); 7
    single-digits are optionally prefixed by leadingspace.
    (See also %I.)
%m	The month as a decimal number (range 01 to 12).	              04
%M	The minute as a decimal number (range 00 to 59).              08
%n	A newline character.
%p	Either 'AM' or 'PM' according to the given time value, or the AM
    corresponding strings for the current locale. Noon is treated
    as 'pm' and midnight as 'am'.
%P	Like %p but in lowercase: 'am' or 'pm' or a corresponding     AM
    string for the current locale.
%r	The time in a.m. or p.m. notation. In the POSIX locale this   07:08:09 am
    is equivalent to '%I:%M:%S %p'.
%R	The time in 24-hour notation (%H:%M). For a version including 07:08
    the seconds, see %T below.
%s	The number of seconds since the Epoch, i.e., since            1099928130
    1970-01-01 00:00:00 UTC.
%S	The second as a decimal number (range 00 to 61). the upper    07
    level of the range 61 rather than 59 to allow for the
    occasional leap second and even more occasional double leap
    second.
%t	A tab character.
%T	The time in 24-hour notation (%H:%M:%S).                      17:08:09
%u	The day of the week as a decimal, range 1 to 7, Monday
    being 1. See also %w.
%U	The week number of the current year as a decimal number,      26
    range 00 to 53, starting with the first Sunday as the first
    day of week 01. See also %V and %W.
%V	The ISO 8601:1988 week number of the current year as a        26
    decimal number, range 01 to 53, where week 1 is the first
    week that has at least 4 days in the current year, and with
    Monday as the first day of the week. See also %U and %W.
%w	The day of the week as a decimal, range 0 to 6, Sunday being
    0. See also %u.
%W	The week number of the current year as a decimal number,
    range 00 to 53, starting with the first Monday as the first
    day of week 01.
%x	The preferred date representation for the current locale
    without the time.
%X	The preferred time representation for the current locale
    without the date.
%y	The year as a decimal number without a century                04
    (range 00 to 99).
%Y	The year as a decimal number including the century.           2004
%z	The time-zone as hour offset from GMT. Required to emit       -2
    RFC822-conformant dates (using "%a, %d %b %Y %H:%M:%S %z").
%Z	The time zone or name or abbreviation.                        GMT
%%	A literal '%' character.                                      %

customs for missing features
%f  The month. Single-digit months may be prefixed by             6
    leadingspace.
%i  The minute. Single-digit minutes may be prefixed by           8
    leadingspace.
%q  The second. Single-digit seconds may be prefixed by           9
    leadingspace.
</pre>
	]]></haxe_doc>
		</format>
		<yearMonth public="1" set="method" line="164" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></yearMonth>
		<monthDay public="1" set="method" line="170" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthDay>
		<date public="1" set="method" line="176" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></date>
		<dateShort public="1" set="method" line="182" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateShort>
		<dateRfc public="1" set="method" line="188" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateRfc>
		<dateTime public="1" set="method" line="194" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateTime>
		<universal public="1" set="method" line="200" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></universal>
		<sortable public="1" set="method" line="206" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></sortable>
		<time public="1" set="method" line="212" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></time>
		<timeShort public="1" set="method" line="218" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></timeShort>
		<year public="1" set="method" line="224" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></year>
		<month public="1" set="method" line="230" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></month>
		<monthName public="1" set="method" line="236" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthName>
		<monthNameShort public="1" set="method" line="242" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthNameShort>
		<weekDay public="1" set="method" line="248" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDay>
		<weekDayName public="1" set="method" line="254" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDayName>
		<weekDayNameShort public="1" set="method" line="260" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDayNameShort>
	</class>
	<typedef path="thx.sys.db.ResultSet" params="" file="src/thx/sys/db/ResultSet.hx"><c path="neko.db.ResultSet"/></typedef>
	<class path="neko.Sys" params="" file="C:\Projects\haxe/std/neko/Sys.hx">
		<args public="1" set="method" line="29" static="1"><f a=""><c path="Array"><c path="String"/></c></f></args>
		<getEnv public="1" set="method" line="44" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></getEnv>
		<putEnv public="1" set="method" line="51" static="1"><f a="s:v">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></putEnv>
		<sleep public="1" set="method" line="55" static="1"><f a="seconds">
	<c path="Float"/>
	<e path="Void"/>
</f></sleep>
		<setTimeLocale public="1" set="method" line="59" static="1"><f a="loc">
	<c path="String"/>
	<e path="Bool"/>
</f></setTimeLocale>
		<getCwd public="1" set="method" line="63" static="1"><f a=""><c path="String"/></f></getCwd>
		<setCwd public="1" set="method" line="67" static="1"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></setCwd>
		<systemName public="1" set="method" line="71" static="1"><f a=""><c path="String"/></f></systemName>
		<escapeArgument public="1" set="method" line="75" static="1"><f a="arg">
	<c path="String"/>
	<c path="String"/>
</f></escapeArgument>
		<command public="1" set="method" line="89" static="1"><f a="cmd:?args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="Int"/>
</f></command>
		<exit public="1" set="method" line="98" static="1"><f a="code">
	<c path="Int"/>
	<e path="Void"/>
</f></exit>
		<time public="1" set="method" line="102" static="1"><f a=""><c path="Float"/></f></time>
		<cpuTime public="1" set="method" line="106" static="1"><f a=""><c path="Float"/></f></cpuTime>
		<executablePath public="1" set="method" line="110" static="1"><f a=""><c path="String"/></f></executablePath>
		<environment public="1" set="method" line="114" static="1"><f a=""><c path="Hash"><c path="String"/></c></f></environment>
		<get_env line="124" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></get_env>
		<put_env line="125" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></put_env>
		<_sleep line="126" static="1"><f a="">
	<c path="Float"/>
	<unknown/>
</f></_sleep>
		<set_time_locale line="127" static="1"><f a="">
	<unknown/>
	<e path="Bool"/>
</f></set_time_locale>
		<get_cwd line="128" static="1"><f a=""><c path="String"/></f></get_cwd>
		<set_cwd line="129" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></set_cwd>
		<sys_string line="130" static="1"><f a=""><c path="String"/></f></sys_string>
		<sys_command line="131" static="1"><f a="">
	<unknown/>
	<c path="Int"/>
</f></sys_command>
		<sys_exit line="132" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></sys_exit>
		<sys_time line="133" static="1"><f a=""><c path="Float"/></f></sys_time>
		<sys_cpu_time line="134" static="1"><f a=""><c path="Float"/></f></sys_cpu_time>
		<sys_exe_path line="135" static="1"><f a=""><c path="String"/></f></sys_exe_path>
		<sys_env line="136" static="1"><f a=""><c path="Array"><d/></c></f></sys_env>
	</class>
	<class path="thx.translation.DBTranslation" params="" file="src/thx/translation/DBTranslation.hx">
		<implements path="thx.translation.ITranslation"/>
		<TABLE_IDS public="1" get="inline" set="null" line="20" static="1"><c path="String"/></TABLE_IDS>
		<TABLE_MESSAGES public="1" get="inline" set="null" line="21" static="1"><c path="String"/></TABLE_MESSAGES>
		<TABLE_DOMAINS public="1" get="inline" set="null" line="22" static="1"><c path="String"/></TABLE_DOMAINS>
		<conn public="1" set="null"><c path="neko.db.Connection"/></conn>
		<_domain><c path="String"/></_domain>
		<_tablePrefix><c path="String"/></_tablePrefix>
		<_domains><c path="Hash"><a>
	<pluralRule><c path="Int"/></pluralRule>
	<id><c path="Int"/></id>
</a></c></_domains>
		<_automaticallyAddUntranslatedMessages><e path="Bool"/></_automaticallyAddUntranslatedMessages>
		<domain public="1" get="getDomain" set="setDomain"><c path="String"/></domain>
		<hasSchema public="1" set="method" line="42"><f a=""><e path="Bool"/></f></hasSchema>
		<createSchema public="1" set="method" line="47"><f a=""><e path="Void"/></f></createSchema>
		<addDomain public="1" set="method" line="76"><f a="?domain:?info">
	<c path="String"/>
	<c path="thx.culture.Info"/>
	<e path="Void"/>
</f></addDomain>
		<_insertOrChangeMessage set="method" line="93"><f a="msgid:domainid:msg:quantifier">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<t path="Null"><c path="Int"/></t>
	<e path="Void"/>
</f></_insertOrChangeMessage>
		<_retrieveOrAddMessageId set="method" line="104"><f a="msgid">
	<c path="String"/>
	<c path="Int"/>
</f></_retrieveOrAddMessageId>
		<addSingular public="1" set="method" line="113"><f a="id:text:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></addSingular>
		<addPlural public="1" set="method" line="122"><f a="ids:idp:texts:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<e path="Void"/>
</f></addPlural>
		<_getMessage set="method" line="138"><f a="id:domain:quantifier">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
</f></_getMessage>
		<_ public="1" set="method" line="153"><f a="id:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_>
		<__ public="1" set="method" line="168"><f a="ids:idp:quantifier:?domain">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></__>
		<getDomain set="method" line="188"><f a=""><c path="String"/></f></getDomain>
		<setDomain set="method" line="195"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setDomain>
		<_getDomainInfo set="method" line="202"><f a="domain">
	<c path="String"/>
	<t path="Null"><a>
	<pluralRule><c path="Int"/></pluralRule>
	<id><c path="Int"/></id>
</a></t>
</f></_getDomainInfo>
		<_getDBDomainInfo set="method" line="213"><f a="domain">
	<c path="String"/>
	<t path="Null"><a>
	<pluralRule><c path="Int"/></pluralRule>
	<id><c path="Int"/></id>
</a></t>
</f></_getDBDomainInfo>
		<getTableIds get="inline" set="null" line="223"><f a=""><c path="String"/></f></getTableIds>
		<getTableMessages get="inline" set="null" line="224"><f a=""><c path="String"/></f></getTableMessages>
		<getTableDomains get="inline" set="null" line="225"><f a=""><c path="String"/></f></getTableDomains>
		<new public="1" set="method" line="30"><f a="?domain:conn:?automaticallyAddUntranslatedMessages:?tableprefix">
	<c path="String"/>
	<c path="neko.db.Connection"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.ZhMO" params="" file="src/thx/cultures/ZhMO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.SingleLineValidator" params="" file="src/thx/validation/SingleLineValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<_re line="12" static="1"><c path="EReg"/></_re>
		<validate public="1" set="method" line="15" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<enum path="XmlType" params="" file="C:\Projects\haxe/std/neko/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="C:\Projects\haxe/std/neko/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Document>
		<_parse line="54" static="1"><f a=":">
	<unknown/>
	<a>
		<xml><f a="name:att">
	<c path="String"/>
	<unknown/>
	<e path="Void"/>
</f></xml>
		<pcdata><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></pcdata>
		<done><f a=""><e path="Void"/></f></done>
		<doctype><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<cur><c path="Xml"/></cur>
		<comment><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<cdata><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></cdata>
	</a>
	<unknown/>
</f></_parse>
		<parse public="1" set="method" line="56" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Parse a String into an Xml object.
	</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="125" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="134" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="141" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="148" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="155" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" line="162" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createProlog>
		<createDocument public="1" set="method" line="169" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocument>
		<nodeName public="1" get="getNodeName" set="setNodeName">
			<c path="String"/>
			<haxe_doc>
		Returns the node name of an Element.
	</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="getNodeValue" set="setNodeValue">
			<c path="String"/>
			<haxe_doc>
		Returns the node value. Only works if the Xml node is not an Element or a Document.
	</haxe_doc>
		</nodeValue>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>
		Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.
	</haxe_doc>
		</parent>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>
		Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.
	</haxe_doc>
		</nodeType>
		<_nodeName><c path="String"/></_nodeName>
		<_nodeValue><c path="String"/></_nodeValue>
		<_attributes><d><c path="String"/></d></_attributes>
		<_children><c path="Array"><c path="Xml"/></c></_children>
		<_parent><c path="Xml"/></_parent>
		<getNodeName set="method" line="176"><f a=""><c path="String"/></f></getNodeName>
		<setNodeName set="method" line="182"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></setNodeName>
		<getNodeValue set="method" line="188"><f a=""><c path="String"/></f></getNodeValue>
		<setNodeValue set="method" line="194"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setNodeValue>
		<getParent set="method" line="200"><f a=""><c path="Xml"/></f></getParent>
		<get public="1" set="method" line="204">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.
	</haxe_doc>
		</get>
		<set public="1" set="method" line="210">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the given attribute value for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</set>
		<remove public="1" set="method" line="216">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Removes an attribute for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</remove>
		<exists public="1" set="method" line="222">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the Element node has a given attribute.
		Attributes are case-sensitive.
	</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="228">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an [Iterator] on all the attributes values.
	</haxe_doc>
		</attributes>
		<iterator public="1" set="method" line="234">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="250">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="283">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method" line="317">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node.
	</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="323">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node which is an Element.
	</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="334">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.
	</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="342">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.
	</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="350">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts a child at the given position among the other childs.
	</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="358">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a String representation of the Xml node.
	</haxe_doc>
		</toString>
		<toStringRec set="method" line="364"><f a="s">
	<c path="StringBuf"/>
	<e path="Void"/>
</f></toStringRec>
		<new set="method" line="51"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<typedef path="Iterator" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="thx.cultures.EnZA" params="" file="src/thx/cultures/EnZA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Pa" params="" file="src/thx/languages/Pa.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.color.ColorIterator" params="" file="src/thx/color/ColorIterator.hx">
		<start public="1" set="null"><c path="thx.color.Rgb"/></start>
		<end public="1" set="null"><c path="thx.color.Rgb"/></end>
		<steps public="1" set="null"><c path="Int"/></steps>
		<equation public="1" set="null"><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></equation>
		<step><c path="Int"/></step>
		<hasNext public="1" set="method" line="26"><f a=""><e path="Bool"/></f></hasNext>
		<next public="1" set="method" line="31"><f a=""><e path="Void"/></f></next>
		<new public="1" set="method" line="17"><f a="start:end:steps:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<c path="Int"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="C:\Projects\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="35"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="31"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="C:\Projects\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="54"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="50"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="C:\Projects\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="73"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="69"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="C:\Projects\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="89"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="85"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="C:\Projects\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="103"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="99"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="C:\Projects\haxe/std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<innerData public="1" get="getInnerData" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="getInnerHTML" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="getElements" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<getName set="method" line="136"><f a=""><c path="String"/></f></getName>
		<getInnerData set="method" line="140"><f a=""><c path="String"/></f></getInnerData>
		<getInnerHTML set="method" line="152"><f a=""><c path="String"/></f></getInnerHTML>
		<getElements set="method" line="159"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><e path="Bool"/></f></hasNext>
</a></f></getElements>
		<new public="1" set="method" line="125"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="DateTools" params="" file="C:\Projects\haxe/std/DateTools.hx">
		<date_format line="36" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></date_format>
		<format public="1" set="method" line="116" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Format the date [d] according to the format [f]. The format
		is compatible with the [strftime] standard format, except that there
		is no support in Flash and JS for day and months names (due to lack
		of proper internationalization API). On haXe/Neko/Windows, some
		formats are not supported.
	</haxe_doc>
		</format>
		<delta public="1" set="method" line="129" static="1">
			<f a="d:t">
				<c path="Date"/>
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date which time has been changed by [t] milliseconds.
	</haxe_doc>
		</delta>
		<DAYS_OF_MONTH line="133" static="1"><c path="Array"><c path="Int"/></c></DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="138" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the number of days in a month
	</haxe_doc>
		</getMonthDays>
		<seconds public="1" set="method" line="152" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of seconds to a date-time
	</haxe_doc>
		</seconds>
		<minutes public="1" set="method" line="159" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of minutes to a date-time
	</haxe_doc>
		</minutes>
		<hours public="1" set="method" line="166" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of hours to a date-time
	</haxe_doc>
		</hours>
		<days public="1" set="method" line="173" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of days to a date-time
	</haxe_doc>
		</days>
		<parse public="1" set="method" line="180" static="1">
			<f a="t">
				<c path="Float"/>
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
			</f>
			<haxe_doc>
		Separate a date-time into several components
	</haxe_doc>
		</parse>
		<make public="1" set="method" line="196" static="1">
			<f a="o">
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Build a date-time from several components
	</haxe_doc>
		</make>
		<haxe_doc>
	The DateTools class contains some extra functionalities for [Date]
	manipulation. It's stored in a different class in order to prevent
	the standard [Date] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="thx.xml.NormalizeNewlineValueFormat" params="" file="src/thx/xml/NormalizeNewlineValueFormat.hx">
		<extends path="thx.xml.ValueFormat"/>
		<_newLineReplace><c path="EReg"/></_newLineReplace>
		<_newline><c path="String"/></_newline>
		<format public="1" set="method" line="14" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></format>
		<new public="1" set="method" line="7"><f a="?newline">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.languages.Tt" params="" file="src/thx/languages/Tt.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsCL" params="" file="src/thx/cultures/EsCL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Bools" params="" file="src/Bools.hx">
		<format public="1" set="method" line="11" static="1"><f a="v:?param:?params:?culture">
	<e path="Bool"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="16" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<e path="Bool"/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="35" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<e path="Bool"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="40" static="1"><f a="a:b:?equation">
	<e path="Bool"/>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="_">
		<c path="Float"/>
		<e path="Bool"/>
	</f>
</f></interpolatef>
		<canParse public="1" set="method" line="51" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="57" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></parse>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.AmET" params="" file="src/thx/cultures/AmET.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArMA" params="" file="src/thx/cultures/ArMA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Vi" params="" file="src/thx/languages/Vi.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.util.TypeFactory" params="TOut" file="src/thx/util/TypeFactory.hx">
		<_binders><c path="Hash"><f a=""><c path="thx.util.TypeFactory.TOut"/></f></c></_binders>
		<instance public="1" params="T" set="method" line="16"><f a="cls:o">
	<c path="Class"><c path="instance.T"/></c>
	<c path="thx.util.TypeFactory.TOut"/>
	<c path="thx.util.TypeFactory"><c path="thx.util.TypeFactory.TOut"/></c>
</f></instance>
		<bind public="1" params="T" set="method" line="21"><f a="cls:f">
	<c path="Class"><c path="bind.T"/></c>
	<f a=""><c path="thx.util.TypeFactory.TOut"/></f>
	<c path="thx.util.TypeFactory"><c path="thx.util.TypeFactory.TOut"/></c>
</f></bind>
		<memoize public="1" params="T" set="method" line="27"><f a="cls:f">
	<c path="Class"><c path="memoize.T"/></c>
	<f a=""><c path="thx.util.TypeFactory.TOut"/></f>
	<c path="thx.util.TypeFactory"><c path="thx.util.TypeFactory.TOut"/></c>
</f></memoize>
		<unbinded public="1" set="dynamic" line="37"><f a="cls">
	<c path="Class"><d/></c>
	<t path="Null"><c path="thx.util.TypeFactory.TOut"/></t>
</f></unbinded>
		<get public="1" params="T" set="method" line="42"><f a="cls">
	<c path="Class"><c path="get.T"/></c>
	<t path="Null"><c path="thx.util.TypeFactory.TOut"/></t>
</f></get>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.geom.layout.Stack" params="" file="src/thx/geom/layout/Stack.hx">
		<getStackOrder set="method" line="68" static="1"><f a="order:data">
	<e path="thx.geom.layout.StackOrder"/>
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c></c>
	<c path="Array"><c path="Int"/></c>
</f></getStackOrder>
		<getStackOffset set="method" line="105" static="1"><f a="offset:index:data">
	<e path="thx.geom.layout.StackOffset"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c></c>
	<e path="Void"/>
</f></getStackOffset>
		<stackMaxIndex set="method" line="176" static="1"><f a="data:_">
	<c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c>
	<c path="Int"/>
	<c path="Int"/>
</f></stackMaxIndex>
		<stackReduceSum set="method" line="193" static="1"><f a="data:_">
	<c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c>
	<c path="Int"/>
	<c path="Float"/>
</f></stackReduceSum>
		<stackSum set="method" line="198" static="1"><f a="p:c:i">
	<c path="Float"/>
	<t path="thx.geom.layout._Stack.Point0"/>
	<c path="Int"/>
	<c path="Float"/>
</f></stackSum>
		<_order><e path="thx.geom.layout.StackOrder"/></_order>
		<_offset><e path="thx.geom.layout.StackOffset"/></_offset>
		<stack public="1" set="method" line="19"><f a="data">
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point"/></c></c>
	<c path="Array"><c path="Array"><t path="thx.geom.layout._Stack.Point0"/></c></c>
</f></stack>
		<getOrder public="1" set="method" line="54"><f a=""><e path="thx.geom.layout.StackOrder"/></f></getOrder>
		<order public="1" set="method" line="55"><f a="x">
	<e path="thx.geom.layout.StackOrder"/>
	<c path="thx.geom.layout.Stack"/>
</f></order>
		<getOffset public="1" set="method" line="61"><f a=""><e path="thx.geom.layout.StackOffset"/></f></getOffset>
		<offset public="1" set="method" line="62"><f a="x">
	<e path="thx.geom.layout.StackOffset"/>
	<c path="thx.geom.layout.Stack"/>
</f></offset>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="thx.geom.layout._Stack.Point" params="" file="src/thx/geom/layout/Stack.hx" private="1" module="thx.geom.layout.Stack"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<typedef path="thx.geom.layout._Stack.Point0" params="" file="src/thx/geom/layout/Stack.hx" private="1" module="thx.geom.layout.Stack"><a>
	<y0><c path="Float"/></y0>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<enum path="thx.geom.layout.StackOrder" params="" file="src/thx/geom/layout/Stack.hx" module="thx.geom.layout.Stack">
		<ReverseOrder/>
		<InsideOut/>
		<DefaultOrder/>
	</enum>
	<enum path="thx.geom.layout.StackOffset" params="" file="src/thx/geom/layout/Stack.hx" module="thx.geom.layout.Stack">
		<ZeroOffset/>
		<Wiggle/>
		<Silhouette/>
	</enum>
	<class path="thx.cultures.ArEG" params="" file="src/thx/cultures/ArEG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArDZ" params="" file="src/thx/cultures/ArDZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.ZhHans" params="" file="src/thx/languages/ZhHans.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MnMN" params="" file="src/thx/cultures/MnMN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Array" params="T" file="C:\Projects\haxe/std/neko/_std/Array.hx">
		<new1 params="T" set="method" line="36" static="1"><f a="a:l">
	<c path="neko.NativeArray"><c path="new1.T"/></c>
	<c path="Int"/>
	<c path="Array"><c path="new1.T"/></c>
</f></new1>
		<__a><c path="neko.NativeArray"><c path="Array.T"/></c></__a>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method" line="43">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<copy public="1" set="method" line="54">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method" line="58">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<insert public="1" set="method" line="73">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<join public="1" set="method" line="86">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<toString public="1" set="method" line="98">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<pop public="1" set="method" line="111">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method" line="120">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<unshift public="1" set="method" line="127">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<remove public="1" set="method" line="135">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<reverse public="1" set="method" line="152">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method" line="166">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method" line="179">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method" line="196">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method" line="219">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<__get set="method" line="246"><f a="pos">
	<c path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="250"><f a="pos:v">
	<c path="Int"/>
	<c path="Array.T"/>
	<e path="Void"/>
</f></__set>
		<__double set="method" line="264"><f a="l">
	<c path="Int"/>
	<e path="Void"/>
</f></__double>
		<__neko set="method" line="279"><f a=""><c path="neko.NativeArray"><c path="Array.T"/></c></f></__neko>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="thx.cultures.GlES" params="" file="src/thx/cultures/GlES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsVE" params="" file="src/thx/cultures/EsVE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.EmailValidator" params="" file="src/thx/validation/EmailValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<_reEmail line="13" static="1"><c path="EReg"/></_reEmail>
		<_reEmailDomain line="14" static="1"><c path="EReg"/></_reEmailDomain>
		<validateDomain public="1"><e path="Bool"/></validateDomain>
		<validate public="1" set="method" line="22" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="17"><f a="?validatedomain">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.languages.Az" params="" file="src/thx/languages/Az.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Bg" params="" file="src/thx/languages/Bg.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.Sys" params="" file="src/thx/sys/Sys.hx">
		<c path="neko.Sys"/>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</typedef>
	<class path="thx.cultures.EnBZ" params="" file="src/thx/cultures/EnBZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.db.Object" params="" file="src/thx/sys/db/Object.hx"><c path="neko.db.Object"/></typedef>
	<class path="thx.languages.Sq" params="" file="src/thx/languages/Sq.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.db.Transaction" params="" file="src/thx/sys/db/Transaction.hx"><c path="neko.db.Transaction"/></typedef>
	<class path="thx.html.HtmlDocumentFormat" params="" file="src/thx/html/HtmlDocumentFormat.hx">
		<extends path="thx.xml.DocumentFormat"/>
		<indent public="1"><c path="String"/></indent>
		<newline public="1"><c path="String"/></newline>
		<wrapColumns public="1"><c path="Int"/></wrapColumns>
		<specialElementContentFormat public="1"><e path="thx.html.SpecialElementContentFormat"/></specialElementContentFormat>
		<_level><c path="Int"/></_level>
		<_begin><e path="Bool"/></_begin>
		<indentWrap set="method" line="26"><f a="content">
	<c path="String"/>
	<c path="String"/>
</f></indentWrap>
		<format public="1" set="method" line="34" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></format>
		<isEmpty set="method" line="39" override="1"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></isEmpty>
		<formatInlineNode public="1" set="method" line="44"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineNode>
		<formatInlineElement set="method" line="61"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineElement>
		<contentIsEmpty set="method" line="74"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></contentIsEmpty>
		<formatSpecialElement set="method" line="84"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatSpecialElement>
		<wrapSpecialElementContent set="method" line="94"><f a="content">
	<c path="String"/>
	<c path="String"/>
</f></wrapSpecialElementContent>
		<formatElement set="method" line="107" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatElement>
		<inlineContent set="method" line="157"><f a="node">
	<c path="Xml"/>
	<e path="Bool"/>
</f></inlineContent>
		<formatChildren set="method" line="168" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatChildren>
		<formatInlineChildren set="method" line="176"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineChildren>
		<formatDocType set="method" line="184" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocType>
		<formatProlog set="method" line="189" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatProlog>
		<formatComment set="method" line="194" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatComment>
		<formatInlineComment set="method" line="202"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineComment>
		<formatEmptyElement set="method" line="210" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatEmptyElement>
		<formatOpenElement set="method" line="215" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatOpenElement>
		<formatCloseElement set="method" line="220" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<formatInlineEmptyElement set="method" line="225"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineEmptyElement>
		<formatInlineOpenElement set="method" line="230"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineOpenElement>
		<formatInlineCloseElement set="method" line="235"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineCloseElement>
		<formatDocument set="method" line="240" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatDocument>
		<formatPCData set="method" line="245" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatPCData>
		<formatCData set="method" line="250" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCData>
		<formatInlinePCData set="method" line="255"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlinePCData>
		<formatInlineCData set="method" line="260"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatInlineCData>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="thx.html.SpecialElementContentFormat" params="" file="src/thx/html/HtmlDocumentFormat.hx" module="thx.html.HtmlDocumentFormat">
		<AsPlainText/>
		<AsCommentedText/>
		<AsCData/>
	</enum>
	<class path="thx.html.Html" params="" file="src/thx/html/Html.hx">
		<getFormatter public="1" set="method" line="13" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<c path="thx.html.XHtmlFormat"/>
</f></getFormatter>
		<getHtml public="1" set="method" line="38" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getHtml>
		<getHead public="1" set="method" line="45" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getHead>
		<getTitle public="1" set="method" line="50" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getTitle>
		<getBody public="1" set="method" line="55" static="1"><f a="dom">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getBody>
		<createDocument public="1" set="method" line="60" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<c path="Xml"/>
</f></createDocument>
		<getParser public="1" set="method" line="66" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<f a="">
		<c path="String"/>
		<c path="Xml"/>
	</f>
</f></getParser>
		<getTemplate public="1" set="method" line="77" static="1"><f a="version">
	<e path="thx.html.HtmlVersion"/>
	<c path="String"/>
</f></getTemplate>
		<getTemplateHtml4Strict set="method" line="100" static="1"><f a=""><c path="String"/></f></getTemplateHtml4Strict>
		<getTemplateHtml4Transitional set="method" line="105" static="1"><f a=""><c path="String"/></f></getTemplateHtml4Transitional>
		<getTemplateHtml4Frameset set="method" line="110" static="1"><f a=""><c path="String"/></f></getTemplateHtml4Frameset>
		<getTemplateHtml5 set="method" line="115" static="1"><f a=""><c path="String"/></f></getTemplateHtml5>
		<getTemplateXHtml10Transitional set="method" line="120" static="1"><f a=""><c path="String"/></f></getTemplateXHtml10Transitional>
		<getTemplateXHtml10Strict set="method" line="125" static="1"><f a=""><c path="String"/></f></getTemplateXHtml10Strict>
		<getTemplateXHtml10Frameset set="method" line="130" static="1"><f a=""><c path="String"/></f></getTemplateXHtml10Frameset>
		<getTemplateXHtml11 set="method" line="135" static="1"><f a=""><c path="String"/></f></getTemplateXHtml11>
		<toXml public="1" set="method" line="140" static="1"><f a="html">
	<c path="String"/>
	<c path="Xml"/>
</f></toXml>
		<toXmlString public="1" set="method" line="148" static="1"><f a="html">
	<c path="String"/>
	<c path="String"/>
</f></toXmlString>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Arrays" params="" file="src/Arrays.hx">
		<addIf public="1" params="T" set="method" line="10" static="1"><f a="arr:?condition:value">
	<c path="Array"><c path="addIf.T"/></c>
	<e path="Bool"/>
	<t path="Null"><c path="addIf.T"/></t>
	<c path="Array"><c path="addIf.T"/></c>
</f></addIf>
		<add public="1" params="T" get="inline" set="null" line="21" static="1"><f a="arr:value">
	<c path="Array"><c path="add.T"/></c>
	<c path="add.T"/>
	<c path="Array"><c path="add.T"/></c>
</f></add>
		<delete public="1" params="T" get="inline" set="null" line="27" static="1"><f a="arr:value">
	<c path="Array"><c path="delete.T"/></c>
	<c path="delete.T"/>
	<c path="Array"><c path="delete.T"/></c>
</f></delete>
		<filter public="1" params="T" set="method" line="33" static="1"><f a="arr:f">
	<c path="Array"><c path="filter.T"/></c>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<min public="1" params="T" set="method" line="42" static="1"><f a="arr:?f">
	<c path="Array"><c path="min.T"/></c>
	<f a="">
		<c path="min.T"/>
		<c path="Float"/>
	</f>
	<t path="Null"><c path="min.T"/></t>
</f></min>
		<floatMin public="1" params="T" set="method" line="57" static="1"><f a="arr:f">
	<c path="Array"><c path="floatMin.T"/></c>
	<f a="">
		<c path="floatMin.T"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></floatMin>
		<max public="1" params="T" set="method" line="66" static="1"><f a="arr:?f">
	<c path="Array"><c path="max.T"/></c>
	<f a="">
		<c path="max.T"/>
		<c path="Float"/>
	</f>
	<t path="Null"><c path="max.T"/></t>
</f></max>
		<floatMax public="1" params="T" set="method" line="81" static="1"><f a="arr:f">
	<c path="Array"><c path="floatMax.T"/></c>
	<f a="">
		<c path="floatMax.T"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></floatMax>
		<flatten public="1" params="T" set="method" line="90" static="1"><f a="arr">
	<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
	<c path="Array"><c path="flatten.T"/></c>
</f></flatten>
		<map public="1" params="TIn:TOut" get="inline" set="null" line="98" static="1"><f a="arr:f">
	<c path="Array"><c path="map.TIn"/></c>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<reduce public="1" params="TIn:TOut" get="inline" set="null" line="107" static="1"><f a="arr:f:initialValue">
	<c path="Array"><c path="reduce.TIn"/></c>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<order public="1" params="T" get="inline" set="null" line="116" static="1"><f a="arr:?f">
	<c path="Array"><c path="order.T"/></c>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<split public="1" params="T" set="method" line="122" static="1"><f a="arr:?f">
	<c path="Array"><c path="split.T"/></c>
	<f a=":">
		<c path="split.T"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="Array"><c path="split.T"/></c></c>
</f></split>
		<exists public="1" params="T" set="method" line="138" static="1"><f a="arr:?value:?f">
	<c path="Array"><c path="exists.T"/></c>
	<c path="exists.T"/>
	<f a="">
		<c path="exists.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></exists>
		<format public="1" set="method" line="153" static="1"><f a="v:?param:?params:?culture">
	<c path="Array"><d/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="183" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Array"><d/></c>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="215" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Float"/></c>
</f></interpolate>
		<interpolatef public="1" set="method" line="220" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="Float"/></c>
	</f>
</f></interpolatef>
		<interpolateStrings public="1" set="method" line="245" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="String"/></c>
</f></interpolateStrings>
		<interpolateStringsf public="1" set="method" line="250" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="String"/></c>
	</f>
</f></interpolateStringsf>
		<interpolateInts public="1" set="method" line="275" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Int"/></c>
</f></interpolateInts>
		<interpolateIntsf public="1" set="method" line="280" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="Int"/></c>
	</f>
</f></interpolateIntsf>
		<indexOf public="1" params="T" set="method" line="305" static="1"><f a="arr:el">
	<c path="Array"><c path="indexOf.T"/></c>
	<c path="indexOf.T"/>
	<c path="Int"/>
</f></indexOf>
		<every public="1" params="T" set="method" line="318" static="1"><f a="arr:f">
	<c path="Array"><c path="every.T"/></c>
	<f a=":">
		<c path="every.T"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></every>
		<each public="1" params="T" set="method" line="330" static="1"><f a="arr:f">
	<c path="Array"><c path="each.T"/></c>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<any public="1" params="T" get="inline" set="null" line="340" static="1"><f a="arr:f">
	<c path="Array"><c path="any.T"/></c>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" get="inline" set="null" line="345" static="1"><f a="arr:f">
	<c path="Array"><c path="all.T"/></c>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<random public="1" params="T" set="method" line="350" static="1"><f a="arr">
	<c path="Array"><c path="random.T"/></c>
	<c path="random.T"/>
</f></random>
		<toString public="1" params="T" set="method" line="355" static="1"><f a="arr">
	<c path="Array"><c path="toString.T"/></c>
	<c path="String"/>
</f></toString>
		<last public="1" params="T" get="inline" set="null" line="360" static="1"><f a="arr">
	<c path="Array"><c path="last.T"/></c>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<first public="1" params="T" get="inline" set="null" line="365" static="1"><f a="arr">
	<c path="Array"><c path="first.T"/></c>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.ArLB" params="" file="src/thx/cultures/ArLB.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.Attribute" params="" file="src/thx/html/Attribute.hx">
		<isFill public="1" get="inline" set="null" line="13" static="1"><f a="el">
	<c path="String"/>
	<e path="Bool"/>
</f></isFill>
		<_fill line="14" static="1"><c path="thx.collections.Set"><c path="String"/></c></_fill>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.error.NotImplemented" params="" file="src/thx/error/NotImplemented.hx">
		<extends path="thx.error.Error"/>
		<new public="1" set="method" line="11"><f a="?posInfo">
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.ini.Ini" params="" file="src/thx/ini/Ini.hx">
		<encode public="1" set="method" line="14" static="1"><f a="value">
	<a/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="21" static="1"><f a="value">
	<c path="String"/>
	<d/>
</f></decode>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.IuCansCA" params="" file="src/thx/cultures/IuCansCA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="42" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HyAM" params="" file="src/thx/cultures/HyAM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Mn" params="" file="src/thx/languages/Mn.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.FileSystem" params="" file="src/thx/sys/FileSystem.hx">
		<c path="neko.FileSystem"/>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</typedef>
	<class path="Types" params="" file="src/Types.hx">
		<className public="1" get="inline" set="null" line="5" static="1"><f a="o">
	<d/>
	<t path="Null"><c path="String"/></t>
</f></className>
		<fullName public="1" get="inline" set="null" line="10" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></fullName>
		<typeName public="1" set="method" line="15" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></typeName>
		<hasSuperClass public="1" set="method" line="31" static="1"><f a="type:sup">
	<c path="Class"><d/></c>
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></hasSuperClass>
		<isAnonymous public="1" get="inline" set="null" line="42" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isAnonymous>
		<as public="1" params="T1:T2" get="inline" set="null" line="47" static="1"><f a="value:type">
	<c path="as.T1"/>
	<c path="Class"><c path="as.T2"/></c>
	<t path="Null"><c path="as.T2"/></t>
</f></as>
		<ifIs public="1" params="T1:T2" set="method" line="52" static="1"><f a="value:type:handler">
	<c path="ifIs.T1"/>
	<c path="Class"><c path="ifIs.T2"/></c>
	<f a="">
		<c path="ifIs.T2"/>
		<e path="Void"/>
	</f>
	<c path="ifIs.T1"/>
</f></ifIs>
		<of public="1" params="T" get="inline" set="null" line="59" static="1"><f a="type:value">
	<c path="Class"><c path="of.T"/></c>
	<d/>
	<t path="Null"><c path="of.T"/></t>
</f></of>
		<sameAs public="1" set="method" line="64" static="1"><f a="a:b">
	<d/>
	<d/>
	<e path="Bool"/>
</f></sameAs>
	</class>
	<class path="thx.cultures.EnNZ" params="" file="src/thx/cultures/EnNZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Kk" params="" file="src/thx/languages/Kk.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.KmKH" params="" file="src/thx/cultures/KmKH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ur" params="" file="src/thx/languages/Ur.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sv" params="" file="src/thx/languages/Sv.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SaIN" params="" file="src/thx/cultures/SaIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.text.Paths" params="" file="src/thx/text/Paths.hx">
		<base public="1" set="method" line="11" static="1"><f a="path:?suffix">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></base>
		<dir public="1" set="method" line="28" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></dir>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="C:\Projects\haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="38"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></sort>
		<sortFields set="method" line="64"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="Null"><t path="haxe.rtti.ClassField"/></t></c>
</f></sortFields>
		<process public="1" set="method" line="84"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Void"/>
</f></process>
		<mergeRights set="method" line="90"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeRights>
		<mergeFields set="method" line="99"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></mergeFields>
		<mergeClasses set="method" line="103"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<e path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="139"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<e path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="159"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<e path="Bool"/>
</f></mergeTypedefs>
		<merge set="method" line="167"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<e path="Void"/>
</f></merge>
		<mkPath set="method" line="233"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="237"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="244"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="254"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="258"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="264"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xpath set="method" line="274"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="285"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="321"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xenum set="method" line="343"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="363"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xtypedef set="method" line="391"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="414"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="465"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="472"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.PtPT" params="" file="src/thx/cultures/PtPT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SlSI" params="" file="src/thx/cultures/SlSI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.CloseSelfHtmlNodeFormat" params="" file="src/thx/html/CloseSelfHtmlNodeFormat.hx">
		<extends path="thx.html.HtmlNodeFormat"/>
		<formatCloseElement public="1" set="method" line="7" override="1"><f a="node">
	<c path="Xml"/>
	<c path="String"/>
</f></formatCloseElement>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.data.ValueEncoder" params="" file="src/thx/data/ValueEncoder.hx">
		<handler><c path="thx.data.IDataHandler"/></handler>
		<encode public="1" set="method" line="17"><f a="o">
	<d/>
	<e path="Void"/>
</f></encode>
		<encodeValue set="method" line="24"><f a="o">
	<d/>
	<e path="Void"/>
</f></encodeValue>
		<encodeObject set="method" line="61"><f a="o">
	<a/>
	<e path="Void"/>
</f></encodeObject>
		<encodeHash set="method" line="73"><f a="o">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></encodeHash>
		<encodeList set="method" line="85"><f a="list">
	<c path="List"><d/></c>
	<e path="Void"/>
</f></encodeList>
		<encodeArray set="method" line="97"><f a="a">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></encodeArray>
		<new public="1" set="method" line="12"><f a="handler">
	<c path="thx.data.IDataHandler"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EsHN" params="" file="src/thx/cultures/EsHN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="thx.math.EaseMode" params="" file="src/thx/math/EaseMode.hx">
		<EaseOutEaseIn/>
		<EaseOut/>
		<EaseInEaseOut/>
		<EaseIn/>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</enum>
	<class path="thx.geom.layout.Chord" params="" file="src/thx/geom/layout/Chord.hx">
		<_chords><c path="Array"><t path="thx.geom.layout.ChordType"/></c></_chords>
		<_groups><c path="Array"><t path="thx.geom.layout.ItemType"/></c></_groups>
		<_matrix><c path="Array"><c path="Array"><c path="Int"/></c></c></_matrix>
		<_n><c path="Int"/></_n>
		<_padding><c path="Float"/></_padding>
		<_sortGroups><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></_sortGroups>
		<_sortSubgroups><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></_sortSubgroups>
		<_sortChords><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></_sortChords>
		<relayout set="method" line="25"><f a=""><e path="Void"/></f></relayout>
		<resort set="method" line="132"><f a=""><e path="Void"/></f></resort>
		<getMatrix public="1" set="method" line="142"><f a=""><c path="Array"><c path="Array"><c path="Int"/></c></c></f></getMatrix>
		<matrix public="1" set="method" line="147"><f a="x">
	<c path="Array"><c path="Array"><c path="Int"/></c></c>
	<c path="thx.geom.layout.Chord"/>
</f></matrix>
		<getPadding public="1" set="method" line="156"><f a=""><c path="Float"/></f></getPadding>
		<padding public="1" set="method" line="158"><f a="v">
	<c path="Float"/>
	<c path="thx.geom.layout.Chord"/>
</f></padding>
		<getSortGroups public="1" set="method" line="166"><f a=""><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></f></getSortGroups>
		<sortGroups public="1" set="method" line="168"><f a="v">
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Chord"/>
</f></sortGroups>
		<getSortSubgroups public="1" set="method" line="176"><f a=""><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></f></getSortSubgroups>
		<sortSubgroups public="1" set="method" line="178"><f a="v">
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Chord"/>
</f></sortSubgroups>
		<getSortChords public="1" set="method" line="185"><f a=""><f a=":">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></f></getSortChords>
		<sortChords public="1" set="method" line="187"><f a="v">
	<f a=":">
		<c path="Float"/>
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<c path="thx.geom.layout.Chord"/>
</f></sortChords>
		<chords public="1" set="method" line="195"><f a=""><c path="Array"><t path="thx.geom.layout.ChordType"/></c></f></chords>
		<groups public="1" set="method" line="202"><f a=""><c path="Array"><t path="thx.geom.layout.ItemType"/></c></f></groups>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * Based on D3.js by Michael Bostock
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="thx.geom.layout.ChordType" params="" file="src/thx/geom/layout/Chord.hx" module="thx.geom.layout.Chord"><a>
	<target><t path="thx.geom.layout.ItemType"/></target>
	<source><t path="thx.geom.layout.ItemType"/></source>
</a></typedef>
	<typedef path="thx.geom.layout.ItemType" params="" file="src/thx/geom/layout/Chord.hx" module="thx.geom.layout.Chord"><a>
	<value><c path="Float"/></value>
	<subindex><c path="Int"/></subindex>
	<startAngle><c path="Float"/></startAngle>
	<index><c path="Int"/></index>
	<endAngle><c path="Float"/></endAngle>
</a></typedef>
	<class path="thx.cultures.EsBO" params="" file="src/thx/cultures/EsBO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.LoLA" params="" file="src/thx/cultures/LoLA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsGT" params="" file="src/thx/cultures/EsGT.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SkSK" params="" file="src/thx/cultures/SkSK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.GuIN" params="" file="src/thx/cultures/GuIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SqAL" params="" file="src/thx/cultures/SqAL.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.UkUA" params="" file="src/thx/cultures/UkUA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ms" params="" file="src/thx/languages/Ms.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.color.Cmyk" params="" file="src/thx/color/Cmyk.hx">
		<extends path="thx.color.Rgb"/>
		<toCmyk public="1" set="method" line="43" static="1"><f a="rgb">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Cmyk"/>
</f></toCmyk>
		<equals public="1" set="method" line="61" static="1"><f a="a:b">
	<c path="thx.color.Cmyk"/>
	<c path="thx.color.Cmyk"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="66" static="1"><f a="color:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></darker>
		<interpolate public="1" set="method" line="77" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></interpolate>
		<black public="1" set="null"><c path="Float"/></black>
		<cyan public="1" set="null"><c path="Float"/></cyan>
		<magenta public="1" set="null"><c path="Float"/></magenta>
		<yellow public="1" set="null"><c path="Float"/></yellow>
		<toCmykString public="1" set="method" line="38"><f a=""><c path="String"/></f></toCmykString>
		<new public="1" set="method" line="25">
			<f a="cyan:magenta:yellow:black">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Construct a Cmyk Color.
	 * @param cyan		Float bewteen 0 and 1
	 * @param magenta	Float bewteen 0 and 1
	 * @param yellow	Float bewteen 0 and 1
	 * @param black		Float bewteen 0 and 1
	 </haxe_doc>
		</new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="neko.db._Mysql.D" params="" file="C:\Projects\haxe/std/neko/db/Mysql.hx" private="1" module="neko.db.Mysql">
		<load set="method" line="31" static="1"><f a="fun:args">
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></load>
		<lib line="35" static="1"><c path="String"/></lib>
		<connect public="1" line="36" static="1"><f a="">
	<unknown/>
	<e path="Void"/>
</f></connect>
		<select_db public="1" line="37" static="1"><f a=":">
	<e path="Void"/>
	<unknown/>
	<unknown/>
</f></select_db>
		<request public="1" line="38" static="1"><f a=":">
	<e path="Void"/>
	<unknown/>
	<e path="Void"/>
</f></request>
		<close public="1" line="39" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></close>
		<escape public="1" line="40" static="1"><f a=":">
	<e path="Void"/>
	<unknown/>
	<c path="String"/>
</f></escape>
		<result_get_length public="1" line="41" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></result_get_length>
		<result_get_nfields public="1" line="42" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></result_get_nfields>
		<result_next public="1" line="43" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></result_next>
		<result_get public="1" line="44" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<c path="String"/>
</f></result_get>
		<result_get_int public="1" line="45" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<c path="Int"/>
</f></result_get_int>
		<result_get_float public="1" line="46" static="1"><f a=":">
	<e path="Void"/>
	<c path="Int"/>
	<c path="Float"/>
</f></result_get_float>
		<result_set_conv_date public="1" line="47" static="1"><f a=":">
	<e path="Void"/>
	<f a="d">
		<unknown/>
		<unknown/>
	</f>
	<unknown/>
</f></result_set_conv_date>
		<result_fields_names public="1" line="48" static="1"><f a="">
	<e path="Void"/>
	<c path="Array"><c path="String"/></c>
</f></result_fields_names>
	</class>
	<class path="neko.db._Mysql.MysqlResultSet" params="" file="C:\Projects\haxe/std/neko/db/Mysql.hx" private="1" module="neko.db.Mysql">
		<implements path="neko.db.ResultSet"/>
		<length public="1" get="getLength" set="null"><c path="Int"/></length>
		<nfields public="1" get="getNFields" set="null"><c path="Int"/></nfields>
		<__r><e path="Void"/></__r>
		<cache><d/></cache>
		<getLength set="method" line="63"><f a=""><c path="Int"/></f></getLength>
		<getNFields set="method" line="67"><f a=""><c path="Int"/></f></getNFields>
		<hasNext public="1" set="method" line="71"><f a=""><e path="Bool"/></f></hasNext>
		<next public="1" set="method" line="77"><f a=""><d/></f></next>
		<results public="1" set="method" line="100"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method" line="107"><f a="n">
	<c path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method" line="111"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method" line="115"><f a="n">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method" line="119"><f a=""><c path="Array"><c path="String"/></c></f></getFieldsNames>
		<new public="1" set="method" line="59"><f a="r">
	<e path="Void"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Date" params="" file="C:\Projects\haxe/std/neko/_std/Date.hx">
		<now public="1" set="method" line="72" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="76" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="84" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<new1 set="method" line="88" static="1"><f a="t">
	<d/>
	<c path="Date"/>
</f></new1>
		<date_new line="94" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></date_new>
		<date_now line="95" static="1"><f a=""><unknown/></f></date_now>
		<date_format line="96" static="1"><f a=":">
	<d/>
	<unknown/>
	<c path="String"/>
</f></date_format>
		<date_set_hour line="97" static="1"><f a=":::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></date_set_hour>
		<date_set_day line="98" static="1"><f a=":::">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></date_set_day>
		<date_get_day line="99" static="1"><f a="">
	<d/>
	<a>
		<y><c path="Int"/></y>
		<m><c path="Int"/></m>
		<d><c path="Int"/></d>
	</a>
</f></date_get_day>
		<date_get_hour line="100" static="1"><f a="">
	<d/>
	<a>
		<s><c path="Int"/></s>
		<m><c path="Int"/></m>
		<h><c path="Int"/></h>
	</a>
</f></date_get_hour>
		<int32_to_float line="101" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></int32_to_float>
		<int32_add line="102" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></int32_add>
		<int32_shl line="103" static="1"><f a=":">
	<unknown/>
	<c path="Int"/>
	<unknown/>
</f></int32_shl>
		<__string set="method" line="104" static="1"><f a=""><c path="String"/></f></__string>
		<__t><d/></__t>
		<getTime public="1" set="method" line="36">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getFullYear public="1" set="method" line="40">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="44">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="48">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getHours public="1" set="method" line="52">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="56">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="60">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getDay public="1" set="method" line="64">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="31"><f a="year:month:day:hour:min:sec">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="neko.db._Mysql.MysqlConnection" params="" file="C:\Projects\haxe/std/neko/db/Mysql.hx" private="1" module="neko.db.Mysql">
		<implements path="neko.db.Connection"/>
		<__use_date line="201" static="1"><t path="#Date"/></__use_date>
		<__c><e path="Void"/></__c>
		<request public="1" set="method" line="143"><f a="s">
	<c path="String"/>
	<c path="neko.db.ResultSet"/>
</f></request>
		<close public="1" set="method" line="156"><f a=""><e path="Void"/></f></close>
		<escape public="1" set="method" line="160"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method" line="164"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method" line="168"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<e path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method" line="181"><f a=""><c path="Int"/></f></lastInsertId>
		<dbName public="1" set="method" line="185"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method" line="189"><f a=""><e path="Void"/></f></startTransaction>
		<commit public="1" set="method" line="193"><f a=""><e path="Void"/></f></commit>
		<rollback public="1" set="method" line="197"><f a=""><e path="Void"/></f></rollback>
		<new public="1" set="method" line="139"><f a="c">
	<e path="Void"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neko.db.Mysql" params="" file="C:\Projects\haxe/std/neko/db/Mysql.hx"><connect public="1" set="method" line="206" static="1"><f a="params">
	<a>
		<user><c path="String"/></user>
		<socket><c path="String"/></socket>
		<port><c path="Int"/></port>
		<pass><c path="String"/></pass>
		<host><c path="String"/></host>
		<database><c path="String"/></database>
	</a>
	<c path="neko.db.Connection"/>
</f></connect></class>
	<class path="thx.cultures.FrLU" params="" file="src/thx/cultures/FrLU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DvMV" params="" file="src/thx/cultures/DvMV.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArSY" params="" file="src/thx/cultures/ArSY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.validation.UrlValidator" params="" file="src/thx/validation/UrlValidator.hx">
		<extends path="thx.validation.Validator"><c path="String"/></extends>
		<_reUrl line="11" static="1"><c path="EReg"/></_reUrl>
		<validate public="1" set="method" line="15" override="1"><f a="value">
	<c path="String"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.math.scale.Pow" params="" file="src/thx/math/scale/Pow.hx">
		<extends path="thx.math.scale.NumericScale"><c path="thx.math.scale.Pow"/></extends>
		<sqrt public="1" set="method" line="83" static="1"><f a=""><c path="thx.math.scale.Pow"/></f></sqrt>
		<_pow set="method" line="88" static="1"><f a="e">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></_pow>
		<_pown set="method" line="93" static="1"><f a="e">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></_pown>
		<tick><c path="thx.math.scale.Linear"/></tick>
		<_exponent><c path="Float"/></_exponent>
		<powp><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></powp>
		<powb><f a="">
	<c path="Float"/>
	<c path="Float"/>
</f></powb>
		<scale public="1" set="method" line="28" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scale>
		<invert public="1" set="method" line="33" override="1"><f a="x:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></invert>
		<getDomain public="1" set="method" line="38" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<domain public="1" set="method" line="43" override="1"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Pow"/>
</f></domain>
		<ticks public="1" set="method" line="53" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<tickFormat public="1" set="method" line="58" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<getModulo public="1" set="method" line="63"><f a=""><c path="Float"/></f></getModulo>
		<modulo public="1" set="method" line="64"><f a="v">
	<c path="Int"/>
	<c path="thx.math.scale.Pow"/>
</f></modulo>
		<getExponent public="1" set="method" line="70"><f a=""><c path="Float"/></f></getExponent>
		<exponent public="1" set="method" line="75"><f a="x">
	<c path="Float"/>
	<c path="thx.math.scale.Pow"/>
</f></exponent>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 * @todo change implementation so that Linear, LinearTime, Log and Pow share a base class
 * @todo add clamp/clampMin/clampMax
 </haxe_doc>
	</class>
	<class path="thx.data.ValueHandler" params="" file="src/thx/data/ValueHandler.hx">
		<implements path="thx.data.IDataHandler"/>
		<value public="1"><d/></value>
		<_stack><c path="Array"><d/></c></_stack>
		<_names><c path="Array"><c path="String"/></c></_names>
		<start public="1" set="method" line="17"><f a=""><e path="Void"/></f></start>
		<end public="1" set="method" line="22"><f a=""><e path="Void"/></f></end>
		<startObject public="1" set="method" line="27"><f a=""><e path="Void"/></f></startObject>
		<endObject public="1" set="method" line="32"><f a=""><e path="Void"/></f></endObject>
		<startField public="1" set="method" line="33"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></startField>
		<endField public="1" set="method" line="38"><f a=""><e path="Void"/></f></endField>
		<startArray public="1" set="method" line="45"><f a=""><e path="Void"/></f></startArray>
		<endArray public="1" set="method" line="50"><f a=""><e path="Void"/></f></endArray>
		<startItem public="1" set="method" line="51"><f a=""><e path="Void"/></f></startItem>
		<endItem public="1" set="method" line="52"><f a=""><e path="Void"/></f></endItem>
		<date public="1" set="method" line="59"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></date>
		<string public="1" set="method" line="60"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></string>
		<int public="1" set="method" line="61"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></int>
		<float public="1" set="method" line="62"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></float>
		<null public="1" set="method" line="63"><f a=""><e path="Void"/></f></null>
		<bool public="1" set="method" line="64"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></bool>
		<comment public="1" set="method" line="65"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.color.Grey" params="" file="src/thx/color/Grey.hx">
		<extends path="thx.color.Rgb"/>
		<toGrey public="1" set="method" line="23" static="1"><f a="rgb:?luminance">
	<c path="thx.color.Rgb"/>
	<e path="thx.color.PerceivedLuminance"/>
	<c path="thx.color.Grey"/>
</f></toGrey>
		<equals public="1" set="method" line="42" static="1"><f a="a:b">
	<c path="thx.color.Grey"/>
	<c path="thx.color.Grey"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="47" static="1"><f a="color:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></darker>
		<interpolate public="1" set="method" line="53" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></interpolate>
		<grey public="1" set="null"><c path="Float"/></grey>
		<new public="1" set="method" line="16"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<enum path="thx.color.PerceivedLuminance" params="" file="src/thx/color/Grey.hx" module="thx.color.Grey">
		<Standard/>
		<PerceivedAccurate/>
		<Perceived/>
	</enum>
	<class path="thx.cultures.HuHU" params="" file="src/thx/cultures/HuHU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArLY" params="" file="src/thx/cultures/ArLY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.collections.CascadeHash" params="T" file="src/thx/collections/CascadeHash.hx">
		<_h><c path="List"><c path="Hash"><c path="thx.collections.CascadeHash.T"/></c></c></_h>
		<set public="1" set="method" line="21"><f a="key:value">
	<c path="String"/>
	<c path="thx.collections.CascadeHash.T"/>
	<e path="Void"/>
</f></set>
		<remove public="1" set="method" line="26"><f a="key">
	<c path="String"/>
	<e path="Bool"/>
</f></remove>
		<get public="1" set="method" line="34"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="thx.collections.CascadeHash.T"/></t>
</f></get>
		<exists public="1" set="method" line="42"><f a="key">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<iterator public="1" set="method" line="50"><f a=""><t path="Iterator"><c path="thx.collections.CascadeHash.T"/></t></f></iterator>
		<keys public="1" set="method" line="58"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<toString public="1" set="method" line="67"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="13"><f a="hashes">
	<c path="Array"><c path="Hash"><c path="thx.collections.CascadeHash.T"/></c></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.IgNG" params="" file="src/thx/cultures/IgNG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="43" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.color.Hsl" params="" file="src/thx/color/Hsl.hx">
		<extends path="thx.color.Rgb"/>
		<_c set="method" line="28" static="1"><f a="d:s:l">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></_c>
		<toHsl public="1" set="method" line="48" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></toHsl>
		<equals public="1" set="method" line="74" static="1"><f a="a:b">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="79" static="1"><f a="color:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></darker>
		<interpolate public="1" set="method" line="89" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></interpolate>
		<hue public="1" set="null"><c path="Float"/></hue>
		<saturation public="1" set="null"><c path="Float"/></saturation>
		<lightness public="1" set="null"><c path="Float"/></lightness>
		<toHslString public="1" set="method" line="43"><f a=""><c path="String"/></f></toHslString>
		<new public="1" set="method" line="17"><f a="h:s:l">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EtEE" params="" file="src/thx/cultures/EtEE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.NlBE" params="" file="src/thx/cultures/NlBE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.IiCN" params="" file="src/thx/cultures/IiCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fa" params="" file="src/thx/languages/Fa.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Et" params="" file="src/thx/languages/Et.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.De" params="" file="src/thx/languages/De.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.html.DomHandler" params="" file="src/thx/html/DomHandler.hx">
		<implements path="thx.html.HtmlHandler"/>
		<document public="1" set="null"><c path="Xml"/></document>
		<current><c path="Xml"/></current>
		<start public="1" set="method" line="18"><f a="tag:attrs:unary">
	<c path="String"/>
	<c path="Array"><t path="thx.html.Attr"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<end public="1" set="method" line="27"><f a="tag">
	<c path="String"/>
	<e path="Void"/>
</f></end>
		<chars public="1" set="method" line="31"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></chars>
		<comment public="1" set="method" line="35"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<doctype public="1" set="method" line="39"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></doctype>
		<declaration public="1" set="method" line="43"><f a="text">
	<c path="String"/>
	<e path="Void"/>
</f></declaration>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="C:\Projects\haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<class path="thx.languages.Nl" params="" file="src/thx/languages/Nl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ka" params="" file="src/thx/languages/Ka.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArTN" params="" file="src/thx/cultures/ArTN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Sl" params="" file="src/thx/languages/Sl.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsPR" params="" file="src/thx/cultures/EsPR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeDE" params="" file="src/thx/cultures/DeDE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.ini.IniDecoder" params="" file="src/thx/ini/IniDecoder.hx">
		<linesplitter line="16" static="1"><c path="EReg"/></linesplitter>
		<explodeSections set="method" line="59" static="1"><f a="o">
	<a/>
	<a/>
</f></explodeSections>
		<emptytonull public="1" set="null"><e path="Bool"/></emptytonull>
		<explodesections public="1" set="null"><e path="Bool"/></explodesections>
		<handler><c path="thx.data.IDataHandler"/></handler>
		<other><c path="thx.data.IDataHandler"/></other>
		<value><c path="thx.data.ValueHandler"/></value>
		<insection><e path="Bool"/></insection>
		<decode public="1" set="method" line="38"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<decodeLines set="method" line="82"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decodeLines>
		<decodeLine set="method" line="89"><f a="line">
	<c path="String"/>
	<e path="Void"/>
</f></decodeLine>
		<dec set="method" line="130"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></dec>
		<decodeValue set="method" line="137"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></decodeValue>
		<new public="1" set="method" line="25"><f a="handler:?explodesections:?emptytonull">
	<c path="thx.data.IDataHandler"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EnIE" params="" file="src/thx/cultures/EnIE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.io.File" params="" file="src/thx/sys/io/File.hx"><c path="neko.io.File"/></typedef>
	<class path="Ints" params="" file="src/Ints.hx">
		<range public="1" set="method" line="12" static="1"><f a="start:?stop:?step">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
</f></range>
		<sign public="1" get="inline" set="null" line="28" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></sign>
		<abs public="1" get="inline" set="null" line="33" static="1"><f a="a">
	<c path="Int"/>
	<c path="Int"/>
</f></abs>
		<min public="1" get="inline" set="null" line="38" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></min>
		<max public="1" get="inline" set="null" line="43" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></max>
		<wrap public="1" set="method" line="48" static="1"><f a="v:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></wrap>
		<clamp public="1" set="method" line="53" static="1"><f a="v:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clamp>
		<clampSym public="1" set="method" line="63" static="1"><f a="v:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clampSym>
		<interpolate public="1" get="inline" set="null" line="73" static="1"><f a="f:?min:?max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Int"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="80" static="1"><f a="?min:?max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="f">
		<c path="Float"/>
		<c path="Int"/>
	</f>
</f></interpolatef>
		<ascending public="1" set="method" line="88" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ascending>
		<descending public="1" set="method" line="89" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></descending>
		<format public="1" set="method" line="91" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="96" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<_reparse line="101" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="102" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="108" static="1"><f a="s">
	<c path="String"/>
	<t path="Null"><c path="Int"/></t>
</f></parse>
		<compare public="1" get="inline" set="null" line="115" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.html.HtmlAttributeFormat" params="" file="src/thx/html/HtmlAttributeFormat.hx">
		<extends path="thx.xml.AttributeFormat"/>
		<formatAttribute public="1" set="method" line="7" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></formatAttribute>
		<new public="1" set="method" line="5"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.svg.Line" params="TData" file="src/thx/svg/Line.hx">
		<pointArray public="1" set="method" line="51" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Line"><c path="Array"><c path="Float"/></c></c>
</f></pointArray>
		<pointObject public="1" set="method" line="56" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Line"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></c>
</f></pointObject>
		<_x><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_x>
		<_y><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_y>
		<_interpolator><e path="thx.svg.LineInterpolator"/></_interpolator>
		<shape public="1" set="method" line="23"><f a="?data:?i">
	<c path="Array"><c path="thx.svg.Line.TData"/></c>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<getInterpolator public="1" set="method" line="28"><f a=""><e path="thx.svg.LineInterpolator"/></f></getInterpolator>
		<interpolator public="1" set="method" line="29"><f a="type">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Line"><c path="thx.svg.Line.TData"/></c>
</f></interpolator>
		<getX public="1" set="method" line="35"><f a=""><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getX>
		<x public="1" set="method" line="37"><f a="v">
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Line"><c path="thx.svg.Line.TData"/></c>
</f></x>
		<getY public="1" set="method" line="43"><f a=""><f a=":">
	<c path="thx.svg.Line.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getY>
		<y public="1" set="method" line="45"><f a="v">
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Line"><c path="thx.svg.Line.TData"/></c>
</f></y>
		<new public="1" set="method" line="16"><f a="x:y:?interpolator">
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Line.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="thx.svg.LineInterpolator"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 * @todo complete line functions
 </haxe_doc>
	</class>
	<class path="thx.cultures.DaDK" params="" file="src/thx/cultures/DaDK.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="thx.sys.io.Process" params="" file="src/thx/sys/io/Process.hx"><c path="neko.io.Process"/></typedef>
	<class path="thx.cultures.YoNG" params="" file="src/thx/cultures/YoNG.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="43" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.HiIN" params="" file="src/thx/cultures/HiIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FoFO" params="" file="src/thx/cultures/FoFO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SrLatnRS" params="" file="src/thx/cultures/SrLatnRS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.xml.Namespace" params="" file="src/thx/xml/Namespace.hx">
		<prefix public="1" line="11" static="1"><c path="Hash"><c path="String"/></c></prefix>
		<qualify public="1" set="method" line="21" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.xml.NSQualifier"/>
</f></qualify>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.xml.NSQualifier" params="" file="src/thx/xml/Namespace.hx" module="thx.xml.Namespace">
		<space public="1"><t path="Null"><c path="String"/></t></space>
		<local public="1"><c path="String"/></local>
		<new public="1" set="method" line="39"><f a="space:local">
	<t path="Null"><c path="String"/></t>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.languages.Hi" params="" file="src/thx/languages/Hi.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Af" params="" file="src/thx/languages/Af.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="ValueType" params="" file="C:\Projects\haxe/std/neko/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\Projects\haxe/std/neko/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="49" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="56" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="61" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="68" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="73" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="88" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="102" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="106" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="112" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="124" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="130" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="146" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="158" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="163" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="185" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="200" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="204" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="208" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="neko.db.Transaction" params="" file="C:\Projects\haxe/std/neko/db/Transaction.hx">
		<isDeadlock public="1" set="method" line="31" static="1"><f a="e">
	<d/>
	<e path="Bool"/>
</f></isDeadlock>
		<runMainLoop set="method" line="35" static="1"><f a="mainFun:logError:count">
	<f a=""><e path="Void"/></f>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<c path="Int"/>
	<e path="Void"/>
</f></runMainLoop>
		<main public="1" set="method" line="54" static="1"><f a="cnx:mainFun:logError">
	<c path="neko.db.Connection"/>
	<f a=""><e path="Void"/></f>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></main>
	</class>
	<class path="thx.cultures.UzLatnUZ" params="" file="src/thx/cultures/UzLatnUZ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.text.Inflections" params="" file="src/thx/text/Inflections.hx">
		<pluralize public="1" set="method" line="38" static="1"><f a="singular">
	<c path="String"/>
	<c path="String"/>
</f></pluralize>
		<singularize public="1" set="method" line="43" static="1"><f a="plural">
	<c path="String"/>
	<c path="String"/>
</f></singularize>
		<process set="method" line="48" static="1"><f a="word:rules">
	<c path="String"/>
	<c path="Array"><a>
	<replace><c path="String"/></replace>
	<pattern><c path="EReg"/></pattern>
</a></c>
	<c path="String"/>
</f></process>
		<uncountable_words line="58" static="1"><c path="Array"><c path="String"/></c></uncountable_words>
		<plural_rules line="60" static="1"><c path="Array"><a>
	<replace><c path="String"/></replace>
	<pattern><c path="EReg"/></pattern>
</a></c></plural_rules>
		<singular_rules line="83" static="1"><c path="Array"><a>
	<replace><c path="String"/></replace>
	<pattern><c path="EReg"/></pattern>
</a></c></singular_rules>
		<haxe_doc>
Based on the work of Ryan Schuft as reported below.
@author Franco Ponticelli

Copyright (c) 2007 Ryan Schuft (ryan.schuft@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

This code is based in part on the work done in Ruby to support
infection as part of Ruby on Rails in the ActiveSupport's Inflector
and Inflections classes.  It was initally ported to Javascript by
Ryan Schuft (ryan.schuft@gmail.com).

The code is available at http://code.google.com/p/inflection-js/
</haxe_doc>
	</class>
	<class path="thx.languages.Gu" params="" file="src/thx/languages/Gu.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Pt" params="" file="src/thx/languages/Pt.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BnBD" params="" file="src/thx/cultures/BnBD.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<name><c path="String"/></name>
</a></c></CAnonymous>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.ClassField" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<isPublic><e path="Bool"/></isPublic>
	<isOverride><e path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="Hash"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="C:\Projects\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="116" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="127" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="134" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<e path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<e path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="148" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<e path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="163" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="212" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="232" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<e path="Bool"/>
</f></constructorEq>
	</class>
	<class path="Math" params="" file="C:\Projects\haxe/std/neko/_std/Math.hx">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<min public="1" set="method" line="34" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" line="35" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<abs public="1" set="method" line="37" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<sin public="1" set="method" line="38" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" line="39" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" line="40" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" line="41" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" line="42" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" line="43" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" line="44" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" line="45" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" line="46" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" line="47" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" line="48" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" line="49" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" line="50" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" line="51" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<__rnd static="1"><unknown/></__rnd>
		<_rand_float line="54" static="1"><f a="">
	<unknown/>
	<c path="Float"/>
</f></_rand_float>
		<_rand_int line="55" static="1"><f a=":">
	<unknown/>
	<c path="Int"/>
	<unknown/>
</f></_rand_int>
		<random public="1" set="method" line="57" static="1"><f a=""><c path="Float"/></f></random>
		<isNaN public="1" set="method" line="59" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<isFinite public="1" set="method" line="60" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="thx.cultures.LvLV" params="" file="src/thx/cultures/LvLV.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Te" params="" file="src/thx/languages/Te.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.FaIR" params="" file="src/thx/cultures/FaIR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.CaES" params="" file="src/thx/cultures/CaES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.ini.IniEncoder" params="" file="src/thx/ini/IniEncoder.hx">
		<implements path="thx.data.IDataHandler"/>
		<decoded public="1" line="137" static="1"><c path="Array"><c path="String"/></c></decoded>
		<encoded public="1" line="138" static="1"><c path="Array"><c path="String"/></c></encoded>
		<ignorecomments public="1" set="null"><e path="Bool"/></ignorecomments>
		<newline public="1" set="null"><c path="String"/></newline>
		<buf><c path="StringBuf"/></buf>
		<encodedString public="1" set="null"><c path="String"/></encodedString>
		<inarray><c path="Int"/></inarray>
		<cache><c path="Hash"><c path="Array"><c path="String"/></c></c></cache>
		<value><c path="String"/></value>
		<stack><c path="Array"><c path="String"/></c></stack>
		<start public="1" set="method" line="32"><f a=""><e path="Void"/></f></start>
		<end public="1" set="method" line="39"><f a=""><e path="Void"/></f></end>
		<startObject public="1" set="method" line="57"><f a=""><e path="Void"/></f></startObject>
		<startField public="1" set="method" line="63"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></startField>
		<endField public="1" set="method" line="69"><f a=""><e path="Void"/></f></endField>
		<getSection set="method" line="80"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="Array"><c path="String"/></c></t>
</f></getSection>
		<endObject public="1" set="method" line="91"><f a=""><e path="Void"/></f></endObject>
		<startArray public="1" set="method" line="96"><f a=""><e path="Void"/></f></startArray>
		<startItem public="1" set="method" line="104"><f a=""><e path="Void"/></f></startItem>
		<endItem public="1" set="method" line="112"><f a=""><e path="Void"/></f></endItem>
		<endArray public="1" set="method" line="117"><f a=""><e path="Void"/></f></endArray>
		<date public="1" set="method" line="122"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></date>
		<string public="1" set="method" line="129"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></string>
		<enc set="method" line="140"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></enc>
		<quote set="method" line="147"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<int public="1" set="method" line="152"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></int>
		<float public="1" set="method" line="156"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></float>
		<null public="1" set="method" line="160"><f a=""><e path="Void"/></f></null>
		<comment public="1" set="method" line="164"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<bool public="1" set="method" line="170"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></bool>
		<new public="1" set="method" line="21"><f a="?newline:?ignorecomments">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.ZhCN" params="" file="src/thx/cultures/ZhCN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnZW" params="" file="src/thx/cultures/EnZW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.svg.Area" params="TData" file="src/thx/svg/Area.hx">
		<pointArray public="1" set="method" line="63" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><c path="Array"><c path="Float"/></c></c>
</f></pointArray>
		<pointObject public="1" set="method" line="68" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><a>
	<y1><c path="Float"/></y1>
	<y0><c path="Float"/></y0>
	<x><c path="Float"/></x>
</a></c>
</f></pointObject>
		<pointArray2 public="1" set="method" line="73" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><c path="Array"><c path="Float"/></c></c>
</f></pointArray2>
		<pointObjectXY public="1" set="method" line="78" static="1"><f a="?interpolator">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></c>
</f></pointObjectXY>
		<_x><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_x>
		<_y0><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_y0>
		<_y1><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></_y1>
		<_interpolator><e path="thx.svg.LineInterpolator"/></_interpolator>
		<shape public="1" set="method" line="22"><f a="?data:?i">
	<c path="Array"><c path="thx.svg.Area.TData"/></c>
	<c path="Int"/>
	<c path="String"/>
</f></shape>
		<getInterpolator public="1" set="method" line="32"><f a=""><e path="thx.svg.LineInterpolator"/></f></getInterpolator>
		<interpolator public="1" set="method" line="33"><f a="type">
	<e path="thx.svg.LineInterpolator"/>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></interpolator>
		<getX public="1" set="method" line="39"><f a=""><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getX>
		<x public="1" set="method" line="41"><f a="v">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></x>
		<getY0 public="1" set="method" line="47"><f a=""><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getY0>
		<y0 public="1" set="method" line="49"><f a="v">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></y0>
		<getY1 public="1" set="method" line="55"><f a=""><f a=":">
	<c path="thx.svg.Area.TData"/>
	<c path="Int"/>
	<c path="Float"/>
</f></f></getY1>
		<y1 public="1" set="method" line="57"><f a="v">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="thx.svg.Area"><c path="thx.svg.Area.TData"/></c>
</f></y1>
		<new public="1" set="method" line="14"><f a="?x:?y0:?y1:?interpolator">
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="thx.svg.Area.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<e path="thx.svg.LineInterpolator"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.json.JsonEncoder" params="" file="src/thx/json/JsonEncoder.hx">
		<implements path="thx.data.IDataHandler"/>
		<encodedString public="1" set="null"><c path="String"/></encodedString>
		<buf><c path="StringBuf"/></buf>
		<lvl><c path="Int"/></lvl>
		<count><c path="Array"><c path="Int"/></c></count>
		<start public="1" set="method" line="20"><f a=""><e path="Void"/></f></start>
		<end public="1" set="method" line="27"><f a=""><e path="Void"/></f></end>
		<startObject public="1" set="method" line="33"><f a=""><e path="Void"/></f></startObject>
		<startField public="1" set="method" line="38"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></startField>
		<endField public="1" set="method" line="44"><f a=""><e path="Void"/></f></endField>
		<endObject public="1" set="method" line="46"><f a=""><e path="Void"/></f></endObject>
		<startArray public="1" set="method" line="52"><f a=""><e path="Void"/></f></startArray>
		<startItem public="1" set="method" line="57"><f a=""><e path="Void"/></f></startItem>
		<endItem public="1" set="method" line="62"><f a=""><e path="Void"/></f></endItem>
		<endArray public="1" set="method" line="63"><f a=""><e path="Void"/></f></endArray>
		<date public="1" set="method" line="69"><f a="d">
	<c path="Date"/>
	<e path="Void"/>
</f></date>
		<string public="1" set="method" line="73"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></string>
		<int public="1" set="method" line="77"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></int>
		<float public="1" set="method" line="81"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></float>
		<null public="1" set="method" line="85"><f a=""><e path="Void"/></f></null>
		<bool public="1" set="method" line="89"><f a="b">
	<e path="Bool"/>
	<e path="Void"/>
</f></bool>
		<comment public="1" set="method" line="93"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></comment>
		<quote set="method" line="98"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Reflect" params="" file="C:\Projects\haxe/std/neko/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="36" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="41" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="45" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="60" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" get="inline" set="null" line="64" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" get="inline" set="null" line="68" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="72" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" get="inline" set="null" line="76" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" get="inline" set="null" line="80" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="84" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<same_closure line="89" static="1"><f a=":">
	<d/>
	<d/>
	<e path="Bool"/>
</f></same_closure>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="Hashes" params="" file="src/Hashes.hx">
		<toDynamic public="1" params="T" set="method" line="11" static="1"><f a="hash">
	<c path="Hash"><c path="toDynamic.T"/></c>
	<d><c path="toDynamic.T"/></d>
</f></toDynamic>
		<importObject public="1" params="T" set="method" line="19" static="1"><f a="hash:ob">
	<c path="Hash"><c path="importObject.T"/></c>
	<d><c path="importObject.T"/></d>
	<c path="Hash"><c path="importObject.T"/></c>
</f></importObject>
		<copyTo public="1" params="T" set="method" line="24" static="1"><f a="from:to">
	<c path="Hash"><c path="copyTo.T"/></c>
	<c path="Hash"><c path="copyTo.T"/></c>
	<c path="Hash"><c path="copyTo.T"/></c>
</f></copyTo>
		<clone public="1" params="T" set="method" line="31" static="1"><f a="src">
	<c path="Hash"><c path="clone.T"/></c>
	<c path="Hash"><c path="clone.T"/></c>
</f></clone>
		<arrayOfKeys public="1" get="inline" set="null" line="38" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="Array"><c path="String"/></c>
</f></arrayOfKeys>
		<setOfKeys public="1" set="method" line="43" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="thx.collections.Set"><c path="String"/></c>
</f></setOfKeys>
		<count public="1" set="method" line="51" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<unknown/>
</f></count>
		<clear public="1" set="method" line="65" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></clear>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="FriendHash" params="" file="src/Hashes.hx" module="Hashes"><a><h><d/></h></a></typedef>
	<class path="thx.cultures.SrCyrlME" params="" file="src/thx/cultures/SrCyrlME.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MlIN" params="" file="src/thx/cultures/MlIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsDO" params="" file="src/thx/cultures/EsDO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.OcFR" params="" file="src/thx/cultures/OcFR.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.RoRO" params="" file="src/thx/cultures/RoRO.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnCA" params="" file="src/thx/cultures/EnCA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EsMX" params="" file="src/thx/cultures/EsMX.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.util.Results" params="" file="src/thx/util/Results.hx">
		<toString public="1" set="method" line="12" static="1"><f a="value:?glue">
	<e path="thx.util.Result"/>
	<c path="String"/>
	<c path="String"/>
</f></toString>
		<failure public="1" get="inline" set="null" line="26" static="1"><f a="msg:?params:?param:?pos">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="thx.util.Result"/>
</f></failure>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.OrIN" params="" file="src/thx/cultures/OrIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Hu" params="" file="src/thx/languages/Hu.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ar" params="" file="src/thx/languages/Ar.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.Random" params="" file="src/thx/math/Random.hx">
		<seed public="1"><c path="Int"/></seed>
		<int public="1" get="inline" set="null" line="19"><f a=""><c path="Int"/></f></int>
		<float public="1" get="inline" set="null" line="30"><f a=""><c path="Float"/></f></float>
		<new public="1" set="method" line="14"><f a="?seed">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * Adapted from Nicolas Cannasse code.
 *
 * @author Franco Ponticelli
 * @author Nicolas Cannasse
 </haxe_doc>
	</class>
	<class path="thx.cultures.ArAE" params="" file="src/thx/cultures/ArAE.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ky" params="" file="src/thx/languages/Ky.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Fr" params="" file="src/thx/languages/Fr.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Dv" params="" file="src/thx/languages/Dv.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.DeLI" params="" file="src/thx/cultures/DeLI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArQA" params="" file="src/thx/cultures/ArQA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Ru" params="" file="src/thx/languages/Ru.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.EnPH" params="" file="src/thx/cultures/EnPH.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\Projects\haxe/std/haxe/io/BytesBuffer.hx">
		<b><e path="Void"/></b>
		<addByte public="1" get="inline" set="null" line="55"><f a="byte">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="69"><f a="src">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></add>
		<addBytes public="1" get="inline" set="null" line="84"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="106">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>
		Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.
	</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BeBY" params="" file="src/thx/cultures/BeBY.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.svg.LineInternals" params="" file="src/thx/svg/LineInternals.hx">
		<arcOffset public="1" line="12" static="1"><c path="Float"/></arcOffset>
		<arcMax public="1" line="13" static="1"><c path="Float"/></arcMax>
		<linePoints public="1" params="TData" set="method" line="15" static="1"><f a="data:x:y">
	<c path="Array"><c path="linePoints.TData"/></c>
	<f a=":">
		<c path="linePoints.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<f a=":">
		<c path="linePoints.TData"/>
		<c path="Int"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
</f></linePoints>
		<interpolatePoints public="1" set="method" line="31" static="1"><f a="points:type">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<e path="thx.svg.LineInterpolator"/>
	<c path="String"/>
</f></interpolatePoints>
		<_lineBasisBezier1 line="123" static="1"><c path="Array"><c path="Float"/></c></_lineBasisBezier1>
		<_lineBasisBezier2 line="124" static="1"><c path="Array"><c path="Float"/></c></_lineBasisBezier2>
		<_lineBasisBezier3 line="125" static="1"><c path="Array"><c path="Float"/></c></_lineBasisBezier3>
		<_lineDot4 set="method" line="127" static="1"><f a="a:b">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Float"/>
</f></_lineDot4>
		<_lineBasisBezier set="method" line="131" static="1"><f a="path:x:y">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="Void"/>
</f></_lineBasisBezier>
		<_lineHermite set="method" line="142" static="1"><f a="points:tangents">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="String"/>
</f></_lineHermite>
		<_lineCardinalTangents set="method" line="187" static="1"><f a="points:tension">
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
	<c path="Float"/>
	<c path="Array"><c path="Array"><c path="Float"/></c></c>
</f></_lineCardinalTangents>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="neko.io._Process.Stdin" params="" file="C:\Projects\haxe/std/neko/io/Process.hx" private="1" module="neko.io.Process">
		<extends path="haxe.io.Output"/>
		<_stdin_write line="55" static="1"><f a=":::">
	<e path="Void"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stdin_write>
		<_stdin_close line="56" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></_stdin_close>
		<p><e path="Void"/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<close public="1" set="method" line="37" override="1"><f a=""><e path="Void"/></f></close>
		<writeByte public="1" set="method" line="42" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="47" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="32"><f a="p">
	<e path="Void"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neko.io._Process.Stdout" params="" file="C:\Projects\haxe/std/neko/io/Process.hx" private="1" module="neko.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="86" static="1"><f a=":::">
	<e path="Void"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stdout_read>
		<_stderr_read line="87" static="1"><f a=":::">
	<e path="Void"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stderr_read>
		<p><e path="Void"/></p>
		<out><e path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="72" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="78" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="66"><f a="p:out">
	<e path="Void"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neko.io.Process" params="" file="C:\Projects\haxe/std/neko/io/Process.hx">
		<_run line="121" static="1"><f a=":">
	<unknown/>
	<d/>
	<e path="Void"/>
</f></_run>
		<_exit line="122" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></_exit>
		<_pid line="123" static="1"><f a="">
	<e path="Void"/>
	<c path="Int"/>
</f></_pid>
		<_close line="124" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></_close>
		<_kill line="125" static="1"><f a="">
	<e path="Void"/>
	<unknown/>
</f></_kill>
		<p><e path="Void"/></p>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<getPid public="1" set="method" line="105"><f a=""><c path="Int"/></f></getPid>
		<exitCode public="1" set="method" line="109"><f a=""><c path="Int"/></f></exitCode>
		<close public="1" set="method" line="113"><f a=""><e path="Void"/></f></close>
		<kill public="1" set="method" line="117"><f a=""><e path="Void"/></f></kill>
		<new public="1" set="method" line="98"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.math.scale.Quantize" params="" file="src/thx/math/scale/Quantize.hx">
		<x0><c path="Float"/></x0>
		<x1><c path="Float"/></x1>
		<kx><c path="Float"/></kx>
		<i><c path="Float"/></i>
		<_range><c path="Array"><c path="Float"/></c></_range>
		<scaleMap public="1" set="method" line="24"><f a="x:i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
</f></scaleMap>
		<scale public="1" set="method" line="26"><f a="x">
	<c path="Float"/>
	<c path="Float"/>
</f></scale>
		<getDomain public="1" set="method" line="31"><f a=""><c path="Array"><c path="Float"/></c></f></getDomain>
		<domain public="1" set="method" line="33"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Quantize"/>
</f></domain>
		<getRange public="1" set="method" line="41"><f a=""><f a=""><c path="Array"><c path="Float"/></c></f></f></getRange>
		<range public="1" set="method" line="43"><f a="x">
	<c path="Array"><c path="Float"/></c>
	<c path="thx.math.scale.Quantize"/>
</f></range>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.validation.RangeValidator" params="T" file="src/thx/validation/RangeValidator.hx">
		<extends path="thx.validation.Validator"><c path="thx.validation.RangeValidator.T"/></extends>
		<min public="1"><t path="Null"><c path="Float"/></t></min>
		<max public="1"><t path="Null"><c path="Float"/></t></max>
		<minInclusive public="1"><e path="Bool"/></minInclusive>
		<maxInclusive public="1"><e path="Bool"/></maxInclusive>
		<validate public="1" set="method" line="26" override="1"><f a="value">
	<c path="thx.validation.RangeValidator.T"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="18"><f a="?min:?max:?mininclusive:?maxinclusive">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\Projects\haxe/std/neko/_std/StringBuf.hx">
		<__make line="50" static="1"><d/></__make>
		<__add line="51" static="1"><d/></__add>
		<__add_char line="52" static="1"><d/></__add_char>
		<__add_sub line="53" static="1"><d/></__add_sub>
		<__string line="54" static="1"><d/></__string>
		<b><d/></b>
		<add public="1" get="inline" set="null" line="34">
			<f a="?x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="38">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="thx.cultures.MrIN" params="" file="src/thx/cultures/MrIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.SvFI" params="" file="src/thx/cultures/SvFI.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Iterators" params="" file="src/Iterators.hx">
		<indexOf public="1" params="T" set="method" line="8" static="1"><f a="it:?v:?f">
	<t path="Iterator"><c path="indexOf.T"/></t>
	<c path="indexOf.T"/>
	<f a="">
		<c path="indexOf.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></indexOf>
		<contains public="1" params="T" set="method" line="21" static="1"><f a="it:?v:?f">
	<t path="Iterator"><c path="contains.T"/></t>
	<c path="contains.T"/>
	<f a="">
		<c path="contains.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></contains>
		<array public="1" params="T" set="method" line="32" static="1"><f a="it">
	<t path="Iterator"><c path="array.T"/></t>
	<c path="Array"><c path="array.T"/></c>
</f></array>
		<map public="1" params="TIn:TOut" set="method" line="40" static="1"><f a="it:f">
	<t path="Iterator"><c path="map.TIn"/></t>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<each public="1" params="T" set="method" line="48" static="1"><f a="it:f">
	<t path="Iterator"><c path="each.T"/></t>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<reduce public="1" params="TIn:TOut" set="method" line="55" static="1"><f a="it:f:initialValue">
	<t path="Iterator"><c path="reduce.TIn"/></t>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<random public="1" params="T" get="inline" set="null" line="64" static="1"><f a="it">
	<t path="Iterator"><c path="random.T"/></t>
	<c path="random.T"/>
</f></random>
		<any public="1" params="T" set="method" line="69" static="1"><f a="it:f">
	<t path="Iterator"><c path="any.T"/></t>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" set="method" line="77" static="1"><f a="it:f">
	<t path="Iterator"><c path="all.T"/></t>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<last public="1" params="T" get="inline" set="null" line="85" static="1"><f a="it">
	<t path="Iterator"><c path="last.T"/></t>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<first public="1" params="T" get="inline" set="null" line="92" static="1"><f a="it">
	<t path="Iterator"><c path="first.T"/></t>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<order public="1" params="T" get="inline" set="null" line="97" static="1"><f a="it:?f">
	<t path="Iterator"><c path="order.T"/></t>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.validation.IncrementValidator" params="" file="src/thx/validation/IncrementValidator.hx">
		<extends path="thx.validation.Validator"><c path="Float"/></extends>
		<increment public="1"><c path="Float"/></increment>
		<validate public="1" set="method" line="21" override="1"><f a="value">
	<c path="Float"/>
	<e path="thx.util.Result"/>
</f></validate>
		<new public="1" set="method" line="14"><f a="increment">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Objects" params="" file="src/Objects.hx">
		<field public="1" params="T" get="inline" set="null" line="10" static="1"><f a="o:fieldname:?alt">
	<a/>
	<c path="String"/>
	<c path="field.T"/>
	<t path="Null"><c path="field.T"/></t>
</f></field>
		<keys public="1" get="inline" set="null" line="15" static="1"><f a="o">
	<a/>
	<c path="Array"><c path="String"/></c>
</f></keys>
		<values public="1" set="method" line="20" static="1"><f a="o">
	<a/>
	<c path="Array"><d/></c>
</f></values>
		<entries public="1" set="method" line="28" static="1"><f a="o">
	<a/>
	<c path="Array"><t path="Entry"/></c>
</f></entries>
		<with public="1" params="T" get="inline" set="null" line="36" static="1"><f a="ob:f">
	<c path="with.T"/>
	<f a="">
		<c path="with.T"/>
		<e path="Void"/>
	</f>
	<c path="with.T"/>
</f></with>
		<toHash public="1" set="method" line="42" static="1"><f a="ob">
	<a/>
	<c path="Hash"><d/></c>
</f></toHash>
		<copyToHash public="1" set="method" line="48" static="1"><f a="ob:hash">
	<a/>
	<c path="Hash"><d/></c>
	<c path="Hash"><d/></c>
</f></copyToHash>
		<interpolate public="1" params="T" set="method" line="55" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="interpolate.T"/>
	<c path="interpolate.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="interpolate.T"/>
</f></interpolate>
		<interpolatef public="1" params="T" set="method" line="60" static="1"><f a="a:b:?equation">
	<c path="interpolatef.T"/>
	<c path="interpolatef.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="interpolatef.T"/>
	</f>
</f></interpolatef>
		<_reCheckKeyIsColor line="89" static="1"><c path="EReg"/></_reCheckKeyIsColor>
		<interpolateByName set="method" line="90" static="1"><f a="k:v">
	<c path="String"/>
	<d/>
	<f a="a:b:?equation">
		<d/>
		<d/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<d/>
		</f>
	</f>
</f></interpolateByName>
		<applyTo public="1" set="method" line="95" static="1"><f a="src:dest">
	<a/>
	<a/>
	<a/>
</f></applyTo>
		<copyTo public="1" set="method" line="109" static="1"><f a="src:dest">
	<a/>
	<a/>
	<a/>
</f></copyTo>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="Entry" params="" file="src/Objects.hx" module="Objects"><a>
	<value><d/></value>
	<key><c path="String"/></key>
</a></typedef>
	<class path="thx.cultures.EnAU" params="" file="src/thx/cultures/EnAU.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.ArKW" params="" file="src/thx/cultures/ArKW.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="55" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.AfZA" params="" file="src/thx/cultures/AfZA.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.TgCyrlTJ" params="" file="src/thx/cultures/TgCyrlTJ.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.languages.Cs" params="" file="src/thx/languages/Cs.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.BnIN" params="" file="src/thx/cultures/BnIN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="51" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.GdGB" params="" file="src/thx/cultures/GdGB.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="50" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.type.Rttis" params="" file="src/thx/type/Rttis.hx">
		<typeName public="1" set="method" line="8" static="1"><f a="type:opt">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<c path="String"/>
</f></typeName>
		<typePath public="1" set="method" line="59" static="1"><f a="type">
	<e path="haxe.rtti.CType"/>
	<t path="haxe.rtti.Path"/>
</f></typePath>
		<methodArguments public="1" set="method" line="70" static="1"><f a="field">
	<t path="haxe.rtti.ClassField"/>
	<c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
</f></methodArguments>
		<methodReturnType public="1" set="method" line="81" static="1"><f a="field">
	<t path="haxe.rtti.ClassField"/>
	<e path="haxe.rtti.CType"/>
</f></methodReturnType>
		<argumentAcceptNull public="1" set="method" line="92" static="1"><f a="arg">
	<a>
		<t><e path="haxe.rtti.CType"/></t>
		<opt><e path="Bool"/></opt>
		<name><c path="String"/></name>
	</a>
	<e path="Bool"/>
</f></argumentAcceptNull>
		<getClassFields public="1" set="method" line="105" static="1"><f a="cls">
	<c path="Class"><d/></c>
	<c path="Hash"><t path="haxe.rtti.ClassField"/></c>
</f></getClassFields>
		<typeParametersMap public="1" set="method" line="110" static="1"><f a="cls:?hash">
	<c path="Class"><d/></c>
	<c path="Hash"><e path="haxe.rtti.CType"/></c>
	<c path="Hash"><e path="haxe.rtti.CType"/></c>
</f></typeParametersMap>
		<unifyFields public="1" set="method" line="129" static="1"><f a="cls:?h">
	<t path="haxe.rtti.Classdef"/>
	<c path="Hash"><t path="haxe.rtti.ClassField"/></c>
	<c path="Hash"><t path="haxe.rtti.ClassField"/></c>
</f></unifyFields>
		<hasInfo public="1" set="method" line="152" static="1"><f a="cls">
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></hasInfo>
		<_cache line="157" static="1"><c path="Hash"><t path="haxe.rtti.Classdef"/></c></_cache>
		<getClassDef public="1" set="method" line="158" static="1"><f a="cls">
	<c path="Class"><d/></c>
	<t path="Null"><t path="haxe.rtti.Classdef"/></t>
</f></getClassDef>
		<isMethod public="1" set="method" line="177" static="1"><f a="field">
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></isMethod>
	</class>
	<class path="Lambda" params="" file="C:\Projects\haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>
		Creates an [Array] from an [Iterable]
	</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>
		Creates a [List] from an [Iterable]
	</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>
		Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.
	</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>
		Similar to [map], but also pass an index for each item iterated.
	</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.
	</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if at least one element of the iterable is found by using the specific function.
	</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if all elements of the iterable have the specified property defined by [f].
	</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Call the function 'f' on all elements of the [Iterable] 'it'.
	</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>
		Return the list of elements matching the function 'f'
	</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>
		Functional 'fold' using an [Iterable]
	</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Count the number of elements in an [Iterable] having [pred] returning true.
	</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an iterable does not contain any element.
	</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.
	</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>
		Returns a list containing all items of 'a' followed by all items of 'b'
	</haxe_doc>
		</concat>
		<haxe_doc>
	The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.
</haxe_doc>
	</class>
	<class path="thx.color.Colors" params="" file="src/thx/color/Colors.hx">
		<interpolatef public="1" set="method" line="15" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolatef>
		<interpolate public="1" set="method" line="23" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolate>
		<_reParse line="28" static="1"><c path="EReg"/></_reParse>
		<parse public="1" set="method" line="30" static="1"><f a="s">
	<c path="String"/>
	<c path="thx.color.Rgb"/>
</f></parse>
		<_c set="method" line="68" static="1"><f a="s">
	<c path="String"/>
	<c path="Int"/>
</f></_c>
		<_d set="method" line="73" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></_d>
		<_p set="method" line="83" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></_p>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<enum path="thx.svg.LineInterpolator" params="" file="src/thx/svg/LineInterpolator.hx">
		<StepBefore/>
		<StepAfter/>
		<Linear/>
		<CardinalClosed a="?tension"><c path="Float"/></CardinalClosed>
		<Cardinal a="?tension"><c path="Float"/></Cardinal>
		<BasisClosed/>
		<Basis/>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</enum>
	<typedef path="thx.sys.db.Mysql" params="" file="src/thx/sys/db/Mysql.hx"><c path="neko.db.Mysql"/></typedef>
	<class path="thx.cultures.TkTM" params="" file="src/thx/cultures/TkTM.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="52" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.scale.LinearTime" params="" file="src/thx/math/scale/LinearTime.hx">
		<extends path="thx.math.scale.Linear"/>
		<guessGranularity public="1" set="method" line="21" static="1"><f a="a:b:?disc">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></guessGranularity>
		<validPeriods line="37" static="1"><c path="Array"><c path="String"/></c></validPeriods>
		<_usetimeticks><e path="Bool"/></_usetimeticks>
		<_granularity><c path="String"/></_granularity>
		<domain public="1" set="method" line="40" override="1"><f a="x0:x1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.math.scale.Linear"/>
</f></domain>
		<getGranularity public="1" set="method" line="47"><f a=""><c path="String"/></f></getGranularity>
		<granularity public="1" set="method" line="48"><f a="v">
	<c path="String"/>
	<c path="thx.math.scale.LinearTime"/>
</f></granularity>
		<tickFormat public="1" set="method" line="57" override="1"><f a="v:?i">
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
</f></tickFormat>
		<getUseTimeTicks public="1" set="method" line="75"><f a=""><e path="Bool"/></f></getUseTimeTicks>
		<useTimeTicks public="1" set="method" line="76"><f a="v">
	<e path="Bool"/>
	<c path="thx.math.scale.LinearTime"/>
</f></useTimeTicks>
		<ticks public="1" set="method" line="82" override="1"><f a=""><c path="Array"><c path="Float"/></c></f></ticks>
		<linearTicks public="1" set="method" line="90"><f a=""><c path="Array"><c path="Float"/></c></f></linearTicks>
		<timeTicks public="1" set="method" line="95"><f a=""><c path="Array"><c path="Float"/></c></f></timeTicks>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.svg.Symbol" params="" file="src/thx/svg/Symbol.hx">
		<sqrt3 line="10" static="1"><c path="Float"/></sqrt3>
		<tan30 line="11" static="1"><c path="Float"/></tan30>
		<triangleDowun public="1" set="method" line="13" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></triangleDowun>
		<triangleUp public="1" set="method" line="23" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></triangleUp>
		<square public="1" set="method" line="33" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></square>
		<diamond public="1" set="method" line="43" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></diamond>
		<cross public="1" set="method" line="54" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></cross>
		<circle public="1" set="method" line="72" static="1"><f a="size">
	<c path="Float"/>
	<c path="String"/>
</f></circle>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.cultures.EsES" params="" file="src/thx/cultures/EsES.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.cultures.MsBN" params="" file="src/thx/cultures/MsBN.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="thx.math.Equations" params="" file="src/thx/math/Equations.hx">
		<linear public="1" set="method" line="10" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></linear>
		<polynomial public="1" set="method" line="15" static="1"><f a="t:e">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></polynomial>
		<quadratic public="1" set="method" line="20" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></quadratic>
		<cubic public="1" set="method" line="25" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></cubic>
		<sin public="1" set="method" line="30" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<exponential public="1" set="method" line="35" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></exponential>
		<circle public="1" set="method" line="40" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></circle>
		<elastic public="1" set="method" line="45" static="1"><f a="?t:a:?p">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></elastic>
		<elasticf public="1" set="method" line="59" static="1"><f a="?a:?p">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></elasticf>
		<back public="1" set="method" line="74" static="1"><f a="t:?s">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></back>
		<backf public="1" set="method" line="80" static="1"><f a="?s">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></backf>
		<bounce public="1" set="method" line="86" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></bounce>
		<polynomialf public="1" set="method" line="94" static="1"><f a="e">
	<c path="Float"/>
	<f a="t">
		<c path="Float"/>
		<e path="Void"/>
	</f>
</f></polynomialf>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
</haxe>