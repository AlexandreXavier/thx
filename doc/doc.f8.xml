<haxe>
	<class path="flash.display.BitmapData" params="" file="C:\Projects\haxe/std/flash/display/BitmapData.hx" extern="1">
		<loadBitmap public="1" set="method" static="1"><f a="id">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
</f></loadBitmap>
		<width public="1"><c path="Int"/></width>
		<height public="1"><c path="Int"/></height>
		<rectangle public="1"><c path="flash.geom.Rectangle"><c path="Int"/></c></rectangle>
		<transparent public="1"><e path="Bool"/></transparent>
		<getPixel public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></getPixel>
		<setPixel public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></getPixel32>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setPixel32>
		<fillRect public="1" set="method"><f a="r:color">
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></fillRect>
		<copyPixels public="1" set="method"><f a="src:srcRect:dst:?alpha:?alphaPos:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyPixels>
		<applyFilter public="1" set="method"><f a="source:sourceRect:dest:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="flash.filters.BitmapFilter"/>
	<c path="Int"/>
</f></applyFilter>
		<scroll public="1" set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<threshold public="1" set="method"><f a="src:srcRect:dstPoint:op:threshold:?color:?mask:?copy">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></threshold>
		<draw public="1" set="method"><f a="source:?matrix:?colortrans:?blendMode:?clipRect:?smooth">
	<d/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<d/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<pixelDissolve public="1" set="method"><f a="src:srcRect:dst:?seed:?npixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></pixelDissolve>
		<floodFill public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></floodFill>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?fillColor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
</f></getColorBoundsRect>
		<perlinNoise public="1" set="method"><f a="x:y:num:seed:stitch:noise:?channels:?gray:?offsets">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"><c path="Float"/></c></c>
	<e path="Void"/>
</f></perlinNoise>
		<colorTransform public="1" set="method"><f a="r:trans">
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></colorTransform>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlpha:object:?secondPoint:?secondAlpha">
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<d/>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Bool"/>
</f></hitTest>
		<paletteMap public="1" set="method"><f a="source:srcRect:dst:?reds:?greens:?blues:?alphas">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></paletteMap>
		<merge public="1" set="method"><f a="src:srcRect:dst:redMult:greenMult:blueMult:alphaMult">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></merge>
		<noise public="1" set="method"><f a="seed:?low:?high:?channels:?gray">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></noise>
		<copyChannel public="1" set="method"><f a="source:sourceRect:dest:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.geom.Point"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></copyChannel>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"><c path="Int"/></c>
</f></generateFilterRect>
		<compare public="1" set="method">
			<f a="b">
				<c path="flash.display.BitmapData"/>
				<c path="flash.display.BitmapData"/>
			</f>
			<haxe_doc> FP9 only </haxe_doc>
		</compare>
		<new public="1" set="method"><f a="width:height:?transparent:?fillcolor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.color.Rgb" params="" file="src/thx/color/Rgb.hx">
		<fromFloats public="1" set="method" line="54" static="1"><f a="r:g:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="thx.color.Rgb"/>
</f></fromFloats>
		<fromInt public="1" set="method" line="62" static="1"><f a="v">
	<c path="Int"/>
	<c path="thx.color.Rgb"/>
</f></fromInt>
		<equals public="1" set="method" line="67" static="1"><f a="a:b">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="72" static="1"><f a="color:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></darker>
		<interpolate public="1" set="method" line="81" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Rgb"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="90" static="1"><f a="a:b:?equation">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Rgb"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="thx.color.Rgb"/>
	</f>
</f></interpolatef>
		<contrast public="1" set="method" line="98" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></contrast>
		<contrastBW public="1" set="method" line="107" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></contrastBW>
		<blue public="1" set="null"><c path="Int"/></blue>
		<green public="1" set="null"><c path="Int"/></green>
		<red public="1" set="null"><c path="Int"/></red>
		<int public="1" set="method" line="32"><f a=""><c path="Int"/></f></int>
		<hex public="1" set="method" line="37"><f a="?prefix">
	<c path="String"/>
	<c path="String"/>
</f></hex>
		<toCss public="1" get="inline" set="null" line="42"><f a=""><c path="String"/></f></toCss>
		<toRgbString public="1" set="method" line="44"><f a=""><c path="String"/></f></toRgbString>
		<toString public="1" set="method" line="49"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="25">
			<f a="r:g:b">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 *
	 * @param r	an Int value between 0 and 255 for the red channel
	 * @param g	an Int value between 0 and 255 for the green channel
	 * @param b	an Int value between 0 and 255 for the blue channel
	 </haxe_doc>
		</new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.color.Hsl" params="" file="src/thx/color/Hsl.hx">
		<extends path="thx.color.Rgb"/>
		<_c set="method" line="29" static="1"><f a="d:s:l">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></_c>
		<ofRgb public="1" set="method" line="49" static="1"><f a="c">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Hsl"/>
</f></ofRgb>
		<equals public="1" set="method" line="75" static="1"><f a="a:b">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="80" static="1"><f a="color:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></darker>
		<interpolate public="1" set="method" line="90" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Hsl"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="99" static="1"><f a="a:b:?equation">
	<c path="thx.color.Hsl"/>
	<c path="thx.color.Hsl"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="thx.color.Hsl"/>
	</f>
</f></interpolatef>
		<hue public="1" set="null"><c path="Float"/></hue>
		<saturation public="1" set="null"><c path="Float"/></saturation>
		<lightness public="1" set="null"><c path="Float"/></lightness>
		<toHslString public="1" set="method" line="44"><f a=""><c path="String"/></f></toHslString>
		<new public="1" set="method" line="17"><f a="h:s:l">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="flash.TextField" params="" file="C:\Projects\haxe/std/flash/TextField.hx" extern="1">
		<getFontList public="1" set="method" static="1"><f a=""><c path="Array"><d/></c></f></getFontList>
		<_x public="1"><c path="Float"/></_x>
		<_y public="1"><c path="Float"/></_y>
		<_xmouse public="1"><c path="Float"/></_xmouse>
		<_ymouse public="1"><c path="Float"/></_ymouse>
		<_xscale public="1"><c path="Float"/></_xscale>
		<_yscale public="1"><c path="Float"/></_yscale>
		<_width public="1"><c path="Float"/></_width>
		<_height public="1"><c path="Float"/></_height>
		<_alpha public="1"><c path="Float"/></_alpha>
		<_visible public="1"><e path="Bool"/></_visible>
		<_target public="1"><c path="String"/></_target>
		<_rotation public="1"><c path="Float"/></_rotation>
		<_name public="1"><c path="String"/></_name>
		<_framesloaded public="1"><c path="Int"/></_framesloaded>
		<_droptarget public="1"><c path="String"/></_droptarget>
		<_currentframe public="1"><c path="Int"/></_currentframe>
		<_totalframes public="1"><c path="Int"/></_totalframes>
		<_quality public="1"><c path="String"/></_quality>
		<_focusrect public="1"><e path="Bool"/></_focusrect>
		<_soundbuftime public="1"><c path="Float"/></_soundbuftime>
		<_url public="1"><c path="String"/></_url>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<autoSize public="1"><d/></autoSize>
		<background public="1"><e path="Bool"/></background>
		<backgroundColor public="1"><c path="Int"/></backgroundColor>
		<border public="1"><e path="Bool"/></border>
		<borderColor public="1"><c path="Int"/></borderColor>
		<bottomScroll public="1"><c path="Float"/></bottomScroll>
		<condenseWhite public="1"><e path="Bool"/></condenseWhite>
		<embedFonts public="1"><e path="Bool"/></embedFonts>
		<hscroll public="1"><c path="Float"/></hscroll>
		<html public="1"><e path="Bool"/></html>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1"><c path="Int"/></length>
		<maxChars public="1"><c path="Int"/></maxChars>
		<maxhscroll public="1"><c path="Float"/></maxhscroll>
		<maxscroll public="1"><c path="Float"/></maxscroll>
		<multiline public="1"><e path="Bool"/></multiline>
		<password public="1"><e path="Bool"/></password>
		<restrict public="1"><c path="String"/></restrict>
		<scroll public="1"><c path="Float"/></scroll>
		<selectable public="1"><e path="Bool"/></selectable>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><c path="Int"/></textColor>
		<textHeight public="1"><c path="Float"/></textHeight>
		<textWidth public="1"><c path="Float"/></textWidth>
		<type public="1"><c path="String"/></type>
		<variable public="1"><c path="String"/></variable>
		<wordWrap public="1"><e path="Bool"/></wordWrap>
		<mouseWheelEnabled public="1"><e path="Bool"/></mouseWheelEnabled>
		<antiAliasType public="1"><c path="String"/></antiAliasType>
		<gridFitType public="1"><c path="String"/></gridFitType>
		<sharpness public="1"><c path="Float"/></sharpness>
		<filters public="1"><c path="Array"><d/></c></filters>
		<thickness public="1"><c path="Float"/></thickness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></replaceText>
		<replaceSel public="1" set="method"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></replaceSel>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.TextFormat"/>
</f></getTextFormat>
		<setTextFormat public="1" set="method"><f a="begin:?end:?tf">
	<d/>
	<d/>
	<c path="flash.TextFormat"/>
	<e path="Void"/>
</f></setTextFormat>
		<removeTextField public="1" set="method"><f a=""><e path="Void"/></f></removeTextField>
		<getNewTextFormat public="1" set="method"><f a=""><c path="flash.TextFormat"/></f></getNewTextFormat>
		<setNewTextFormat public="1" set="method"><f a="tf">
	<c path="flash.TextFormat"/>
	<e path="Void"/>
</f></setNewTextFormat>
		<getDepth public="1" set="method"><f a=""><c path="Int"/></f></getDepth>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<e path="Bool"/>
</f></removeListener>
		<onChanged public="1" set="dynamic"><f a="changedField">
	<c path="flash.TextField"/>
	<e path="Void"/>
</f></onChanged>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<e path="Void"/>
</f></onKillFocus>
		<onScroller public="1" set="dynamic"><f a="scrolledField">
	<c path="flash.TextField"/>
	<e path="Void"/>
</f></onScroller>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<e path="Void"/>
</f></onSetFocus>
	</class>
	<class path="Types" params="" file="src/Types.hx">
		<className public="1" get="inline" set="null" line="5" static="1"><f a="o">
	<d/>
	<t path="Null"><c path="String"/></t>
</f></className>
		<fullName public="1" get="inline" set="null" line="10" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></fullName>
		<typeName public="1" set="method" line="15" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></typeName>
		<hasSuperClass public="1" set="method" line="31" static="1"><f a="type:sup">
	<c path="Class"><d/></c>
	<c path="Class"><d/></c>
	<e path="Bool"/>
</f></hasSuperClass>
		<isAnonymous public="1" get="inline" set="null" line="42" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isAnonymous>
		<as public="1" params="T1:T2" get="inline" set="null" line="47" static="1"><f a="value:type">
	<c path="as.T1"/>
	<c path="Class"><c path="as.T2"/></c>
	<t path="Null"><c path="as.T2"/></t>
</f></as>
		<ifIs public="1" params="T1:T2" set="method" line="52" static="1"><f a="value:type:handler">
	<c path="ifIs.T1"/>
	<c path="Class"><c path="ifIs.T2"/></c>
	<f a="">
		<c path="ifIs.T2"/>
		<e path="Void"/>
	</f>
	<c path="ifIs.T1"/>
</f></ifIs>
		<of public="1" params="T" get="inline" set="null" line="59" static="1"><f a="type:value">
	<c path="Class"><c path="of.T"/></c>
	<d/>
	<t path="Null"><c path="of.T"/></t>
</f></of>
		<sameAs public="1" set="method" line="64" static="1"><f a="a:b">
	<d/>
	<d/>
	<e path="Bool"/>
</f></sameAs>
	</class>
	<class path="thx.culture.Info" params="" file="src/thx/culture/Info.hx">
		<name public="1" set="null"><c path="String"/></name>
		<native public="1" set="null"><c path="String"/></native>
		<english public="1" set="null"><c path="String"/></english>
		<iso2 public="1" set="null"><c path="String"/></iso2>
		<iso3 public="1" set="null"><c path="String"/></iso3>
		<pluralRule public="1" set="null"><c path="Int"/></pluralRule>
		<toString public="1" set="method" line="17"><f a=""><c path="String"/></f></toString>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.culture.Culture" params="" file="src/thx/culture/Culture.hx">
		<extends path="thx.culture.Info"/>
		<cultures get="getCultures" set="null" static="1"><c path="Hash"><c path="thx.culture.Culture"/></c></cultures>
		<getCultures set="method" line="39" static="1"><f a=""><c path="Hash"><c path="thx.culture.Culture"/></c></f></getCultures>
		<get public="1" set="method" line="46" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
</f></get>
		<names public="1" set="method" line="51" static="1"><f a=""><t path="Iterator"><c path="String"/></t></f></names>
		<_defaultCulture static="1"><c path="thx.culture.Culture"/></_defaultCulture>
		<defaultCulture public="1" get="getDefaultCulture" set="setDefaultCulture" static="1"><c path="thx.culture.Culture"/></defaultCulture>
		<getDefaultCulture set="method" line="59" static="1"><f a=""><c path="thx.culture.Culture"/></f></getDefaultCulture>
		<setDefaultCulture set="method" line="67" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.Culture"/>
</f></setDefaultCulture>
		<add public="1" set="method" line="72" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<e path="Void"/>
</f></add>
		<loadAll public="1" set="method" line="81" static="1"><f a=""><e path="Void"/></f></loadAll>
		<language public="1" set="null"><c path="thx.culture.Language"/></language>
		<date public="1" set="null"><c path="thx.culture.core.DateTimeInfo"/></date>
		<englishCurrency public="1" set="null"><c path="String"/></englishCurrency>
		<nativeCurrency public="1" set="null"><c path="String"/></nativeCurrency>
		<currencySymbol public="1" set="null"><c path="String"/></currencySymbol>
		<currencyIso public="1" set="null"><c path="String"/></currencyIso>
		<englishRegion public="1" set="null"><c path="String"/></englishRegion>
		<nativeRegion public="1" set="null"><c path="String"/></nativeRegion>
		<isMetric public="1" set="null"><e path="Bool"/></isMetric>
		<digits public="1" set="null"><t path="Null"><c path="Array"><c path="String"/></c></t></digits>
		<signNeg public="1" set="null"><c path="String"/></signNeg>
		<signPos public="1" set="null"><c path="String"/></signPos>
		<symbolNaN public="1" set="null"><c path="String"/></symbolNaN>
		<symbolPercent public="1" set="null"><c path="String"/></symbolPercent>
		<symbolPermille public="1" set="null"><c path="String"/></symbolPermille>
		<symbolNegInf public="1" set="null"><c path="String"/></symbolNegInf>
		<symbolPosInf public="1" set="null"><c path="String"/></symbolPosInf>
		<number public="1" set="null"><c path="thx.culture.core.NumberInfo"/></number>
		<currency public="1" set="null"><c path="thx.culture.core.NumberInfo"/></currency>
		<percent public="1" set="null"><c path="thx.culture.core.NumberInfo"/></percent>
		<haxe_doc>
* @todo add lazy loading
</haxe_doc>
	</class>
	<class path="thx.cultures.EnUS" params="" file="src/thx/cultures/EnUS.hx">
		<extends path="thx.culture.Culture"/>
		<culture public="1" get="getCulture" set="null" static="1"><c path="thx.culture.Culture"/></culture>
		<getCulture set="method" line="54" static="1"><f a=""><c path="thx.culture.Culture"/></f></getCulture>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="String" params="" file="C:\Projects\haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="flash.Lib" params="" file="C:\Projects\haxe/std/flash/Lib.hx">
		<_global public="1" static="1"><d/></_global>
		<_root public="1" static="1"><c path="flash.MovieClip"/></_root>
		<current public="1" static="1"><c path="flash.MovieClip"/></current>
		<onerror static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></onerror>
		<trace public="1" set="method" line="34" static="1"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></trace>
		<eval public="1" set="method" line="38" static="1"><f a="str">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="42" static="1"><f a="url:?target">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="46" static="1"><f a="cmd:?param">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></fscommand>
		<print public="1" set="method" line="50" static="1"><f a="cmd:?kind">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></print>
		<getTimer public="1" get="inline" set="null" line="55" static="1"><f a=""><c path="Int"/></f></getTimer>
		<getVersion public="1" set="method" line="59" static="1"><f a=""><c path="String"/></f></getVersion>
		<registerClass public="1" set="method" line="63" static="1"><f a="name:cl">
	<c path="String"/>
	<a/>
	<e path="Void"/>
</f></registerClass>
		<keys public="1" set="method" line="67" static="1"><f a="v">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></keys>
		<setErrorHandler public="1" set="method" line="71" static="1"><f a="f">
	<f a=":">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
	</class>
	<class path="DynamicsT" params="" file="src/DynamicsT.hx">
		<toHash public="1" params="T" set="method" line="8" static="1"><f a="ob">
	<d><c path="toHash.T"/></d>
	<c path="Hash"><c path="toHash.T"/></c>
</f></toHash>
		<copyToHash public="1" params="T" set="method" line="14" static="1"><f a="ob:hash">
	<d><c path="copyToHash.T"/></d>
	<c path="Hash"><c path="copyToHash.T"/></c>
	<c path="Hash"><c path="copyToHash.T"/></c>
</f></copyToHash>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="flash.Stage" params="" file="C:\Projects\haxe/std/flash/Stage.hx" extern="1">
		<width public="1" static="1"><c path="Float"/></width>
		<height public="1" static="1"><c path="Float"/></height>
		<scaleMode public="1" static="1"><c path="String"/></scaleMode>
		<align public="1" static="1"><c path="String"/></align>
		<showMenu public="1" static="1"><e path="Bool"/></showMenu>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<e path="Void"/>
</f></removeListener>
		<displayState public="1" static="1">
			<c path="String"/>
			<haxe_doc>
		Set to "fullScreen" in order to set Flash to fullscreen
		(can only be done in Mouse/Keyboard event listener).
		Don't forget allowfullscreen="true" in your SWF parameters.
	</haxe_doc>
		</displayState>
		<fullScreenSourceRect public="1" static="1"><c path="flash.geom.Rectangle"><c path="Int"/></c></fullScreenSourceRect>
		<onFullScreen public="1" set="dynamic" static="1"><f a="full">
	<e path="Bool"/>
	<e path="Void"/>
</f></onFullScreen>
	</class>
	<enum path="Void" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Projects\haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="Iterables" params="" file="src/Iterables.hx">
		<indexOf public="1" params="T" get="inline" set="null" line="9" static="1"><f a="it:?v:?f">
	<t path="Iterable"><c path="indexOf.T"/></t>
	<c path="indexOf.T"/>
	<f a="">
		<c path="indexOf.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></indexOf>
		<contains public="1" params="T" get="inline" set="null" line="14" static="1"><f a="it:?v:?f">
	<t path="Iterable"><c path="contains.T"/></t>
	<c path="contains.T"/>
	<f a="">
		<c path="contains.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></contains>
		<array public="1" params="T" get="inline" set="null" line="19" static="1"><f a="it">
	<t path="Iterable"><c path="array.T"/></t>
	<c path="Array"><c path="array.T"/></c>
</f></array>
		<map public="1" params="TIn:TOut" get="inline" set="null" line="24" static="1"><f a="it:f">
	<t path="Iterable"><c path="map.TIn"/></t>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<each public="1" params="T" get="inline" set="null" line="29" static="1"><f a="it:f">
	<t path="Iterable"><c path="each.T"/></t>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<reduce public="1" params="TIn:TOut" get="inline" set="null" line="34" static="1"><f a="it:f:initialValue">
	<t path="Iterable"><c path="reduce.TIn"/></t>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<random public="1" params="T" get="inline" set="null" line="39" static="1"><f a="it">
	<t path="Iterable"><c path="random.T"/></t>
	<c path="random.T"/>
</f></random>
		<any public="1" params="T" get="inline" set="null" line="44" static="1"><f a="it:f">
	<t path="Iterable"><c path="any.T"/></t>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" get="inline" set="null" line="49" static="1"><f a="it:f">
	<t path="Iterable"><c path="all.T"/></t>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<last public="1" params="T" get="inline" set="null" line="54" static="1"><f a="it">
	<t path="Iterable"><c path="last.T"/></t>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<lastf public="1" params="T" get="inline" set="null" line="59" static="1"><f a="it:f">
	<t path="Iterable"><c path="lastf.T"/></t>
	<f a="">
		<c path="lastf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="lastf.T"/></t>
</f></lastf>
		<first public="1" params="T" get="inline" set="null" line="64" static="1"><f a="it">
	<t path="Iterable"><c path="first.T"/></t>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<firstf public="1" params="T" get="inline" set="null" line="69" static="1"><f a="it:f">
	<t path="Iterable"><c path="firstf.T"/></t>
	<f a="">
		<c path="firstf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="firstf.T"/></t>
</f></firstf>
		<order public="1" params="T" get="inline" set="null" line="74" static="1"><f a="it:?f">
	<t path="Iterable"><c path="order.T"/></t>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="EReg" params="" file="C:\Projects\haxe/std/EReg.hx">
		<match public="1" set="method" line="45">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="54">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="62">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="70">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="78">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="86">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="95">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="104">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="37">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new regular expression with pattern [r] and
		options [opt].
	</haxe_doc>
		</new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="Ints" params="" file="src/Ints.hx">
		<range public="1" set="method" line="12" static="1"><f a="start:?stop:?step">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
</f></range>
		<sign public="1" get="inline" set="null" line="28" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></sign>
		<abs public="1" get="inline" set="null" line="33" static="1"><f a="a">
	<c path="Int"/>
	<c path="Int"/>
</f></abs>
		<min public="1" get="inline" set="null" line="38" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></min>
		<max public="1" get="inline" set="null" line="43" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></max>
		<wrap public="1" set="method" line="48" static="1"><f a="v:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></wrap>
		<clamp public="1" set="method" line="53" static="1"><f a="v:min:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clamp>
		<clampSym public="1" set="method" line="63" static="1"><f a="v:max">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></clampSym>
		<interpolate public="1" get="inline" set="null" line="73" static="1"><f a="f:?min:?max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Int"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="80" static="1"><f a="?min:?max:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="f">
		<c path="Float"/>
		<c path="Int"/>
	</f>
</f></interpolatef>
		<ascending public="1" set="method" line="88" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ascending>
		<descending public="1" set="method" line="89" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></descending>
		<format public="1" set="method" line="91" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="96" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<_reparse line="101" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="102" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="108" static="1"><f a="s">
	<c path="String"/>
	<t path="Null"><c path="Int"/></t>
</f></parse>
		<compare public="1" get="inline" set="null" line="115" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></compare>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Dynamics" params="" file="src/Dynamics.hx">
		<format public="1" set="method" line="11" static="1"><f a="v:?param:?params:?nullstring:?culture">
	<d/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="16" static="1"><f a="?param:?params:?nullstring:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<d/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="45" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<d/>
	<d/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<unknown/>
</f></interpolate>
		<interpolatef public="1" set="method" line="50" static="1"><f a="a:b:?equation">
	<d/>
	<d/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<d/>
	</f>
</f></interpolatef>
		<string public="1" set="method" line="79" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></string>
		<clone public="1" set="method" line="121" static="1"><f a="v">
	<d/>
	<a/>
</f></clone>
		<number public="1" set="method" line="154" static="1"><f a="v">
	<d/>
	<c path="Float"/>
</f></number>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.color.Cmyk" params="" file="src/thx/color/Cmyk.hx">
		<extends path="thx.color.Rgb"/>
		<toCmyk public="1" set="method" line="43" static="1"><f a="rgb">
	<c path="thx.color.Rgb"/>
	<c path="thx.color.Cmyk"/>
</f></toCmyk>
		<equals public="1" set="method" line="61" static="1"><f a="a:b">
	<c path="thx.color.Cmyk"/>
	<c path="thx.color.Cmyk"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="66" static="1"><f a="color:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></darker>
		<interpolate public="1" set="method" line="77" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Cmyk"/>
	<c path="thx.color.Cmyk"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Cmyk"/>
</f></interpolate>
		<black public="1" set="null"><c path="Float"/></black>
		<cyan public="1" set="null"><c path="Float"/></cyan>
		<magenta public="1" set="null"><c path="Float"/></magenta>
		<yellow public="1" set="null"><c path="Float"/></yellow>
		<toCmykString public="1" set="method" line="38"><f a=""><c path="String"/></f></toCmykString>
		<new public="1" set="method" line="25">
			<f a="cyan:magenta:yellow:black">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Construct a Cmyk Color.
	 * @param cyan		Float bewteen 0 and 1
	 * @param magenta	Float bewteen 0 and 1
	 * @param yellow	Float bewteen 0 and 1
	 * @param black		Float bewteen 0 and 1
	 </haxe_doc>
		</new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.culture.core.DateTimeInfo" params="" file="src/thx/culture/core/DateTimeInfo.hx">
		<months public="1" set="null"><c path="Array"><c path="String"/></c></months>
		<abbrMonths public="1" set="null"><c path="Array"><c path="String"/></c></abbrMonths>
		<days public="1" set="null"><c path="Array"><c path="String"/></c></days>
		<abbrDays public="1" set="null"><c path="Array"><c path="String"/></c></abbrDays>
		<shortDays public="1" set="null"><c path="Array"><c path="String"/></c></shortDays>
		<am public="1" set="null"><c path="String"/></am>
		<pm public="1" set="null"><c path="String"/></pm>
		<separatorDate public="1" set="null"><c path="String"/></separatorDate>
		<separatorTime public="1" set="null"><c path="String"/></separatorTime>
		<firstWeekDay public="1" set="null"><c path="Int"/></firstWeekDay>
		<patternYearMonth public="1" set="null"><c path="String"/></patternYearMonth>
		<patternMonthDay public="1" set="null"><c path="String"/></patternMonthDay>
		<patternDate public="1" set="null"><c path="String"/></patternDate>
		<patternDateShort public="1" set="null"><c path="String"/></patternDateShort>
		<patternDateRfc public="1" set="null"><c path="String"/></patternDateRfc>
		<patternDateTime public="1" set="null"><c path="String"/></patternDateTime>
		<patternUniversal public="1" set="null"><c path="String"/></patternUniversal>
		<patternSortable public="1" set="null"><c path="String"/></patternSortable>
		<patternTime public="1" set="null"><c path="String"/></patternTime>
		<patternTimeShort public="1" set="null"><c path="String"/></patternTimeShort>
		<new public="1" set="method" line="25"><f a="months:abbrMonths:days:abbrDays:shortDays:am:pm:separatorDate:separatorTime:firstWeekDay:patternYearMonth:patternMonthDay:patternDate:patternDateShort:patternDateRfc:patternDateTime:patternUniversal:patternSortable:patternTime:patternTimeShort">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Iterators" params="" file="src/Iterators.hx">
		<indexOf public="1" params="T" set="method" line="8" static="1"><f a="it:?v:?f">
	<t path="Iterator"><c path="indexOf.T"/></t>
	<c path="indexOf.T"/>
	<f a="">
		<c path="indexOf.T"/>
		<e path="Bool"/>
	</f>
	<c path="Int"/>
</f></indexOf>
		<contains public="1" params="T" set="method" line="21" static="1"><f a="it:?v:?f">
	<t path="Iterator"><c path="contains.T"/></t>
	<c path="contains.T"/>
	<f a="">
		<c path="contains.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></contains>
		<array public="1" params="T" set="method" line="32" static="1"><f a="it">
	<t path="Iterator"><c path="array.T"/></t>
	<c path="Array"><c path="array.T"/></c>
</f></array>
		<map public="1" params="TIn:TOut" set="method" line="40" static="1"><f a="it:f">
	<t path="Iterator"><c path="map.TIn"/></t>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<each public="1" params="T" set="method" line="48" static="1"><f a="it:f">
	<t path="Iterator"><c path="each.T"/></t>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<reduce public="1" params="TIn:TOut" set="method" line="55" static="1"><f a="it:f:initialValue">
	<t path="Iterator"><c path="reduce.TIn"/></t>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<random public="1" params="T" get="inline" set="null" line="64" static="1"><f a="it">
	<t path="Iterator"><c path="random.T"/></t>
	<c path="random.T"/>
</f></random>
		<any public="1" params="T" set="method" line="69" static="1"><f a="it:f">
	<t path="Iterator"><c path="any.T"/></t>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" set="method" line="77" static="1"><f a="it:f">
	<t path="Iterator"><c path="all.T"/></t>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<last public="1" params="T" get="inline" set="null" line="85" static="1"><f a="it">
	<t path="Iterator"><c path="last.T"/></t>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<lastf public="1" params="T" set="method" line="92" static="1"><f a="it:f">
	<t path="Iterator"><c path="lastf.T"/></t>
	<f a="">
		<c path="lastf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="lastf.T"/></t>
</f></lastf>
		<first public="1" params="T" get="inline" set="null" line="99" static="1"><f a="it">
	<t path="Iterator"><c path="first.T"/></t>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<firstf public="1" params="T" set="method" line="104" static="1"><f a="it:f">
	<t path="Iterator"><c path="firstf.T"/></t>
	<f a="">
		<c path="firstf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="firstf.T"/></t>
</f></firstf>
		<order public="1" params="T" get="inline" set="null" line="112" static="1"><f a="it:?f">
	<t path="Iterator"><c path="order.T"/></t>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Class" params="T" file="C:\Projects\haxe/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="thx.culture.FormatParams" params="" file="src/thx/culture/FormatParams.hx">
		<cleanQuotes public="1" set="method" line="12" static="1"><f a="p">
	<c path="String"/>
	<c path="String"/>
</f></cleanQuotes>
		<params public="1" set="method" line="24" static="1"><f a="p:ps:alt">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></params>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\Projects\haxe/std/flash/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="36" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="40" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="44" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="57" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="61" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="65" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="69" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="74" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="80" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="87" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="Hashes" params="" file="src/Hashes.hx">
		<toDynamic public="1" params="T" set="method" line="11" static="1"><f a="hash">
	<c path="Hash"><c path="toDynamic.T"/></c>
	<d><c path="toDynamic.T"/></d>
</f></toDynamic>
		<importObject public="1" params="T" set="method" line="19" static="1"><f a="hash:ob">
	<c path="Hash"><c path="importObject.T"/></c>
	<d><c path="importObject.T"/></d>
	<c path="Hash"><c path="importObject.T"/></c>
</f></importObject>
		<copyTo public="1" params="T" set="method" line="24" static="1"><f a="from:to">
	<c path="Hash"><c path="copyTo.T"/></c>
	<c path="Hash"><c path="copyTo.T"/></c>
	<c path="Hash"><c path="copyTo.T"/></c>
</f></copyTo>
		<clone public="1" params="T" set="method" line="31" static="1"><f a="src">
	<c path="Hash"><c path="clone.T"/></c>
	<c path="Hash"><c path="clone.T"/></c>
</f></clone>
		<arrayOfKeys public="1" get="inline" set="null" line="38" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="Array"><c path="String"/></c>
</f></arrayOfKeys>
		<setOfKeys public="1" set="method" line="43" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="thx.collections.Set"><c path="String"/></c>
</f></setOfKeys>
		<count public="1" set="method" line="51" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<c path="Int"/>
</f></count>
		<clear public="1" set="method" line="65" static="1"><f a="hash">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></clear>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="FriendHash" params="" file="src/Hashes.hx" module="Hashes"><a><h><d/></h></a></typedef>
	<class path="thx.color.Grey" params="" file="src/thx/color/Grey.hx">
		<extends path="thx.color.Rgb"/>
		<ofRgb public="1" set="method" line="23" static="1"><f a="rgb:?luminance">
	<c path="thx.color.Rgb"/>
	<e path="thx.color.PerceivedLuminance"/>
	<c path="thx.color.Grey"/>
</f></ofRgb>
		<equals public="1" set="method" line="42" static="1"><f a="a:b">
	<c path="thx.color.Grey"/>
	<c path="thx.color.Grey"/>
	<e path="Bool"/>
</f></equals>
		<darker public="1" set="method" line="47" static="1"><f a="color:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></darker>
		<interpolate public="1" set="method" line="53" static="1"><f a="a:b:t:?equation">
	<c path="thx.color.Grey"/>
	<c path="thx.color.Grey"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="thx.color.Grey"/>
</f></interpolate>
		<grey public="1" set="null"><c path="Float"/></grey>
		<new public="1" set="method" line="16"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<enum path="thx.color.PerceivedLuminance" params="" file="src/thx/color/Grey.hx" module="thx.color.Grey">
		<Standard/>
		<PerceivedAccurate/>
		<Perceived/>
	</enum>
	<class path="thx.color.Colors" params="" file="src/thx/color/Colors.hx">
		<interpolatef public="1" set="method" line="15" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolatef>
		<interpolate public="1" set="method" line="23" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolate>
		<_reParse line="28" static="1"><c path="EReg"/></_reParse>
		<parse public="1" set="method" line="30" static="1"><f a="s">
	<c path="String"/>
	<c path="thx.color.Rgb"/>
</f></parse>
		<_c set="method" line="68" static="1"><f a="s">
	<c path="String"/>
	<c path="Int"/>
</f></_c>
		<_d set="method" line="73" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></_d>
		<_p set="method" line="83" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></_p>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\Projects\haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<rgb public="1"><c path="Float"/></rgb>
		<blueOffset public="1"><c path="Float"/></blueOffset>
		<greenOffset public="1"><c path="Float"/></greenOffset>
		<redOffset public="1"><c path="Float"/></redOffset>
		<alphaOffset public="1"><c path="Float"/></alphaOffset>
		<blueMultiplier public="1"><c path="Float"/></blueMultiplier>
		<greenMultiplier public="1"><c path="Float"/></greenMultiplier>
		<redMultiplier public="1"><c path="Float"/></redMultiplier>
		<alphaMultiplier public="1"><c path="Float"/></alphaMultiplier>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<concat public="1" set="method"><f a="c">
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<new public="1" set="method"><f a="?rm:?gm:?bm:?am:?ro:?go:?bo:?ao">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="T" file="C:\Projects\haxe/std/flash/geom/Rectangle.hx" extern="1">
		<left public="1"><c path="flash.geom.Rectangle.T"/></left>
		<top public="1"><c path="flash.geom.Rectangle.T"/></top>
		<right public="1"><c path="flash.geom.Rectangle.T"/></right>
		<bottom public="1"><c path="flash.geom.Rectangle.T"/></bottom>
		<x public="1"><c path="flash.geom.Rectangle.T"/></x>
		<y public="1"><c path="flash.geom.Rectangle.T"/></y>
		<width public="1"><c path="flash.geom.Rectangle.T"/></width>
		<height public="1"><c path="flash.geom.Rectangle.T"/></height>
		<size public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></size>
		<bottomRight public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></bottomRight>
		<topLeft public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></topLeft>
		<equals public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></equals>
		<union public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
</f></union>
		<intersects public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></intersects>
		<intersection public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
</f></intersection>
		<containsRectangle public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></containsRectangle>
		<containsPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Bool"/>
</f></containsPoint>
		<contains public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<offsetPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Void"/>
</f></offsetPoint>
		<offset public="1" set="method"><f a="x:y">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<e path="Void"/>
</f></offset>
		<inflatePoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<e path="Void"/>
</f></inflatePoint>
		<inflate public="1" set="method"><f a="x:y">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<e path="Void"/>
</f></inflate>
		<isEmpty public="1" set="method"><f a=""><e path="Bool"/></f></isEmpty>
		<setEmpty public="1" set="method"><f a=""><e path="Void"/></f></setEmpty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="x:y:w:h">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="IntIter" params="" file="C:\Projects\haxe/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="Dates" params="" file="src/Dates.hx">
		<format public="1" set="method" line="13" static="1"><f a="d:?param:?params:?culture">
	<c path="Date"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="18" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="d">
		<c path="Date"/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" get="inline" set="null" line="75" static="1"><f a="f:a:b:?equation">
	<c path="Float"/>
	<c path="Date"/>
	<c path="Date"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Date"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="80" static="1"><f a="a:b:?equation">
	<c path="Date"/>
	<c path="Date"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="v">
		<c path="Float"/>
		<c path="Date"/>
	</f>
</f></interpolatef>
		<snap public="1" set="method" line="86" static="1"><f a="time:period">
	<c path="Float"/>
	<c path="String"/>
	<c path="Float"/>
</f></snap>
		<snapToWeekDay public="1" set="method" line="111" static="1"><f a="time:day">
	<c path="Float"/>
	<c path="String"/>
	<c path="Float"/>
</f></snapToWeekDay>
		<_reparse line="138" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="139" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="144" static="1"><f a="s">
	<c path="String"/>
	<c path="Date"/>
</f></parse>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Math" params="" file="C:\Projects\haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="thx.culture.Language" params="" file="src/thx/culture/Language.hx">
		<extends path="thx.culture.Info"/>
		<languages get="getLanguages" set="null" static="1"><c path="Hash"><c path="thx.culture.Language"/></c></languages>
		<getLanguages set="method" line="9" static="1"><f a=""><c path="Hash"><c path="thx.culture.Language"/></c></f></getLanguages>
		<get public="1" set="method" line="16" static="1"><f a="name">
	<c path="String"/>
	<c path="thx.culture.Language"/>
</f></get>
		<names public="1" set="method" line="20" static="1"><f a=""><t path="Iterator"><c path="String"/></t></f></names>
		<add public="1" set="method" line="24" static="1"><f a="language">
	<c path="thx.culture.Language"/>
	<e path="Void"/>
</f></add>
		<haxe_doc>
* @todo add lazy loading
</haxe_doc>
	</class>
	<class path="thx.languages.En" params="" file="src/thx/languages/En.hx">
		<extends path="thx.culture.Language"/>
		<language public="1" get="getLanguage" set="null" static="1"><c path="thx.culture.Language"/></language>
		<getLanguage set="method" line="15" static="1"><f a=""><c path="thx.culture.Language"/></f></getLanguage>
		<new set="method" line="6"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="ValueType" params="" file="C:\Projects\haxe/std/flash/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\Projects\haxe/std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="46" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="50" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="55" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="62" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="67" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="76" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="84" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="91" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="98" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="110" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="116" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="131" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="139" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="144" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="173" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="187" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="191" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="195" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="thx.util.Message" params="" file="src/thx/util/Message.hx">
		<message public="1" set="null"><c path="String"/></message>
		<params public="1" set="null"><c path="Array"><d/></c></params>
		<toString public="1" set="method" line="26"><f a=""><c path="String"/></f></toString>
		<translate public="1" set="method" line="31"><f a="translator">
	<f a="">
		<c path="String"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></translate>
		<new public="1" set="method" line="15"><f a="message:?params:?param">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Enums" params="" file="src/Enums.hx">
		<string public="1" set="method" line="8" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></string>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Hash" params="T" file="C:\Projects\haxe/std/flash/_std/Hash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="66">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="thx.color.NamedColors" params="" file="src/thx/color/NamedColors.hx">
		<aliceblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></aliceblue>
		<antiquewhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></antiquewhite>
		<aqua public="1" set="null" static="1"><c path="thx.color.Rgb"/></aqua>
		<aquamarine public="1" set="null" static="1"><c path="thx.color.Rgb"/></aquamarine>
		<azure public="1" set="null" static="1"><c path="thx.color.Rgb"/></azure>
		<beige public="1" set="null" static="1"><c path="thx.color.Rgb"/></beige>
		<bisque public="1" set="null" static="1"><c path="thx.color.Rgb"/></bisque>
		<black public="1" set="null" static="1"><c path="thx.color.Rgb"/></black>
		<blanchedalmond public="1" set="null" static="1"><c path="thx.color.Rgb"/></blanchedalmond>
		<blue public="1" set="null" static="1"><c path="thx.color.Rgb"/></blue>
		<blueviolet public="1" set="null" static="1"><c path="thx.color.Rgb"/></blueviolet>
		<brown public="1" set="null" static="1"><c path="thx.color.Rgb"/></brown>
		<burlywood public="1" set="null" static="1"><c path="thx.color.Rgb"/></burlywood>
		<cadetblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></cadetblue>
		<chartreuse public="1" set="null" static="1"><c path="thx.color.Rgb"/></chartreuse>
		<chocolate public="1" set="null" static="1"><c path="thx.color.Rgb"/></chocolate>
		<coral public="1" set="null" static="1"><c path="thx.color.Rgb"/></coral>
		<cornflowerblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></cornflowerblue>
		<cornsilk public="1" set="null" static="1"><c path="thx.color.Rgb"/></cornsilk>
		<crimson public="1" set="null" static="1"><c path="thx.color.Rgb"/></crimson>
		<cyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></cyan>
		<darkblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkblue>
		<darkcyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkcyan>
		<darkgoldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgoldenrod>
		<darkgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgray>
		<darkgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgreen>
		<darkgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkgrey>
		<darkkhaki public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkkhaki>
		<darkmagenta public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkmagenta>
		<darkolivegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkolivegreen>
		<darkorange public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkorange>
		<darkorchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkorchid>
		<darkred public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkred>
		<darksalmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></darksalmon>
		<darkseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkseagreen>
		<darkslateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslateblue>
		<darkslategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslategray>
		<darkslategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkslategrey>
		<darkturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkturquoise>
		<darkviolet public="1" set="null" static="1"><c path="thx.color.Rgb"/></darkviolet>
		<deeppink public="1" set="null" static="1"><c path="thx.color.Rgb"/></deeppink>
		<deepskyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></deepskyblue>
		<dimgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></dimgray>
		<dimgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></dimgrey>
		<dodgerblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></dodgerblue>
		<firebrick public="1" set="null" static="1"><c path="thx.color.Rgb"/></firebrick>
		<floralwhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></floralwhite>
		<forestgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></forestgreen>
		<fuchsia public="1" set="null" static="1"><c path="thx.color.Rgb"/></fuchsia>
		<gainsboro public="1" set="null" static="1"><c path="thx.color.Rgb"/></gainsboro>
		<ghostwhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></ghostwhite>
		<gold public="1" set="null" static="1"><c path="thx.color.Rgb"/></gold>
		<goldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></goldenrod>
		<gray public="1" set="null" static="1"><c path="thx.color.Rgb"/></gray>
		<green public="1" set="null" static="1"><c path="thx.color.Rgb"/></green>
		<greenyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></greenyellow>
		<grey public="1" set="null" static="1"><c path="thx.color.Rgb"/></grey>
		<honeydew public="1" set="null" static="1"><c path="thx.color.Rgb"/></honeydew>
		<hotpink public="1" set="null" static="1"><c path="thx.color.Rgb"/></hotpink>
		<indianred public="1" set="null" static="1"><c path="thx.color.Rgb"/></indianred>
		<indigo public="1" set="null" static="1"><c path="thx.color.Rgb"/></indigo>
		<ivory public="1" set="null" static="1"><c path="thx.color.Rgb"/></ivory>
		<khaki public="1" set="null" static="1"><c path="thx.color.Rgb"/></khaki>
		<lavender public="1" set="null" static="1"><c path="thx.color.Rgb"/></lavender>
		<lavenderblush public="1" set="null" static="1"><c path="thx.color.Rgb"/></lavenderblush>
		<lawngreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lawngreen>
		<lemonchiffon public="1" set="null" static="1"><c path="thx.color.Rgb"/></lemonchiffon>
		<lightblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightblue>
		<lightcoral public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightcoral>
		<lightcyan public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightcyan>
		<lightgoldenrodyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgoldenrodyellow>
		<lightgray public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgray>
		<lightgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgreen>
		<lightgrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightgrey>
		<lightpink public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightpink>
		<lightsalmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightsalmon>
		<lightseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightseagreen>
		<lightskyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightskyblue>
		<lightslategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightslategray>
		<lightslategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightslategrey>
		<lightsteelblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightsteelblue>
		<lightyellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></lightyellow>
		<lime public="1" set="null" static="1"><c path="thx.color.Rgb"/></lime>
		<limegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></limegreen>
		<linen public="1" set="null" static="1"><c path="thx.color.Rgb"/></linen>
		<magenta public="1" set="null" static="1"><c path="thx.color.Rgb"/></magenta>
		<maroon public="1" set="null" static="1"><c path="thx.color.Rgb"/></maroon>
		<mediumaquamarine public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumaquamarine>
		<mediumblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumblue>
		<mediumorchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumorchid>
		<mediumpurple public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumpurple>
		<mediumseagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumseagreen>
		<mediumslateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumslateblue>
		<mediumspringgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumspringgreen>
		<mediumturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumturquoise>
		<mediumvioletred public="1" set="null" static="1"><c path="thx.color.Rgb"/></mediumvioletred>
		<midnightblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></midnightblue>
		<mintcream public="1" set="null" static="1"><c path="thx.color.Rgb"/></mintcream>
		<mistyrose public="1" set="null" static="1"><c path="thx.color.Rgb"/></mistyrose>
		<moccasin public="1" set="null" static="1"><c path="thx.color.Rgb"/></moccasin>
		<navajowhite public="1" set="null" static="1"><c path="thx.color.Rgb"/></navajowhite>
		<navy public="1" set="null" static="1"><c path="thx.color.Rgb"/></navy>
		<oldlace public="1" set="null" static="1"><c path="thx.color.Rgb"/></oldlace>
		<olive public="1" set="null" static="1"><c path="thx.color.Rgb"/></olive>
		<olivedrab public="1" set="null" static="1"><c path="thx.color.Rgb"/></olivedrab>
		<orange public="1" set="null" static="1"><c path="thx.color.Rgb"/></orange>
		<orangered public="1" set="null" static="1"><c path="thx.color.Rgb"/></orangered>
		<orchid public="1" set="null" static="1"><c path="thx.color.Rgb"/></orchid>
		<palegoldenrod public="1" set="null" static="1"><c path="thx.color.Rgb"/></palegoldenrod>
		<palegreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></palegreen>
		<paleturquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></paleturquoise>
		<palevioletred public="1" set="null" static="1"><c path="thx.color.Rgb"/></palevioletred>
		<papayawhip public="1" set="null" static="1"><c path="thx.color.Rgb"/></papayawhip>
		<peachpuff public="1" set="null" static="1"><c path="thx.color.Rgb"/></peachpuff>
		<peru public="1" set="null" static="1"><c path="thx.color.Rgb"/></peru>
		<pink public="1" set="null" static="1"><c path="thx.color.Rgb"/></pink>
		<plum public="1" set="null" static="1"><c path="thx.color.Rgb"/></plum>
		<powderblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></powderblue>
		<purple public="1" set="null" static="1"><c path="thx.color.Rgb"/></purple>
		<red public="1" set="null" static="1"><c path="thx.color.Rgb"/></red>
		<rosybrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></rosybrown>
		<royalblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></royalblue>
		<saddlebrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></saddlebrown>
		<salmon public="1" set="null" static="1"><c path="thx.color.Rgb"/></salmon>
		<sandybrown public="1" set="null" static="1"><c path="thx.color.Rgb"/></sandybrown>
		<seagreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></seagreen>
		<seashell public="1" set="null" static="1"><c path="thx.color.Rgb"/></seashell>
		<sienna public="1" set="null" static="1"><c path="thx.color.Rgb"/></sienna>
		<silver public="1" set="null" static="1"><c path="thx.color.Rgb"/></silver>
		<skyblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></skyblue>
		<slateblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></slateblue>
		<slategray public="1" set="null" static="1"><c path="thx.color.Rgb"/></slategray>
		<slategrey public="1" set="null" static="1"><c path="thx.color.Rgb"/></slategrey>
		<snow public="1" set="null" static="1"><c path="thx.color.Rgb"/></snow>
		<springgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></springgreen>
		<steelblue public="1" set="null" static="1"><c path="thx.color.Rgb"/></steelblue>
		<tan public="1" set="null" static="1"><c path="thx.color.Rgb"/></tan>
		<teal public="1" set="null" static="1"><c path="thx.color.Rgb"/></teal>
		<thistle public="1" set="null" static="1"><c path="thx.color.Rgb"/></thistle>
		<tomato public="1" set="null" static="1"><c path="thx.color.Rgb"/></tomato>
		<turquoise public="1" set="null" static="1"><c path="thx.color.Rgb"/></turquoise>
		<violet public="1" set="null" static="1"><c path="thx.color.Rgb"/></violet>
		<wheat public="1" set="null" static="1"><c path="thx.color.Rgb"/></wheat>
		<white public="1" set="null" static="1"><c path="thx.color.Rgb"/></white>
		<whitesmoke public="1" set="null" static="1"><c path="thx.color.Rgb"/></whitesmoke>
		<yellow public="1" set="null" static="1"><c path="thx.color.Rgb"/></yellow>
		<yellowgreen public="1" set="null" static="1"><c path="thx.color.Rgb"/></yellowgreen>
		<byName public="1" set="null" static="1"><c path="Hash"><c path="thx.color.Rgb"/></c></byName>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="flash.TextSnapshot" params="" file="C:\Projects\haxe/std/flash/TextSnapshot.hx" extern="1">
		<findText public="1" set="method"><f a="startIndex:textToFind:caseSensitive">
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></findText>
		<getCount public="1" set="method"><f a=""><c path="Int"/></f></getCount>
		<getSelected public="1" set="method"><f a="start:?end">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<e path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getText public="1" set="method"><f a="start:end:?includeLineEndings">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getText>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?closeDist">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></hitTestTextNearPos>
		<setSelectColor public="1" set="method"><f a="color">
	<c path="Int"/>
	<e path="Void"/>
</f></setSelectColor>
		<setSelected public="1" set="method"><f a="start:end:select">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSelected>
	</class>
	<class path="Strings" params="" file="src/Strings.hx">
		<_re line="14" static="1"><c path="EReg"/></_re>
		<_reSplitWC line="15" static="1"><c path="EReg"/></_reSplitWC>
		<_reReduceWS line="16" static="1"><c path="EReg"/></_reReduceWS>
		<_reStripTags line="18" static="1"><c path="EReg"/></_reStripTags>
		<_reFormat line="21" static="1"><c path="EReg"/></_reFormat>
		<format public="1" set="method" line="104" static="1">
			<f a="pattern:values:?nullstring:?culture">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[
	* Take a string pattern and replaces the placeholders with the value contained in values.
	* The culture parameter is needed for proper localization of numeric and date values.
	* Placeholders follows this schema:
<pre>
{pos[:format][,param]*}
</pre>
	* <em>pos</em> is the position in the array
	* <em>format</em> is a string sequence that identifies a specific value format (see below)
	* <em>param</em> is one or more optional parameters specific to certain format values.
	*
	* <pre>
Numeric Formats
---------------
D (default) Decimal format. The default number of decimals is set by culture. This value can overriden
            using the length parameter.
I           Integer format.
C           Currency format. The default number of decimals is set by culture. This value can overriden
            using the length parameter. The symbol can be overridden appending a string value after C
			Ei. "{0:C,3,USD}" will print something like "USD2.000" instead of "$2.00"
P           Percent format.
M           Permille format.

Date Formats
---------------
D (default) Date format.
DS          Short Date format.
DST         Short date / long time format.
DSTS        Short date / short time format.
DT          Long date / long time format.
DTS         Long date / short time format.
Y           Year format.
YM          Year Month format.
M           Month format.
MN          Month name format.
MS          Short Month name format.
MD          Month Day format.
WD          Week day format.
WDN         Week day name format.
WDS         Short week day name format.
R           RFC Date format.
DT          Date Time format.
U           Universal format.
S           Sortable format.
T           Time format.
TS          Short Time format.
C			Custom, second parameter is the format as described in FormatDate

Boolean Formats
---------------
B			Normal bool (true, false)
N			Numeric representation (1, 0)
R			Replace values with first parameter for true and second for false

String Formats
---------------
S			Normal text.
T           Truncate. First parameter is the length to trim, second is the ellipsis
			(optional parameter, defaults to '...')
PL          Pad left. First parameter is the length, second is filling char
			(optional parameter, defaults to ' ')
PR          Pad right. First parameter is the length, second is filling char
			(optional parameter, defaults to ' ')

List Formats
---------------
J           Joins the elements of the list.
			The first parameter is the format for individual items
			The second parameter is what is shown when the list is empty (defaults to '[]')
			The third is the separator.
            The fourth is the maximum number of values to show (default to nolimit).
			The fifth parameter the ellipsis for not included values (defaults to '...'),
C			Counts the elements in the list
			
TODO:
List Formats
---------------
C           Concats the elements of the list

Other things to do. Nested placeholders
</pre>
	]]></haxe_doc>
		</format>
		<formatf public="1" set="method" line="135" static="1"><f a="pattern:?nullstring:?culture">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<f a="values">
		<c path="Array"><d/></c>
		<c path="String"/>
	</f>
</f></formatf>
		<formatOne public="1" set="method" line="173" static="1"><f a="v:?param:?params:?culture">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></formatOne>
		<formatOnef public="1" set="method" line="178" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="String"/>
		<c path="String"/>
	</f>
</f></formatOnef>
		<upTo public="1" set="method" line="204" static="1"><f a="value:searchFor">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></upTo>
		<startFrom public="1" set="method" line="214" static="1"><f a="value:searchFor">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></startFrom>
		<rtrim public="1" set="method" line="224" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></rtrim>
		<ltrim public="1" set="method" line="242" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></ltrim>
		<trim public="1" get="inline" set="null" line="259" static="1"><f a="value:charlist">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></trim>
		<_reCollapse line="268" static="1"><c path="EReg"/></_reCollapse>
		<collapse public="1" set="method" line="269" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></collapse>
		<ucfirst public="1" get="inline" set="null" line="274" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ucfirst>
		<lcfirst public="1" get="inline" set="null" line="279" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></lcfirst>
		<empty public="1" set="method" line="284" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></empty>
		<isAlphaNum public="1" get="inline" set="null" line="289" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></isAlphaNum>
		<digitsOnly public="1" get="inline" set="null" line="298" static="1"><f a="value">
	<c path="String"/>
	<e path="Bool"/>
</f></digitsOnly>
		<ucwords public="1" set="method" line="307" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></ucwords>
		<ucwordsws public="1" set="method" line="317" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Like ucwords but uses only white spaces as boundaries
	 * @param	value
	 * @return
	 </haxe_doc>
		</ucwordsws>
		<__upperMatch set="method" line="326" static="1"><f a="re">
	<c path="EReg"/>
	<c path="String"/>
</f></__upperMatch>
		<__ucwordsPattern line="330" static="1"><c path="EReg"/></__ucwordsPattern>
		<__ucwordswsPattern line="332" static="1"><c path="EReg"/></__ucwordswsPattern>
		<__alphaNumPattern line="333" static="1"><c path="EReg"/></__alphaNumPattern>
		<__digitsPattern line="334" static="1"><c path="EReg"/></__digitsPattern>
		<humanize public="1" set="method" line="341" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	*  Replaces undescores with space, finds UC characters, turns them into LC and prepends them with a space.
	*  More than one UC in sequence is left untouched.
	</haxe_doc>
		</humanize>
		<capitalize public="1" set="method" line="347" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></capitalize>
		<succ public="1" set="method" line="353" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></succ>
		<underscore public="1" set="method" line="359" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></underscore>
		<dasherize public="1" set="method" line="368" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></dasherize>
		<repeat public="1" set="method" line="373" static="1"><f a="s:times">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
</f></repeat>
		<wrapColumns public="1" set="method" line="381" static="1"><f a="s:?columns:?indent:?newline">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapColumns>
		<_wrapColumns set="method" line="392" static="1"><f a="s:columns:indent:newline">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></_wrapColumns>
		<stripTags public="1" set="method" line="431" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></stripTags>
		<ascending public="1" set="method" line="440" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></ascending>
		<descending public="1" set="method" line="441" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
</f></descending>
		<_reInterpolateNumber line="443" static="1"><c path="EReg"/></_reInterpolateNumber>
		<interpolate public="1" set="method" line="444" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="String"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="449" static="1"><f a="a:b:?equation">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></interpolatef>
		<ellipsis public="1" set="method" line="516" static="1"><f a="s:?maxlen:?symbol">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></ellipsis>
		<ellipsisf public="1" set="method" line="524" static="1"><f a="?maxlen:?symbol">
	<c path="Int"/>
	<c path="String"/>
	<f a="s">
		<c path="String"/>
		<c path="String"/>
	</f>
</f></ellipsisf>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\Projects\haxe/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="?x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="57">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="73">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="87">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="String"/></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="thx.error.Error" params="" file="src/thx/error/Error.hx">
		<extends path="thx.util.Message"/>
		<pos public="1" set="null"><t path="haxe.PosInfos"/></pos>
		<inner public="1" set="null"><c path="thx.error.Error"/></inner>
		<setInner public="1" set="method" line="22"><f a="inner">
	<c path="thx.error.Error"/>
	<c path="thx.error.Error"/>
</f></setInner>
		<toString public="1" set="method" line="28" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="16"><f a="message:?params:?param:?pos">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Projects\haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="flash.geom.Point" params="T" file="C:\Projects\haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" params="T" set="method" static="1"><f a="p1:p2">
	<c path="flash.geom.Point"><c path="distance.T"/></c>
	<c path="flash.geom.Point"><c path="distance.T"/></c>
	<c path="distance.T"/>
</f></distance>
		<interpolate public="1" params="T" set="method" static="1"><f a="p1:p2:f">
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
	<c path="interpolate.T"/>
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
</f></interpolate>
		<polar public="1" params="T" set="method" static="1"><f a="dist:angle">
	<c path="polar.T"/>
	<c path="polar.T"/>
	<c path="flash.geom.Point"><c path="polar.T"/></c>
</f></polar>
		<x public="1"><c path="flash.geom.Point.T"/></x>
		<y public="1"><c path="flash.geom.Point.T"/></y>
		<length public="1"><c path="Float"/></length>
		<normalize public="1" set="method"><f a="length">
	<c path="flash.geom.Point.T"/>
	<e path="Void"/>
</f></normalize>
		<add public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
</f></add>
		<subtract public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
</f></subtract>
		<equals public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<e path="Bool"/>
</f></equals>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="flash.geom.Point.T"/>
	<c path="flash.geom.Point.T"/>
	<e path="Void"/>
</f></offset>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="x:y">
	<c path="flash.geom.Point.T"/>
	<c path="flash.geom.Point.T"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.FormatDate" params="" file="src/thx/culture/FormatDate.hx">
		<format public="1" set="method" line="98" static="1">
			<f a="pattern:date:?culture:?leadingspace">
				<c path="String"/>
				<c path="Date"/>
				<c path="thx.culture.Culture"/>
				<e path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[
	* Returns a formatted date according to the passed pattern and culture. The pattern
	* paramter accepts the following modifiers.
	*
<pre>
    description                                                   example
===========================================================================
%a	The abbreviated weekday name according to the current locale. Wed
%A	The full weekday name according to the current locale.	      Wednesday
%b	The abbreviated month name according to the current locale.	  Jan
%B	The full month name according to the current locale.	      January
%c	The preferred date and time representation for the current locale.
%C	The century number (year/100) as a 2-digit integer.	          19
%d	The day of the month as a decimal number (range 01 to 31).	  07
%D	Equivalent to %m/%d/%y. (This is the USA date format.         06/25/04
    In many countries %d/%m/%y is the standard date format.
    Thus, in an international context, both of these formats are
    ambiguous and should be avoided.)
%e	Like %d, the day of the month as a decimal number, but a      7
    leading zero may be replaced by a leadingspace.
%G	The ISO 8601 year with century as a decimal number. The       2004
    4-digit year corresponding to the ISO week number (see %V).
    This has the same format and value as %y, except that if the
    ISO week number belongs to the previous or next year, that
    year is used instead.
%g	Like %G, but without century, i.e., with a 2-digit year       04
    (00-99).
%h	Equivalent to %b.	                                          Jan
%H	The hour as a decimal number using a 24-hour clock            22
    (range 00 to 23).
%I	The hour as a decimal number using a 12-hour clock            07
    (range 01 to 12).
%j	The day of the year as a decimal number (range 001 to 366).   008
%k	The hour (24-hour clock) as a decimal number (range 0 to 23); 7
    single-digits are optionally prefixed by leadingspace.
    (See also %H.)
%l	The hour (12-hour clock) as a decimal number (range 1 to 12); 7
    single-digits are optionally prefixed by leadingspace.
    (See also %I.)
%m	The month as a decimal number (range 01 to 12).	              04
%M	The minute as a decimal number (range 00 to 59).              08
%n	A newline character.
%p	Either 'AM' or 'PM' according to the given time value, or the AM
    corresponding strings for the current locale. Noon is treated
    as 'pm' and midnight as 'am'.
%P	Like %p but in lowercase: 'am' or 'pm' or a corresponding     AM
    string for the current locale.
%r	The time in a.m. or p.m. notation. In the POSIX locale this   07:08:09 am
    is equivalent to '%I:%M:%S %p'.
%R	The time in 24-hour notation (%H:%M). For a version including 07:08
    the seconds, see %T below.
%s	The number of seconds since the Epoch, i.e., since            1099928130
    1970-01-01 00:00:00 UTC.
%S	The second as a decimal number (range 00 to 61). the upper    07
    level of the range 61 rather than 59 to allow for the
    occasional leap second and even more occasional double leap
    second.
%t	A tab character.
%T	The time in 24-hour notation (%H:%M:%S).                      17:08:09
%u	The day of the week as a decimal, range 1 to 7, Monday
    being 1. See also %w.
%U	The week number of the current year as a decimal number,      26
    range 00 to 53, starting with the first Sunday as the first
    day of week 01. See also %V and %W.
%V	The ISO 8601:1988 week number of the current year as a        26
    decimal number, range 01 to 53, where week 1 is the first
    week that has at least 4 days in the current year, and with
    Monday as the first day of the week. See also %U and %W.
%w	The day of the week as a decimal, range 0 to 6, Sunday being
    0. See also %u.
%W	The week number of the current year as a decimal number,
    range 00 to 53, starting with the first Monday as the first
    day of week 01.
%x	The preferred date representation for the current locale
    without the time.
%X	The preferred time representation for the current locale
    without the date.
%y	The year as a decimal number without a century                04
    (range 00 to 99).
%Y	The year as a decimal number including the century.           2004
%z	The time-zone as hour offset from GMT. Required to emit       -2
    RFC822-conformant dates (using "%a, %d %b %Y %H:%M:%S %z").
%Z	The time zone or name or abbreviation.                        GMT
%%	A literal '%' character.                                      %

customs for missing features
%f  The month. Single-digit months may be prefixed by             6
    leadingspace.
%i  The minute. Single-digit minutes may be prefixed by           8
    leadingspace.
%q  The second. Single-digit seconds may be prefixed by           9
    leadingspace.
</pre>
	]]></haxe_doc>
		</format>
		<yearMonth public="1" set="method" line="164" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></yearMonth>
		<monthDay public="1" set="method" line="170" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthDay>
		<date public="1" set="method" line="176" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></date>
		<dateShort public="1" set="method" line="182" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateShort>
		<dateRfc public="1" set="method" line="188" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateRfc>
		<dateTime public="1" set="method" line="194" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></dateTime>
		<universal public="1" set="method" line="200" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></universal>
		<sortable public="1" set="method" line="206" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></sortable>
		<time public="1" set="method" line="212" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></time>
		<timeShort public="1" set="method" line="218" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></timeShort>
		<year public="1" set="method" line="224" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></year>
		<month public="1" set="method" line="230" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></month>
		<monthName public="1" set="method" line="236" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthName>
		<monthNameShort public="1" set="method" line="242" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></monthNameShort>
		<weekDay public="1" set="method" line="248" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDay>
		<weekDayName public="1" set="method" line="254" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDayName>
		<weekDayNameShort public="1" set="method" line="260" static="1"><f a="date:?culture">
	<c path="Date"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></weekDayNameShort>
	</class>
	<class path="flash.text.StyleSheet" params="" file="C:\Projects\haxe/std/flash/text/StyleSheet.hx" extern="1">
		<getStyle public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getStyle>
		<setStyle public="1" set="method"><f a="name:style">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></setStyle>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<getStyleNames public="1" set="method"><f a=""><c path="Array"><d/></c></f></getStyleNames>
		<transform public="1" set="method"><f a="style">
	<d/>
	<c path="flash.TextFormat"/>
</f></transform>
		<parseCSS public="1" set="method"><f a="cssText">
	<c path="String"/>
	<e path="Bool"/>
</f></parseCSS>
		<parse public="1" set="method"><f a="cssText">
	<c path="String"/>
	<e path="Bool"/>
</f></parse>
		<load public="1" set="method"><f a="url">
	<c path="String"/>
	<e path="Bool"/>
</f></load>
		<onLoad public="1" set="dynamic"><f a="success">
	<e path="Bool"/>
	<e path="Void"/>
</f></onLoad>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Enum" params="T" file="C:\Projects\haxe/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="Bools" params="" file="src/Bools.hx">
		<format public="1" set="method" line="11" static="1"><f a="v:?param:?params:?culture">
	<e path="Bool"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="16" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<e path="Bool"/>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="35" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<e path="Bool"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="40" static="1"><f a="a:b:?equation">
	<e path="Bool"/>
	<e path="Bool"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="_">
		<c path="Float"/>
		<e path="Bool"/>
	</f>
</f></interpolatef>
		<canParse public="1" set="method" line="51" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="57" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></parse>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="thx.culture.FormatNumber" params="" file="src/thx/culture/FormatNumber.hx">
		<decimal public="1" set="method" line="6" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></decimal>
		<percent public="1" set="method" line="11" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></percent>
		<permille public="1" set="method" line="16" static="1"><f a="v:?decimals:?culture">
	<c path="Float"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></permille>
		<currency public="1" set="method" line="21" static="1"><f a="v:?symbol:?decimals:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Int"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></currency>
		<int public="1" set="method" line="26" static="1"><f a="v:?culture">
	<c path="Float"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></int>
		<digits public="1" set="method" line="36" static="1">
			<f a="v:?culture">
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	* Transforms a string of digit from the international format (0...9) to the locale format.
	* Be sure to include only characters in the 0...9 range.
	</haxe_doc>
		</digits>
		<crunch set="method" line="42" static="1"><f a="v:decimals:info:negative:positive:culture:symbol:replace">
	<c path="Float"/>
	<t path="Null"><c path="Int"/></t>
	<c path="thx.culture.core.NumberInfo"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></crunch>
		<processDigits set="method" line="54" static="1"><f a="s:digits">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></processDigits>
		<value set="method" line="62" static="1"><f a="v:info:decimals:digits">
	<c path="Float"/>
	<c path="thx.culture.core.NumberInfo"/>
	<c path="Int"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></value>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\Projects\haxe/std/flash/geom/Transform.hx" extern="1">
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<concatenatedMatrix public="1"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<pixelBounds public="1"><c path="flash.geom.Rectangle"><c path="Float"/></c></pixelBounds>
		<new public="1" set="method"><f a="mc">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Arrays" params="" file="src/Arrays.hx">
		<addIf public="1" params="T" set="method" line="10" static="1"><f a="arr:?condition:value">
	<c path="Array"><c path="addIf.T"/></c>
	<e path="Bool"/>
	<t path="Null"><c path="addIf.T"/></t>
	<c path="Array"><c path="addIf.T"/></c>
</f></addIf>
		<add public="1" params="T" get="inline" set="null" line="21" static="1"><f a="arr:value">
	<c path="Array"><c path="add.T"/></c>
	<c path="add.T"/>
	<c path="Array"><c path="add.T"/></c>
</f></add>
		<delete public="1" params="T" get="inline" set="null" line="27" static="1"><f a="arr:value">
	<c path="Array"><c path="delete.T"/></c>
	<c path="delete.T"/>
	<c path="Array"><c path="delete.T"/></c>
</f></delete>
		<filter public="1" params="T" set="method" line="33" static="1"><f a="arr:f">
	<c path="Array"><c path="filter.T"/></c>
	<f a="">
		<c path="filter.T"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<min public="1" params="T" set="method" line="42" static="1"><f a="arr:?f">
	<c path="Array"><c path="min.T"/></c>
	<f a="">
		<c path="min.T"/>
		<c path="Float"/>
	</f>
	<t path="Null"><c path="min.T"/></t>
</f></min>
		<floatMin public="1" params="T" set="method" line="57" static="1"><f a="arr:f">
	<c path="Array"><c path="floatMin.T"/></c>
	<f a="">
		<c path="floatMin.T"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></floatMin>
		<max public="1" params="T" set="method" line="66" static="1"><f a="arr:?f">
	<c path="Array"><c path="max.T"/></c>
	<f a="">
		<c path="max.T"/>
		<c path="Float"/>
	</f>
	<t path="Null"><c path="max.T"/></t>
</f></max>
		<floatMax public="1" params="T" set="method" line="81" static="1"><f a="arr:f">
	<c path="Array"><c path="floatMax.T"/></c>
	<f a="">
		<c path="floatMax.T"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></floatMax>
		<flatten public="1" params="T" set="method" line="90" static="1"><f a="arr">
	<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
	<c path="Array"><c path="flatten.T"/></c>
</f></flatten>
		<map public="1" params="TIn:TOut" get="inline" set="null" line="98" static="1"><f a="arr:f">
	<c path="Array"><c path="map.TIn"/></c>
	<f a=":">
		<c path="map.TIn"/>
		<c path="Int"/>
		<c path="map.TOut"/>
	</f>
	<c path="Array"><c path="map.TOut"/></c>
</f></map>
		<reduce public="1" params="TIn:TOut" get="inline" set="null" line="107" static="1"><f a="arr:f:initialValue">
	<c path="Array"><c path="reduce.TIn"/></c>
	<f a="::">
		<c path="reduce.TOut"/>
		<c path="reduce.TIn"/>
		<c path="Int"/>
		<c path="reduce.TOut"/>
	</f>
	<c path="reduce.TOut"/>
	<c path="reduce.TOut"/>
</f></reduce>
		<order public="1" params="T" get="inline" set="null" line="116" static="1"><f a="arr:?f">
	<c path="Array"><c path="order.T"/></c>
	<f a=":">
		<c path="order.T"/>
		<c path="order.T"/>
		<c path="Int"/>
	</f>
	<c path="Array"><c path="order.T"/></c>
</f></order>
		<split public="1" params="T" set="method" line="122" static="1"><f a="arr:?f">
	<c path="Array"><c path="split.T"/></c>
	<f a=":">
		<c path="split.T"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<c path="Array"><c path="Array"><c path="split.T"/></c></c>
</f></split>
		<exists public="1" params="T" set="method" line="138" static="1"><f a="arr:?value:?f">
	<c path="Array"><c path="exists.T"/></c>
	<c path="exists.T"/>
	<f a="">
		<c path="exists.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></exists>
		<format public="1" set="method" line="153" static="1"><f a="v:?param:?params:?culture">
	<c path="Array"><d/></c>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="183" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Array"><d/></c>
		<c path="String"/>
	</f>
</f></formatf>
		<interpolate public="1" set="method" line="215" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Float"/></c>
</f></interpolate>
		<interpolatef public="1" set="method" line="220" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="Float"/></c>
	</f>
</f></interpolatef>
		<interpolateStrings public="1" set="method" line="245" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="String"/></c>
</f></interpolateStrings>
		<interpolateStringsf public="1" set="method" line="250" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="String"/></c>
	</f>
</f></interpolateStringsf>
		<interpolateInts public="1" set="method" line="275" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Array"><c path="Int"/></c>
</f></interpolateInts>
		<interpolateIntsf public="1" set="method" line="280" static="1"><f a="a:b:?equation">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="t">
		<c path="Float"/>
		<c path="Array"><c path="Int"/></c>
	</f>
</f></interpolateIntsf>
		<indexOf public="1" params="T" set="method" line="305" static="1"><f a="arr:el">
	<c path="Array"><c path="indexOf.T"/></c>
	<c path="indexOf.T"/>
	<c path="Int"/>
</f></indexOf>
		<every public="1" params="T" set="method" line="318" static="1"><f a="arr:f">
	<c path="Array"><c path="every.T"/></c>
	<f a=":">
		<c path="every.T"/>
		<c path="Int"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></every>
		<each public="1" params="T" set="method" line="330" static="1"><f a="arr:f">
	<c path="Array"><c path="each.T"/></c>
	<f a=":">
		<c path="each.T"/>
		<c path="Int"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></each>
		<any public="1" params="T" get="inline" set="null" line="340" static="1"><f a="arr:f">
	<c path="Array"><c path="any.T"/></c>
	<f a="">
		<c path="any.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></any>
		<all public="1" params="T" get="inline" set="null" line="345" static="1"><f a="arr:f">
	<c path="Array"><c path="all.T"/></c>
	<f a="">
		<c path="all.T"/>
		<e path="Bool"/>
	</f>
	<e path="Bool"/>
</f></all>
		<random public="1" params="T" set="method" line="350" static="1"><f a="arr">
	<c path="Array"><c path="random.T"/></c>
	<c path="random.T"/>
</f></random>
		<string public="1" params="T" set="method" line="355" static="1"><f a="arr">
	<c path="Array"><c path="string.T"/></c>
	<c path="String"/>
</f></string>
		<last public="1" params="T" get="inline" set="null" line="360" static="1"><f a="arr">
	<c path="Array"><c path="last.T"/></c>
	<t path="Null"><c path="last.T"/></t>
</f></last>
		<lastf public="1" params="T" set="method" line="365" static="1"><f a="arr:f">
	<c path="Array"><c path="lastf.T"/></c>
	<f a="">
		<c path="lastf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="lastf.T"/></t>
</f></lastf>
		<first public="1" params="T" get="inline" set="null" line="372" static="1"><f a="arr">
	<c path="Array"><c path="first.T"/></c>
	<t path="Null"><c path="first.T"/></t>
</f></first>
		<firstf public="1" params="T" set="method" line="377" static="1"><f a="arr:f">
	<c path="Array"><c path="firstf.T"/></c>
	<f a="">
		<c path="firstf.T"/>
		<e path="Bool"/>
	</f>
	<t path="Null"><c path="firstf.T"/></t>
</f></firstf>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="flash._MovieClip.MCBounds" params="" file="C:\Projects\haxe/std/flash/MovieClip.hx" private="1" module="flash.MovieClip" extern="1">
		<xMin public="1"><c path="Float"/></xMin>
		<xMax public="1"><c path="Float"/></xMax>
		<yMin public="1"><c path="Float"/></yMin>
		<yMax public="1"><c path="Float"/></yMax>
	</class>
	<class path="flash.MovieClip" params="" file="C:\Projects\haxe/std/flash/MovieClip.hx" extern="1">
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<enabled public="1"><e path="Bool"/></enabled>
		<focusEnabled public="1"><e path="Bool"/></focusEnabled>
		<tabChildren public="1"><e path="Bool"/></tabChildren>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<hitArea public="1"><c path="flash.MovieClip"/></hitArea>
		<trackAsMenu public="1"><e path="Bool"/></trackAsMenu>
		<_x public="1"><c path="Float"/></_x>
		<_y public="1"><c path="Float"/></_y>
		<_xmouse public="1"><c path="Float"/></_xmouse>
		<_ymouse public="1"><c path="Float"/></_ymouse>
		<_xscale public="1"><c path="Float"/></_xscale>
		<_yscale public="1"><c path="Float"/></_yscale>
		<_width public="1"><c path="Float"/></_width>
		<_height public="1"><c path="Float"/></_height>
		<_alpha public="1"><c path="Float"/></_alpha>
		<_lockroot public="1"><e path="Bool"/></_lockroot>
		<_visible public="1"><e path="Bool"/></_visible>
		<_target public="1"><c path="String"/></_target>
		<_rotation public="1"><c path="Float"/></_rotation>
		<_name public="1"><c path="String"/></_name>
		<_droptarget public="1" set="null"><c path="String"/></_droptarget>
		<_currentframe public="1" set="null"><c path="Int"/></_currentframe>
		<_totalframes public="1" set="null"><c path="Int"/></_totalframes>
		<_framesloaded public="1" set="null"><c path="Int"/></_framesloaded>
		<_quality public="1"><c path="String"/></_quality>
		<_focusrect public="1"><e path="Bool"/></_focusrect>
		<_soundbuftime public="1"><c path="Float"/></_soundbuftime>
		<_url public="1"><c path="String"/></_url>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<getURL public="1" set="method"><f a="url:?window:?method">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<unloadMovie public="1" set="method"><f a=""><e path="Void"/></f></unloadMovie>
		<loadVariables public="1" set="method"><f a="url:?method">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></loadVariables>
		<loadMovie public="1" set="method"><f a="url:?method">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></loadMovie>
		<attachMovie public="1" set="method"><f a="id:name:depth:?initObject">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<d/>
	<c path="flash.MovieClip"/>
</f></attachMovie>
		<swapDepths public="1" set="method"><f a="mc">
	<d/>
	<e path="Void"/>
</f></swapDepths>
		<localToGlobal public="1" set="method"><f a="pt">
	<a>
		<y><c path="Float"/></y>
		<x><c path="Float"/></x>
	</a>
	<e path="Void"/>
</f></localToGlobal>
		<globalToLocal public="1" set="method"><f a="pt">
	<a>
		<y><c path="Float"/></y>
		<x><c path="Float"/></x>
	</a>
	<e path="Void"/>
</f></globalToLocal>
		<hitTest public="1" set="method"><f a="x_or_mc:?y:?shape">
	<d/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></hitTest>
		<getBounds public="1" set="method"><f a="bounds">
	<c path="flash.MovieClip"/>
	<c path="flash._MovieClip.MCBounds"/>
</f></getBounds>
		<getBytesLoaded public="1" set="method"><f a=""><c path="Int"/></f></getBytesLoaded>
		<getBytesTotal public="1" set="method"><f a=""><c path="Int"/></f></getBytesTotal>
		<attachAudio public="1" set="method"><f a="id">
	<d/>
	<e path="Void"/>
</f></attachAudio>
		<attachVideo public="1" set="method"><f a="id">
	<d/>
	<e path="Void"/>
</f></attachVideo>
		<getDepth public="1" set="method"><f a=""><c path="Int"/></f></getDepth>
		<setMask public="1" set="method"><f a="mc">
	<c path="flash.MovieClip"/>
	<e path="Void"/>
</f></setMask>
		<play public="1" set="method"><f a=""><e path="Void"/></f></play>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<nextFrame public="1" set="method"><f a=""><e path="Void"/></f></nextFrame>
		<prevFrame public="1" set="method"><f a=""><e path="Void"/></f></prevFrame>
		<gotoAndPlay public="1" set="method"><f a="frame">
	<d/>
	<e path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame">
	<d/>
	<e path="Void"/>
</f></gotoAndStop>
		<duplicateMovieClip public="1" set="method"><f a="name:depth:?initObject">
	<c path="String"/>
	<c path="Int"/>
	<d/>
	<c path="flash.MovieClip"/>
</f></duplicateMovieClip>
		<removeMovieClip public="1" set="method"><f a=""><e path="Void"/></f></removeMovieClip>
		<startDrag public="1" set="method"><f a="lockCenter:?left:?top:?right:?bottom">
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></startDrag>
		<stopDrag public="1" set="method"><f a=""><e path="Void"/></f></stopDrag>
		<createEmptyMovieClip public="1" set="method"><f a="name:depth">
	<c path="String"/>
	<c path="Int"/>
	<c path="flash.MovieClip"/>
</f></createEmptyMovieClip>
		<beginFill public="1" set="method"><f a="rgb:?alpha">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<getInstanceAtDepth public="1" set="method"><f a="depth">
	<c path="Int"/>
	<c path="flash.MovieClip"/>
</f></getInstanceAtDepth>
		<getNextHighestDepth public="1" set="method"><f a=""><c path="Int"/></f></getNextHighestDepth>
		<beginGradientFill public="1" set="method"><f a="fillType:colors:alphas:ratios:matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<lineStyle public="1" set="method"><f a="?thickness:?rgb:?alpha:?pixelHinting:?noScale:?capsStyle:?jointStyle:?miterLimit">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<endFill public="1" set="method"><f a=""><e path="Void"/></f></endFill>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<createTextField public="1" set="method"><f a="instanceName:depth:x:y:width:height">
	<c path="String"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.TextField"/>
</f></createTextField>
		<getTextSnapshot public="1" set="method"><f a=""><c path="flash.TextSnapshot"/></f></getTextSnapshot>
		<getSWFVersion public="1" set="method"><f a=""><c path="Int"/></f></getSWFVersion>
		<onData public="1" set="dynamic"><f a=""><e path="Void"/></f></onData>
		<onDragOut public="1" set="dynamic"><f a=""><e path="Void"/></f></onDragOut>
		<onDragOver public="1" set="dynamic"><f a=""><e path="Void"/></f></onDragOver>
		<onEnterFrame public="1" set="dynamic"><f a=""><e path="Void"/></f></onEnterFrame>
		<onKeyDown public="1" set="dynamic"><f a=""><e path="Void"/></f></onKeyDown>
		<onKeyUp public="1" set="dynamic"><f a=""><e path="Void"/></f></onKeyUp>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<e path="Void"/>
</f></onKillFocus>
		<onLoad public="1" set="dynamic"><f a=""><e path="Void"/></f></onLoad>
		<onMouseDown public="1" set="dynamic"><f a=""><e path="Void"/></f></onMouseDown>
		<onMouseMove public="1" set="dynamic"><f a=""><e path="Void"/></f></onMouseMove>
		<onMouseUp public="1" set="dynamic"><f a=""><e path="Void"/></f></onMouseUp>
		<onPress public="1" set="dynamic"><f a=""><e path="Void"/></f></onPress>
		<onRelease public="1" set="dynamic"><f a=""><e path="Void"/></f></onRelease>
		<onReleaseOutside public="1" set="dynamic"><f a=""><e path="Void"/></f></onReleaseOutside>
		<onRollOut public="1" set="dynamic"><f a=""><e path="Void"/></f></onRollOut>
		<onRollOver public="1" set="dynamic"><f a=""><e path="Void"/></f></onRollOver>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<e path="Void"/>
</f></onSetFocus>
		<onUnload public="1" set="dynamic"><f a=""><e path="Void"/></f></onUnload>
		<filters public="1"><c path="Array"><d/></c></filters>
		<blendMode public="1"><d/></blendMode>
		<cacheAsBitmap public="1"><e path="Bool"/></cacheAsBitmap>
		<opaqueBackground public="1"><c path="Int"/></opaqueBackground>
		<scrollRect public="1"><d/></scrollRect>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"><c path="Float"/></c></scale9Grid>
		<getRect public="1" set="method"><f a="bounds">
	<c path="flash.MovieClip"/>
	<c path="flash._MovieClip.MCBounds"/>
</f></getRect>
		<attachBitmap public="1" set="method"><f a="bmp:depth:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></attachBitmap>
		<beginBitmapFill public="1" set="method"><f a="bmp:?matrix:?repeat:?smoothing">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<lineGradientStyle public="1" set="method"><f a="fillType:colors:alphas:ratios:matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<forceSmoothing public="1">
			<e path="Bool"/>
			<haxe_doc> FP9 only </haxe_doc>
		</forceSmoothing>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="haxe.Log" params="" file="C:\Projects\haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
		<setColor public="1" set="dynamic" line="52" static="1"><f a="rgb">
	<c path="Int"/>
	<e path="Void"/>
</f></setColor>
	</class>
	<class path="Objects" params="" file="src/Objects.hx">
		<field public="1" params="T" get="inline" set="null" line="10" static="1"><f a="o:fieldname:?alt">
	<a/>
	<c path="String"/>
	<c path="field.T"/>
	<t path="Null"><c path="field.T"/></t>
</f></field>
		<keys public="1" get="inline" set="null" line="15" static="1"><f a="o">
	<a/>
	<c path="Array"><c path="String"/></c>
</f></keys>
		<values public="1" set="method" line="20" static="1"><f a="o">
	<a/>
	<c path="Array"><d/></c>
</f></values>
		<entries public="1" set="method" line="28" static="1"><f a="o">
	<a/>
	<c path="Array"><t path="Entry"/></c>
</f></entries>
		<with public="1" params="T" get="inline" set="null" line="36" static="1"><f a="ob:f">
	<c path="with.T"/>
	<f a="">
		<c path="with.T"/>
		<e path="Void"/>
	</f>
	<c path="with.T"/>
</f></with>
		<toHash public="1" set="method" line="42" static="1"><f a="ob">
	<a/>
	<c path="Hash"><d/></c>
</f></toHash>
		<copyToHash public="1" set="method" line="48" static="1"><f a="ob:hash">
	<a/>
	<c path="Hash"><d/></c>
	<c path="Hash"><d/></c>
</f></copyToHash>
		<interpolate public="1" params="T" set="method" line="55" static="1"><f a="v:a:b:?equation">
	<c path="Float"/>
	<c path="interpolate.T"/>
	<c path="interpolate.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="interpolate.T"/>
</f></interpolate>
		<interpolatef public="1" params="T" set="method" line="60" static="1"><f a="a:b:?equation">
	<c path="interpolatef.T"/>
	<c path="interpolatef.T"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="">
		<c path="Float"/>
		<c path="interpolatef.T"/>
	</f>
</f></interpolatef>
		<_reCheckKeyIsColor line="89" static="1"><c path="EReg"/></_reCheckKeyIsColor>
		<interpolateByName set="method" line="90" static="1"><f a="k:v">
	<c path="String"/>
	<d/>
	<f a="a:b:?equation">
		<d/>
		<d/>
		<f a="">
			<c path="Float"/>
			<c path="Float"/>
		</f>
		<f a="">
			<c path="Float"/>
			<d/>
		</f>
	</f>
</f></interpolateByName>
		<copyTo public="1" set="method" line="110" static="1"><f a="src:dst">
	<a/>
	<a/>
	<a/>
</f></copyTo>
		<clone public="1" params="T" set="method" line="126" static="1"><f a="src">
	<c path="clone.T"/>
	<c path="clone.T"/>
</f></clone>
		<_flatten set="method" line="133" static="1"><f a="src:cum:arr">
	<a/>
	<a>
		<value><d/></value>
		<fields><c path="Array"><c path="String"/></c></fields>
	</a>
	<c path="Array"><a>
	<value><d/></value>
	<fields><c path="Array"><c path="String"/></c></fields>
</a></c>
	<e path="Void"/>
</f></_flatten>
		<flatten public="1" set="method" line="150" static="1"><f a="src">
	<a/>
	<c path="Array"><a>
	<value><d/></value>
	<fields><c path="Array"><c path="String"/></c></fields>
</a></c>
</f></flatten>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<typedef path="Entry" params="" file="src/Objects.hx" module="Objects"><a>
	<value><d/></value>
	<key><c path="String"/></key>
</a></typedef>
	<class path="Array" params="T" file="C:\Projects\haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="Floats" params="" file="src/Floats.hx">
		<normalize public="1" set="method" line="13" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></normalize>
		<clamp public="1" set="method" line="23" static="1"><f a="v:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clamp>
		<clampSym public="1" set="method" line="33" static="1"><f a="v:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></clampSym>
		<range public="1" set="method" line="43" static="1"><f a="start:?stop:?step">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><c path="Float"/></c>
</f></range>
		<sign public="1" get="inline" set="null" line="59" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></sign>
		<abs public="1" get="inline" set="null" line="64" static="1"><f a="a">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" get="inline" set="null" line="69" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" get="inline" set="null" line="74" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<wrap public="1" set="method" line="79" static="1"><f a="v:min:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></wrap>
		<circularWrap public="1" set="method" line="86" static="1"><f a="v:max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></circularWrap>
		<interpolate public="1" set="method" line="94" static="1"><f a="f:?a:?b:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<c path="Float"/>
</f></interpolate>
		<interpolatef public="1" set="method" line="101" static="1"><f a="?a:?b:?equation">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
	<f a="f">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></interpolatef>
		<ascending public="1" set="method" line="109" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></ascending>
		<descending public="1" set="method" line="110" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></descending>
		<format public="1" set="method" line="112" static="1"><f a="v:?param:?params:?culture">
	<c path="Float"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<c path="String"/>
</f></format>
		<formatf public="1" set="method" line="117" static="1"><f a="?param:?params:?culture">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="thx.culture.Culture"/>
	<f a="v">
		<c path="Float"/>
		<c path="String"/>
	</f>
</f></formatf>
		<_reparse line="140" static="1"><c path="EReg"/></_reparse>
		<canParse public="1" set="method" line="141" static="1"><f a="s">
	<c path="String"/>
	<e path="Bool"/>
</f></canParse>
		<parse public="1" set="method" line="146" static="1"><f a="s">
	<c path="String"/>
	<c path="Float"/>
</f></parse>
		<compare public="1" get="inline" set="null" line="153" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></compare>
		<isNumeric public="1" get="inline" set="null" line="158" static="1"><f a="v">
	<d/>
	<e path="Bool"/>
</f></isNumeric>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Std" params="" file="C:\Projects\haxe/std/flash/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="52" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="56" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="thx.culture.core.NumberInfo" params="" file="src/thx/culture/core/NumberInfo.hx">
		<decimals public="1" set="null"><c path="Int"/></decimals>
		<decimalsSeparator public="1" set="null"><c path="String"/></decimalsSeparator>
		<groups public="1" set="null"><c path="Array"><c path="Int"/></c></groups>
		<groupsSeparator public="1" set="null"><c path="String"/></groupsSeparator>
		<patternNegative public="1" set="null"><c path="String"/></patternNegative>
		<patternPositive public="1" set="null"><c path="String"/></patternPositive>
		<new public="1" set="method" line="11"><f a="decimals:decimalsSeparator:groups:groupsSeparator:patternNegative:patternPositive">
	<c path="Int"/>
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\Projects\haxe/std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><c path="Float"/></a>
		<b public="1"><c path="Float"/></b>
		<c public="1"><c path="Float"/></c>
		<d public="1"><c path="Float"/></d>
		<tx public="1"><c path="Float"/></tx>
		<ty public="1"><c path="Float"/></ty>
		<transformPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="Float"/></c>
	<c path="flash.geom.Point"><c path="Float"/></c>
</f></transformPoint>
		<deltaTransformPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="Float"/></c>
	<c path="flash.geom.Point"><c path="Float"/></c>
</f></deltaTransformPoint>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<scale public="1" set="method"><f a="sx:sy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<translate public="1" set="method"><f a="tx:ty">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<rotate public="1" set="method"><f a="r">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><e path="Void"/></f></invert>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<createGradientBox public="1" set="method"><f a="width:height:?rot:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<createBox public="1" set="method"><f a="scalex:scaley:?rot:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\Projects\haxe/std/flash/filters/BitmapFilter.hx" extern="1"/>
	<class path="thx.collections.Set" params="T" file="src/thx/collections/Set.hx">
		<ofArray public="1" params="T" set="method" line="10" static="1"><f a="arr">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="thx.collections.Set"><c path="ofArray.T"/></c>
</f></ofArray>
		<_v><c path="Array"><c path="thx.collections.Set.T"/></c></_v>
		<add public="1" set="method" line="23"><f a="v">
	<c path="thx.collections.Set.T"/>
	<e path="Void"/>
</f></add>
		<remove public="1" set="method" line="29"><f a="v">
	<c path="thx.collections.Set.T"/>
	<e path="Bool"/>
</f></remove>
		<exists public="1" set="method" line="34"><f a="v">
	<c path="thx.collections.Set.T"/>
	<e path="Bool"/>
</f></exists>
		<iterator public="1" set="method" line="42"><f a=""><t path="Iterator"><t path="Null"><c path="thx.collections.Set.T"/></t></t></f></iterator>
		<array public="1" set="method" line="47"><f a=""><c path="Array"><c path="thx.collections.Set.T"/></c></f></array>
		<toString public="1" set="method" line="52"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="18"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="flash.TextFormat" params="" file="C:\Projects\haxe/std/flash/TextFormat.hx" extern="1">
		<font public="1"><c path="String"/></font>
		<size public="1"><c path="Float"/></size>
		<color public="1"><c path="Int"/></color>
		<url public="1"><c path="String"/></url>
		<target public="1"><c path="String"/></target>
		<bold public="1"><e path="Bool"/></bold>
		<italic public="1"><e path="Bool"/></italic>
		<underline public="1"><e path="Bool"/></underline>
		<align public="1"><c path="String"/></align>
		<leftMargin public="1"><c path="Float"/></leftMargin>
		<rightMargin public="1"><c path="Float"/></rightMargin>
		<indent public="1"><c path="Float"/></indent>
		<leading public="1"><c path="Float"/></leading>
		<blockIndent public="1"><c path="Float"/></blockIndent>
		<tabStops public="1"><c path="Array"><c path="Int"/></c></tabStops>
		<bullet public="1"><e path="Bool"/></bullet>
		<getTextExtent public="1" set="method"><f a="text:?width">
	<c path="String"/>
	<c path="Float"/>
	<d/>
</f></getTextExtent>
		<kerning public="1"><e path="Bool"/></kerning>
		<letterSpacing public="1"><c path="Float"/></letterSpacing>
		<display public="1"><c path="String"/></display>
		<new public="1" set="method"><f a="?font:?size:?textColor:?bold:?italic:?underline:?url:?window:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.Boot" params="" file="C:\Projects\haxe/std/flash/Boot.hx">
		<def_color line="29" static="1"><c path="Int"/></def_color>
		<exception line="30" static="1"><unknown/></exception>
		<__string_rec set="method" line="32" static="1"><f a="o:s">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__closure set="method" line="97" static="1"><f a="f:o">
	<c path="Int"/>
	<c path="Array"><unknown/></c>
	<f a=""><unknown/></f>
</f></__closure>
		<__instanceof set="method" line="126" static="1"><f a="o:cl">
	<d/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></__instanceof>
		<getTrace set="method" line="158" static="1"><f a=""><c path="flash.TextField"/></f></getTrace>
		<__set_trace_color set="method" line="177" static="1"><f a="rgb">
	<c path="Int"/>
	<e path="Void"/>
</f></__set_trace_color>
		<__trace set="method" line="182" static="1"><f a="v:inf">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__exc set="method" line="197" static="1"><f a="v">
	<unknown/>
	<e path="Void"/>
</f></__exc>
		<__clear_trace set="method" line="212" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__init set="method" line="220" static="1"><f a="current">
	<d/>
	<e path="Void"/>
</f></__init>
	</class>
	<class path="thx.math.Equations" params="" file="src/thx/math/Equations.hx">
		<linear public="1" set="method" line="10" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></linear>
		<polynomial public="1" set="method" line="15" static="1"><f a="t:e">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></polynomial>
		<quadratic public="1" set="method" line="20" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></quadratic>
		<cubic public="1" set="method" line="25" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></cubic>
		<sin public="1" set="method" line="30" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<exponential public="1" set="method" line="35" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></exponential>
		<circle public="1" set="method" line="40" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></circle>
		<elastic public="1" set="method" line="45" static="1"><f a="t:?a:?p">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></elastic>
		<elasticf public="1" set="method" line="59" static="1"><f a="?a:?p">
	<c path="Float"/>
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></elasticf>
		<back public="1" set="method" line="74" static="1"><f a="t:?s">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></back>
		<backf public="1" set="method" line="80" static="1"><f a="?s">
	<c path="Float"/>
	<f a="">
		<c path="Float"/>
		<c path="Float"/>
	</f>
</f></backf>
		<bounce public="1" set="method" line="86" static="1"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></bounce>
		<polynomialf public="1" set="method" line="94" static="1"><f a="e">
	<c path="Float"/>
	<f a="t">
		<c path="Float"/>
		<e path="Void"/>
	</f>
</f></polynomialf>
		<haxe_doc>
 * ...
 * @author Franco Ponticelli
 </haxe_doc>
	</class>
	<class path="Date" params="" file="C:\Projects\haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="StringTools" params="" file="C:\Projects\haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
</haxe>